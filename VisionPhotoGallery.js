!function(t,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.VisionPhotoGallery=o():t.VisionPhotoGallery=o()}(this,(function(){return function(){"use strict";var t={352:function(t,o,e){function n(t,o){for(var e=0;e<o.length;e++){var n=o[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,o,e){return o in t?Object.defineProperty(t,o,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[o]=e,t}e.d(o,{default:function(){return i}});var i=function(){function t(o){var e=o.root,n=o.personId,r=o.token;if(function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw new Error("Не указан ID корневого элемента для галереи!");var i=document.getElementById(e);if(!i)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=i,!n)throw new Error("Не указан ID пользователя на портале Vision");this.personId=n,this.token=r,this.constructor.draw()}var o,e,r;return o=t,r=[{key:"request",value:function(t){var o=t.requestPath,e=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(e)};return fetch("/api/v2/vision/".concat(o,"/"),n)}},{key:"getPhotos",value:function(){return this.request({requestPath:"get_photos",requestBody:{person_id:this.personId,masterAlbum:!0}})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{person_id:this.personId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_ids:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_id:t,masterAlbum:!0}})}},{key:"draw",value:function(){var t=this,o=this.rootElement;o.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var e=o.querySelector(".vg-main-photo"),n=o.querySelector(".vg-gallery");this.getPhotos().then((function(o){if(e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),o.ok)return o.json();e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null})})).then((function(o){var r=o.find((function(t){return!0===t.main})),i=o.filter((function(t){return!0!==t.main}));if(r?e.innerHTML=t.createPhotoElement(r):e.parentElement.classList.add("hidden"),i.length){var a="";i.forEach((function(o){return a+=t.createPhotoElement(o)})),n.innerHTML=a}t.initEvents()})).catch((function(t){console.log(t)}))}},{key:"createPhotoElement",value:function(t){var o=t.photoId,e=t.main,n=t.empty,r=t.path,i=t.avatarUrl,a="",u="",s="",c="";return r&&(s='style="background-image: url('.concat(r,')"')),i&&(s='style="background-image: url('.concat(i,')"')),e&&(c='data-main="'.concat(e,'"')),e&&!n||e&&n?(u="vg-photo vg-photo--main",a='\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '):!e&&n?(u="vg-gallery__item vg-photo vg-photo--upload",a='\n                <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n            '):(u="vg-gallery__item vg-photo",a='\n                <button class="vg-photo__button vg-button vg-button--green" data-action="choose-photo">Выбрать</button>\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '),'\n            <div class="'.concat(u,'"\n                ').concat(s,'\n                data-photo-id="').concat(o,'"\n                ').concat(c,">\n                ").concat(a,"\n            </div>\n        ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(o){o.addEventListener("click",t.router[o.dataset.action],!1)}))}}],(e=[{key:"personId",get:function(){return this.constructor.personId},set:function(t){t&&(this.constructor.personId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}}])&&n(o.prototype,e),r&&n(o,r),t}();r(i,"personId",null),r(i,"rootElement",null),r(i,"token",null),r(i,"router",{"upload-photo":function(t){var o=i.rootElement.querySelector('input[type="file"]');o.addEventListener("change",i.router["file-input-changed"]),o.click()},"file-input-changed":function(t){var o=t.target.files[0],e=new FileReader;e.readAsDataURL(o),e.onload=function(){i.addPhoto(e.result).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))},e.onerror=function(){throw new Error("Ошибка загрузки фотографии (-ий): ".concat(e.error))}},"remove-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.deletePhoto(o).then((function(t){t.ok&&i.draw()}))},"update-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.updatePhoto(o).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))}})}},o={};function e(n){if(o[n])return o[n].exports;var r=o[n]={exports:{}};return t[n](r,r.exports,e),r.exports}return e.d=function(t,o){for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e(352)}().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,