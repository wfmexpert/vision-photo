var VisionPhotoGallery;VisionPhotoGallery=function(){"use strict";var t={352:function(t,e,o){var n,r;function i(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}(t=o.hmd(t)).exports=(r=n=function(){function t(e){var o=e.root,n=e.personId,r=e.token;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!o)throw new Error("Не указан ID корневого элемента для галереи!");var i=document.getElementById(o);if(!i)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=i,!n)throw new Error("Не указан ID пользователя на портале Vision");this.personId=n,this.token=r,this.constructor.draw()}var e,o,n;return e=t,n=[{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),n)}},{key:"getPhotos",value:function(){return this.request({requestPath:"get_photos",requestBody:{person_id:this.personId,masterAlbum:!0}})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{person_id:this.personId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_ids:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_id:t,masterAlbum:!0}})}},{key:"draw",value:function(){var t=this,e=this.rootElement;e.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var o=e.querySelector(".vg-main-photo"),n=e.querySelector(".vg-gallery");this.getPhotos().then((function(e){if(o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),e.ok)return e.json();o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null})})).then((function(e){var r=e.find((function(t){return!0===t.main})),i=e.filter((function(t){return!0!==t.main}));if(r?o.innerHTML=t.createPhotoElement(r):o.parentElement.classList.add("hidden"),i.length){var a="";i.forEach((function(e){return a+=t.createPhotoElement(e)})),n.innerHTML=a}t.initEvents()})).catch((function(t){console.log(t)}))}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,n=t.empty,r=t.path,i=t.avatarUrl,a="",s="",u="",c="";return r&&(u='style="background-image: url('.concat(r,')"')),i&&(u='style="background-image: url('.concat(i,')"')),o&&(c='data-main="'.concat(o,'"')),o&&!n||o&&n?(s="vg-photo vg-photo--main",a='\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '):!o&&n?(s="vg-gallery__item vg-photo vg-photo--upload",a='\n                <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n            '):(s="vg-gallery__item vg-photo",a='\n                <button class="vg-photo__button vg-button vg-button--green" data-action="choose-photo">Выбрать</button>\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '),'\n            <div class="'.concat(s,'"\n                ').concat(u,'\n                data-photo-id="').concat(e,'"\n                ').concat(c,">\n                ").concat(a,"\n            </div>\n        ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],(o=[{key:"personId",get:function(){return this.constructor.personId},set:function(t){t&&(this.constructor.personId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}}])&&i(e.prototype,o),n&&i(e,n),t}(),a(n,"personId",null),a(n,"rootElement",null),a(n,"token",null),a(n,"router",{"upload-photo":function(t){var e=n.rootElement.querySelector('input[type="file"]');e.addEventListener("change",n.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],o=new FileReader;o.readAsDataURL(e),o.onload=function(){n.addPhoto(o.result).then((function(t){t.ok&&n.draw()})).catch((function(t){console.log(t)}))},o.onerror=function(){throw new Error("Ошибка загрузки фотографии (-ий): ".concat(o.error))}},"remove-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&n.deletePhoto(e).then((function(t){t.ok&&n.draw()}))},"update-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&n.updatePhoto(e).then((function(t){t.ok&&n.draw()})).catch((function(t){console.log(t)}))}}),r)}},e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={id:n,loaded:!1,exports:{}};return t[n](r,r.exports,o),r.loaded=!0,r.exports}return o.hmd=function(t){return(t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t},o(352)}().default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,