!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VisionPhotoGallery=e():t.VisionPhotoGallery=e()}(this,(function(){return function(){"use strict";var t={946:function(t,e,o){function n(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,n)}return o}function r(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(Object(o),!0).forEach((function(e){a(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}o.d(e,{default:function(){return u}});var u=function(){function t(e){var o=e.root,n=e.employeeId,r=e.visionPersonId,i=e.token,s=e.disableControls,a=void 0!==s&&s;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!o)throw new Error("Не указан ID корневого элемента для галереи!");var u=document.getElementById(o);if(!u)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=u,!n&&!r)throw new Error("Не указан ID пользователя на портале Vision");this.employeeId=n,this.visionPersonId=r,this.token=i,this.disableControls=a,this.constructor.draw()}var e,o,n;return e=t,n=[{key:"update",value:function(t){var e=t.employeeId,o=t.token;this.employeeId=e,this.token=o,this.draw()}},{key:"handleError",value:function(t){var e=t.message,o=t.blockingErrorMessage;if(this.errorFunction){var n="";"object"===i(e)&&Object.keys(e).reverse().forEach((function(t){n+="".concat(e[t],"<br/>")}));var r=n.length?n:JSON.stringify(e);this.errorFunction(r,"Ошибка")}else{if(o)throw new Error(o);console.log(e)}}},{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),n)}},{key:"getPhotos",value:function(){var t={};return this.employeeId&&!this.visionPersonId?t.employeeId=this.employeeId:this.visionPersonId&&(t.vision_person_id=this.visionPersonId),this.request({requestPath:"get_photos",requestBody:r(r({},t),{},{masterAlbum:!0})})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{employeeId:this.employeeId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{employeeId:this.employeeId,photoIds:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"update_photo",requestBody:{employeeId:this.employeeId,photo_id:t}})}},{key:"draw",value:function(){var t=this,e=this.rootElement;e.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var o=e.querySelector(".vg-main-photo"),n=e.querySelector(".vg-gallery");this.getPhotos().then((function(e){if(o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),e.ok)return e.json();o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),t.initEvents()})).then((function(e){if(e){var r=e.find((function(t){return!0===t.main})),i=e.filter((function(t){return!0!==t.main}));if(r?o.innerHTML=t.createPhotoElement(r):o.parentElement.classList.add("hidden"),i.length){var s="";i.forEach((function(e){return s+=t.createPhotoElement(e)})),s+=t.createPhotoElement({main:!1,empty:!0,photoId:null}),n.innerHTML=s}t.initEvents()}})).catch((function(e){t.handleError({message:e}),t.initEvents()})),this.initEvents()}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,n=t.empty,r=t.path,i=t.avatarUrl,s=this.disableControls,a="",u="",c="",l="";return r&&(c='style="background-image: url('.concat(r,')"')),i&&(c='style="background-image: url('.concat(i,')"')),o&&(l='data-main="'.concat(o,'"')),o&&!n?(u="vg-photo vg-photo--main",a='\n        <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n      '):o&&n?(u="vg-photo vg-photo--main",a='\n        <button class="vg-photo__button vg-button" data-action="upload-photo">Загрузить</button>\n      '):!o&&n?(u="vg-gallery__item vg-photo vg-photo--upload",a='\n        <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n      '):(u="vg-gallery__item vg-photo",a='\n        <button class="vg-photo__button vg-button vg-button--green" data-action="update-photo">Выбрать</button>\n        <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n      '),'\n      <div class="'.concat(u,'"\n        ').concat(c,'\n        data-photo-id="').concat(e,'"\n        ').concat(l,">\n        ").concat(s?"":a,"\n        </div>\n      ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],(o=[{key:"errorFunction",get:function(){return this.constructor.errorFunction},set:function(t){t&&(this.constructor.errorFunction=t)}},{key:"employeeId",get:function(){return this.constructor.employeeId},set:function(t){t&&(this.constructor.employeeId=t)}},{key:"visionPersonId",get:function(){return this.constructor.employeeId},set:function(t){t&&(this.constructor.visionPersonId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}},{key:"disableControls",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.disableControls=t)}}])&&s(e.prototype,o),n&&s(e,n),t}();a(u,"employeeId",null),a(u,"visionPersonId",null),a(u,"rootElement",null),a(u,"token",null),a(u,"disableControls",!1),a(u,"errorFunction",null),a(u,"router",{"upload-photo":function(t){var e=u.rootElement.querySelector('input[type="file"]');e.addEventListener("change",u.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],o=new FileReader;o.readAsDataURL(e),o.onload=function(){u.addPhoto(o.result).then((function(t){if(t.ok)u.draw();else if(200!==t.status)return t.json()})).then((function(t){200!==t.status&&u.handleError({message:t})}))},o.onerror=function(){u.handleError({message:o.error,blockingErrorMessage:"Ошибка загрузки фотографии (-ий): ".concat(o.error)})}},"remove-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&u.deletePhoto(+e).then((function(t){if(t.ok)u.draw();else if(200!==t.status)return t.json()})).then((function(t){200!==t.status&&u.handleError({message:t})}))},"update-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&u.updatePhoto(+e).then((function(t){if(t.ok)u.draw();else if(200!==t.status)return t.json()})).then((function(t){200!==t.status&&u.handleError({message:t})}))}})}},e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={exports:{}};return t[n](r,r.exports,o),r.exports}return o.d=function(t,e){for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o(946)}().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS8uL1Zpc2lvblBob3RvR2FsbGVyeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJWaXNpb25QaG90b0dhbGxlcnkiLCJlbXBsb3llZUlkIiwidmlzaW9uUGVyc29uSWQiLCJ0b2tlbiIsImRpc2FibGVDb250cm9scyIsIkVycm9yIiwicm9vdEVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29uc3RydWN0b3IiLCJkcmF3IiwicGFyYW1zIiwibWVzc2FnZSIsImJsb2NraW5nRXJyb3JNZXNzYWdlIiwiZXJyb3JGdW5jdGlvbiIsIm1lc3NhZ2VTdHJpbmciLCJPYmplY3QiLCJrZXlzIiwicmV2ZXJzZSIsImZvckVhY2giLCJrZXkiLCJlcnJvck1lc3NhZ2UiLCJsZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImxvZyIsInJlcXVlc3RQYXRoIiwicmVxdWVzdEJvZHkiLCJyZXF1ZXN0RGVmYXVsdHMiLCJtZXRob2QiLCJtb2RlIiwiY3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiYm9keSIsImZldGNoIiwiZW1wbG95ZWUiLCJ2aXNpb25fcGVyc29uX2lkIiwicmVxdWVzdCIsIm1hc3RlckFsYnVtIiwiaW1hZ2UiLCJwaG90b0lkIiwicGhvdG9JZHMiLCJwaG90b19pZCIsImlubmVySFRNTCIsIm1haW5QaG90b0NvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJnYWxsZXJ5IiwiZ2V0UGhvdG9zIiwidGhlbiIsInJlc3BvbnNlIiwiY3JlYXRlUGhvdG9FbGVtZW50IiwibWFpbiIsImVtcHR5Iiwib2siLCJqc29uIiwiaW5pdEV2ZW50cyIsInJlc3BvbnNlSnNvbiIsIm1haW5QaG90b0RhdGEiLCJmaW5kIiwiZ2FsbGVyeVBob3Rvc0RhdGEiLCJmaWx0ZXIiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZ2FsbGVyeVBob3Rvc0h0bWwiLCJwaG90b0RhdGEiLCJjYXRjaCIsImVycm9yIiwiaGFuZGxlRXJyb3IiLCJwYXRoIiwiYXZhdGFyVXJsIiwiaXNDb250cm9sc0Rpc2FibGVkIiwiYnV0dG9ucyIsImVsZW1lbnRDbGFzc2VzIiwiYmFja2dyb3VuZEltYWdlIiwibWFpbkF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwicm91dGVyIiwiZGF0YXNldCIsImFjdGlvbiIsInZhbHVlIiwiZSIsImZpbGVJbnB1dCIsImNsaWNrIiwiZmlsZSIsInRhcmdldCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWQiLCJhZGRQaG90byIsInJlc3VsdCIsInN0YXR1cyIsIm9uZXJyb3IiLCJjbG9zZXN0IiwiZGVsZXRlUGhvdG8iLCJ1cGRhdGVQaG90byIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJv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LEVBRGMyQyxFQUFFSSxPQUFPVSxRQUFRLGFBQ1BqQixRQUF4QnhDLFFBRURBLEdBMWZTekMsRUEyZlJvRyxhQUFhM0QsR0FDZlEsTUFBSyxTQUFBQyxHQUNKLEdBQUlBLEVBQVNJLEdBN2ZKdEQsRUE4ZkZVLFlBQ0EsR0FBd0IsTUFBcEJ3QyxFQUFTOEMsT0FDbEIsT0FBTzlDLEVBQVNLLFVBR25CTixNQUFLLFNBQUFDLEdBQ29CLE1BQXBCQSxFQUFTOEMsUUFwZ0JKaEcsRUFxZ0JGcUUsWUFBWSxDQUNmekQsUUFBU3NDLFlDNWdCckJtRCxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsR0FBR0YsRUFBeUJFLEdBQzNCLE9BQU9GLEVBQXlCRSxHQUFVNUcsUUFHM0MsSUFBSUMsRUFBU3lHLEVBQXlCRSxHQUFZLENBR2pENUcsUUFBUyxJQU9WLE9BSEE2RyxFQUFvQkQsR0FBVTNHLEVBQVFBLEVBQU9ELFFBQVMyRyxHQUcvQzFHLEVBQU9ELFFDakJmLE9DRkEyRyxFQUFvQkcsRUFBSSxTQUFTOUcsRUFBUytHLEdBQ3pDLElBQUksSUFBSXRGLEtBQU9zRixFQUNYSixFQUFvQkssRUFBRUQsRUFBWXRGLEtBQVNrRixFQUFvQkssRUFBRWhILEVBQVN5QixJQUM1RUosT0FBTzRGLGVBQWVqSCxFQUFTeUIsRUFBSyxDQUFFeUYsWUFBWSxFQUFNQyxJQUFLSixFQUFXdEYsTUNKM0VrRixFQUFvQkssRUFBSSxTQUFTSSxFQUFLQyxHQUFRLE9BQU9oRyxPQUFPaUcsVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsSUZHeEZWLEVBQW9CLEsiLCJmaWxlIjoiVmlzaW9uUGhvdG9HYWxsZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiVmlzaW9uUGhvdG9HYWxsZXJ5XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlZpc2lvblBob3RvR2FsbGVyeVwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICcuL2FwcC5zY3NzJztcblxuLyoqXG4gKiDQmtC70LDRgdGBINCz0LDQu9C10YDQtdC4LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaXNpb25QaG90b0dhbGxlcnkge1xuICBzdGF0aWMgZW1wbG95ZWVJZCA9IG51bGw7XG4gIHN0YXRpYyB2aXNpb25QZXJzb25JZCA9IG51bGw7XG4gIHN0YXRpYyByb290RWxlbWVudCA9IG51bGw7XG4gIHN0YXRpYyB0b2tlbiA9IG51bGw7XG4gIHN0YXRpYyBkaXNhYmxlQ29udHJvbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICog0JrQvtC90YHRgtGA0YPQutGC0L7RgCDRjdC60LfQtdC80L/Qu9GP0YDQsCDQutC70LDRgdGB0LAg0LPQsNC70LXRgNC10LguXG4gICAqIEBwYXJhbSByb290IHtzdHJpbmd9IElEINC60L7RgNC90LXQstC+0LPQviDRjdC70LXQvNC10L3RgtCwLCDQutGD0LTQsCDQsdGD0LTQtdGCINGA0LXQvdC00LXRgNC40YLRjNGB0Y8g0LPQsNC70LXRgNC10Y8uXG4gICAqIEBwYXJhbSBlbXBsb3llZUlkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICogQHBhcmFtIHZpc2lvblBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXG4gICAqIEBwYXJhbSBkaXNhYmxlQ29udHJvbHMge2Jvb2xlYW59INCe0YLQutC70Y7Rh9C40YLRjCDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC30LDQs9GA0YPQt9C60LgsINC+0LHQvdC+0LLQu9C10L3QuNGPINC4INGD0LTQsNC70LXQvdC40Y8g0YTQvtGC0L7Qs9GA0LDRhNC40LkuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7cm9vdCwgZW1wbG95ZWVJZCwgdmlzaW9uUGVyc29uSWQsIHRva2VuLCBkaXNhYmxlQ29udHJvbHMgPSBmYWxzZX0pIHtcbiAgICBpZiAoIXJvb3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDRg9C60LDQt9Cw0L0gSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm9vdCk7XG5cbiAgICBpZiAoISFyb290RWxlbWVudCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ9Cf0YDQvtCy0LXRgNGM0YLQtSDRg9C60LDQt9Cw0L3QvdGL0LkgSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGlmICghZW1wbG95ZWVJZCAmJiAhdmlzaW9uUGVyc29uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDRg9C60LDQt9Cw0L0gSUQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC90LAg0L/QvtGA0YLQsNC70LUgVmlzaW9uJyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbXBsb3llZUlkID0gZW1wbG95ZWVJZDtcbiAgICB0aGlzLnZpc2lvblBlcnNvbklkID0gdmlzaW9uUGVyc29uSWQ7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuZGlzYWJsZUNvbnRyb2xzID0gZGlzYWJsZUNvbnRyb2xzO1xuXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5kcmF3KCk7XG4gIH1cblxuICAvKipcbiAgICog0J3QsNC30L3QsNGH0LDQtdC80YvQuSDQvNC10YLQvtC0INC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICogQHR5cGUge251bGx8RnVuY3Rpb259INCk0YPQvdC60YbQuNGPINC+0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7RiNC40LHQvtC6LlxuICAgKi9cbiAgc3RhdGljIGVycm9yRnVuY3Rpb24gPSBudWxsO1xuICAvKipcbiAgICog0J/QvtC70YPRh9C10L3QuNC1INC80LXRgtC+0LTQsCDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqIEB0eXBlIHtudWxsfEZ1bmN0aW9ufSDQpNGD0L3QutGG0LjRjyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICovXG4gIGdldCBlcnJvckZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmVycm9yRnVuY3Rpb247XG4gIH1cblxuICAvKipcbiAgICog0J3QsNC30L3QsNGH0LXQvdC40LUg0LzQtdGC0L7QtNCwINC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICogQHBhcmFtIGVycm9yRnVuY3Rpb24ge251bGx8RnVuY3Rpb259INCk0YPQvdC60YbQuNGPINC+0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7RiNC40LHQvtC6LlxuICAgKi9cbiAgc2V0IGVycm9yRnVuY3Rpb24oZXJyb3JGdW5jdGlvbikge1xuICAgIGlmIChlcnJvckZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmVycm9yRnVuY3Rpb24gPSBlcnJvckZ1bmN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QsiDQs9Cw0LvQtdGA0LXQuC5cbiAgICogQHBhcmFtIGVtcGxveWVlSWQge251bWJlcnxudW1iZXJ9IElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ30gQ1NSRi3RgtC+0LrQtdC9INGB0LXRgdGB0Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgc3RhdGljIHVwZGF0ZSh7ZW1wbG95ZWVJZCwgdG9rZW59KSB7XG4gICAgdGhpcy5lbXBsb3llZUlkID0gZW1wbG95ZWVJZDtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LjRgtGMIElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICovXG4gIGdldCBlbXBsb3llZUlkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmVtcGxveWVlSWQ7XG4gIH1cblxuICAvKipcbiAgICog0J3QsNC30L3QsNGH0LXQvdC40LUg0Y3QutC30LXQvNC/0LvRj9GA0YMg0LPQsNC70LXRgNC10LggSUQg0YHQvtGC0YDRg9C00L3QuNC60LAuXG4gICAqIEBwYXJhbSBlbXBsb3llZUlkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICovXG4gIHNldCBlbXBsb3llZUlkKGVtcGxveWVlSWQpIHtcbiAgICBpZiAoZW1wbG95ZWVJZCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5lbXBsb3llZUlkID0gZW1wbG95ZWVJZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9C40YLRjCBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHJldHVybiB7bnVtYmVyfHN0cmluZ30gSUQg0YHQvtGC0YDRg9C00L3QuNC60LAg0LDRg9GC0YHQvtGA0YHQtdGA0LAuXG4gICAqL1xuICBnZXQgdmlzaW9uUGVyc29uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZW1wbG95ZWVJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQtdC90LjQtSDRjdC60LfQtdC80L/Qu9GP0YDRgyDQs9Cw0LvQtdGA0LXQuCBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHZpc2lvblBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICovXG4gIHNldCB2aXNpb25QZXJzb25JZCh2aXNpb25QZXJzb25JZCkge1xuICAgIGlmICh2aXNpb25QZXJzb25JZCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci52aXNpb25QZXJzb25JZCA9IHZpc2lvblBlcnNvbklkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQmtC+0YDQvdC10LLQvtC5INGN0LvQtdC80LXQvdGCLCDQsiDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINGA0LXQvdC00LXRgNC40YLRjNGB0Y8g0LPQsNC70LXRgNC10Y8uXG4gICAqIEByZXR1cm4ge251bGx8RWxlbWVudH0g0JrQvtGA0L3QtdCy0L7QuSDRjdC70LXQvNC10L3RgiDQtNC70Y8g0YDQtdC90LTQtdGA0LAuXG4gICAqL1xuICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Iucm9vdEVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9C40YLRjCBDU1JGLdGC0L7QutC10L0g0YHQtdGB0YHQuNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICogQHJldHVybiB7bnVsbHxzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDRgdC10YHRgdC40Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgZ2V0IHRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9C40YLRjCBDU1JGLdGC0L7QutC10L0g0YHQtdGB0YHQuNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDRgdC10YHRgdC40Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgc2V0IHRva2VuKHRva2VuKSB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnRva2VuID0gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LfQvdCw0YfQtdC90LjQtSDRgdC+0YHRgtC+0Y/QvdC40Y8g0LrQvtC90YLRgNC+0LvQvtCyLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSDQodC+0YHRgtC+0Y/QvdC40LUg0LrQvtC90YLRgNC+0LvQvtCyLlxuICAgKi9cbiAgZ2V0IGRpc2FibGVDb250cm9scygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQuNGC0YwgQ1NSRi3RgtC+0LrQtdC9INGB0LXRgdGB0LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXG4gICAqIEBwYXJhbSB2YWx1ZSB7Ym9vbGVhbn0g0JLQutC70Y7Rh9C40YLRjC/QvtGC0LrQu9GO0YfQuNGC0Ywg0LrQvtC90YLRgNC+0LvRiy5cbiAgICovXG4gIHNldCBkaXNhYmxlQ29udHJvbHModmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzYWJsZUNvbnRyb2xzID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YjQuNCx0L7Qui5cbiAgICogQHBhcmFtIHBhcmFtcy5tZXNzYWdlIHtzdHJpbmd9INCh0L7QvtCx0YnQtdC90LjQtSDQvtCxINC+0YjQuNCx0LrQtS5cbiAgICogQHBhcmFtIHBhcmFtcy5ibG9ja2luZ0Vycm9yTWVzc2FnZSB7c3RyaW5nfSDQkdC70L7QutC40YDRg9GO0YnQtdC1INC/0L7RgtC+0Log0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1LlxuICAgKi9cbiAgc3RhdGljIGhhbmRsZUVycm9yKHBhcmFtcykge1xuICAgIGNvbnN0IHttZXNzYWdlLCBibG9ja2luZ0Vycm9yTWVzc2FnZX0gPSBwYXJhbXM7XG5cbiAgICBpZiAodGhpcy5lcnJvckZ1bmN0aW9uKSB7XG4gICAgICBsZXQgbWVzc2FnZVN0cmluZyA9ICcnO1xuXG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1lc3NhZ2UpLnJldmVyc2UoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgbWVzc2FnZVN0cmluZyArPSBgJHttZXNzYWdlW2tleV19PGJyLz5gO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gbWVzc2FnZVN0cmluZy5sZW5ndGggPyBtZXNzYWdlU3RyaW5nIDogSlNPTi5zdHJpbmdpZnkobWVzc2FnZSk7XG5cbiAgICAgIHRoaXMuZXJyb3JGdW5jdGlvbihlcnJvck1lc3NhZ2UsICfQntGI0LjQsdC60LAnKTtcbiAgICB9IGVsc2UgaWYgKGJsb2NraW5nRXJyb3JNZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYmxvY2tpbmdFcnJvck1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdGR0YDRgtC60LAg0LTQu9GPINC30LDQv9GA0L7RgdC+0LIg0LogQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdFBhdGgge3N0cmluZ30g0J3QsNC30LLQsNC90LjQtSDQvNC10YLQvtC00LAgQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdEJvZHkge29iamVjdH0g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHN0YXRpYyByZXF1ZXN0KHtyZXF1ZXN0UGF0aCwgcmVxdWVzdEJvZHl9KSB7XG4gICAgY29uc3QgcmVxdWVzdERlZmF1bHRzID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBtb2RlOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUNTUkZUb2tlbic6IHRoaXMudG9rZW4sXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgIH07XG5cbiAgICByZXR1cm4gZmV0Y2goYC9hcGkvdjIvdmlzaW9uLyR7cmVxdWVzdFBhdGh9L2AsIHJlcXVlc3REZWZhdWx0cyk7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9Cz0YDRg9C30LrQsCDQstGB0LXRhSDRhNC+0YLQvtCz0YDQsNGE0LjQuSDRgSDQv9C+0YDRgtCw0LvQsCBWaXNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn0g0J/RgNC+0LzQuNGBINGBINGA0LXQt9GD0LvRjNGC0LDRgtC+0Lwg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBzdGF0aWMgZ2V0UGhvdG9zKCkge1xuICAgIGNvbnN0IGVtcGxveWVlID0ge307XG5cbiAgICBpZiAodGhpcy5lbXBsb3llZUlkICYmICF0aGlzLnZpc2lvblBlcnNvbklkKSB7XG4gICAgICBlbXBsb3llZS5lbXBsb3llZUlkID0gdGhpcy5lbXBsb3llZUlkO1xuICAgIH0gZWxzZSBpZiAodGhpcy52aXNpb25QZXJzb25JZCkge1xuICAgICAgZW1wbG95ZWUudmlzaW9uX3BlcnNvbl9pZCA9IHRoaXMudmlzaW9uUGVyc29uSWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2dldF9waG90b3MnLFxuICAgICAgcmVxdWVzdEJvZHk6IHtcbiAgICAgICAgLi4uZW1wbG95ZWUsXG4gICAgICAgIG1hc3RlckFsYnVtOiB0cnVlLFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINC00L7QsdCw0LLQu9C10L3QuNC1ICjQt9Cw0LPRgNGD0LfQutGDKSDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHBhcmFtIGltYWdlIHtCdWZmZXJFbmNvZGluZ30g0KTQvtGC0L7Qs9GA0LDRhNC40Lgg0LIg0YTQvtGA0LzQsNGC0LUgQmFzZTY0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDRgSDRgNC10LfRg9C70YzRgtCw0YLQvtC8INCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQv9GA0L7RgdCwLlxuICAgKi9cbiAgc3RhdGljIGFkZFBob3RvKGltYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2FkZF9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBlbXBsb3llZUlkOiB0aGlzLmVtcGxveWVlSWQsXG4gICAgICAgIGltYWdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDRg9C00LDQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gcGhvdG9JZCB7TnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSDQn9GA0L7QvNC40YEg0YEg0YDQtdC30YPQu9GM0YLQsNGC0L7QvCDQstGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHN0YXRpYyBkZWxldGVQaG90byhwaG90b0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2RlbGV0ZV9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBlbXBsb3llZUlkOiB0aGlzLmVtcGxveWVlSWQsXG4gICAgICAgIHBob3RvSWRzOiBbcGhvdG9JZF0sXG4gICAgICAgIG1hc3RlckFsYnVtOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDQvtCx0L3QvtCy0LvQtdC90LjQtSDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHBhcmFtIHBob3RvSWQge051bWJlcn0gSUQg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0L3QsCDQv9C+0YDRgtCw0LvQtSBWaXNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn0g0J/RgNC+0LzQuNGBINGBINGA0LXQt9GD0LvRjNGC0LDRgtC+0Lwg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBzdGF0aWMgdXBkYXRlUGhvdG8ocGhvdG9JZCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgcmVxdWVzdFBhdGg6ICd1cGRhdGVfcGhvdG8nLFxuICAgICAgcmVxdWVzdEJvZHk6IHtcbiAgICAgICAgZW1wbG95ZWVJZDogdGhpcy5lbXBsb3llZUlkLFxuICAgICAgICBwaG90b19pZDogcGhvdG9JZCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog0J7RgtGA0LjRgdC+0LLQutCwIERPTSDQs9Cw0LvQtdGA0LXQuNC4LlxuICAgKi9cbiAgc3RhdGljIGRyYXcoKSB7XG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLnJvb3RFbGVtZW50O1xuXG4gICAgcm9vdEVsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5XCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9fZmlsZS1maWVsZFwiIHRhYmluZGV4PVwiLTFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX2l0ZW0gdmlzaW9uLXBob3RvLWdhbGxlcnlfX2l0ZW0tLW1haW5cIj5cbiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX3RpdGxlXCI+0J7RgdC90L7QstC90LDRjyDRhNC+0YLQvtCz0YDQsNGE0LjRjzwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2Zy1tYWluLXBob3RvXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X190aXRsZVwiPtCT0LDQu9C10YDQtdGPPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZnLWdhbGxlcnlcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuXG4gICAgY29uc3QgbWFpblBob3RvQ29udGFpbmVyID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnZnLW1haW4tcGhvdG8nKTtcbiAgICBjb25zdCBnYWxsZXJ5ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnZnLWdhbGxlcnknKTtcblxuICAgIHRoaXMuZ2V0UGhvdG9zKCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBtYWluUGhvdG9Db250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe1xuICAgICAgICBtYWluOiB0cnVlLFxuICAgICAgICBlbXB0eTogdHJ1ZSxcbiAgICAgICAgcGhvdG9JZDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGdhbGxlcnkuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe1xuICAgICAgICBtYWluOiBmYWxzZSxcbiAgICAgICAgZW1wdHk6IHRydWUsXG4gICAgICAgIHBob3RvSWQ6IG51bGwsXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYWluUGhvdG9Db250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe21haW46IHRydWUsIGVtcHR5OiB0cnVlLCBwaG90b0lkOiBudWxsfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHtcbiAgICAgIGlmICghcmVzcG9uc2VKc29uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWFpblBob3RvRGF0YSA9IHJlc3BvbnNlSnNvbi5maW5kKCh7bWFpbn0pID0+IG1haW4gPT09IHRydWUpO1xuICAgICAgY29uc3QgZ2FsbGVyeVBob3Rvc0RhdGEgPSByZXNwb25zZUpzb24uZmlsdGVyKCh7bWFpbn0pID0+IG1haW4gIT09IHRydWUpO1xuXG4gICAgICBpZiAoISFtYWluUGhvdG9EYXRhKSB7XG4gICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudChtYWluUGhvdG9EYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2FsbGVyeVBob3Rvc0RhdGEubGVuZ3RoKSB7XG4gICAgICAgIGxldCBnYWxsZXJ5UGhvdG9zSHRtbCA9ICcnO1xuXG4gICAgICAgIGdhbGxlcnlQaG90b3NEYXRhLmZvckVhY2goKHBob3RvRGF0YSkgPT4gZ2FsbGVyeVBob3Rvc0h0bWwgKz0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQocGhvdG9EYXRhKSk7XG4gICAgICAgIGdhbGxlcnlQaG90b3NIdG1sICs9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHttYWluOiBmYWxzZSwgZW1wdHk6IHRydWUsIHBob3RvSWQ6IG51bGx9KTtcbiAgICAgICAgZ2FsbGVyeS5pbm5lckhUTUwgPSBnYWxsZXJ5UGhvdG9zSHRtbFxuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pbml0RXZlbnRzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C90LjQstC10YDRgdCw0LvRjNC90YvQuSDQvNC10YLQvtC0INC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINGN0LvQtdC80LXQvdGC0LAg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBwYXJhbXMucGhvdG9JZCB7TnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHBhcmFtIHBhcmFtcy5tYWluIHtCb29sZWFufSAg0KTQu9Cw0LMg0L7RgdC90L7QstC90L7Qs9C+INGE0L7RgtC+LlxuICAgKiBAcGFyYW0gcGFyYW1zLmVtcHR5IHtCb29sZWFufSDQpNC70LDQsyBcItC/0YPRgdGC0L7Qs9C+XCIg0YTQvtGC0L4sINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQutC90L7Qv9C60Lgg0LfQsNCz0YDRg9C30LrQuC5cbiAgICogQHBhcmFtIHBhcmFtcy5wYXRoIHtTdHJpbmd9INCf0YPRgtGMINC6INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gcGFyYW1zLmF2YXRhclVybCB7U3RyaW5nfSDQn9GD0YLRjCDQuiDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHJldHVybnMge3N0cmluZ30g0K3Qu9C10LzQtdC90YIg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0LIg0LLQuNC00LUg0YHRgtGA0L7QutC4LlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVBob3RvRWxlbWVudChwYXJhbXMpIHtcbiAgICBjb25zdCB7cGhvdG9JZCwgbWFpbiwgZW1wdHksIHBhdGgsIGF2YXRhclVybH0gPSBwYXJhbXM7XG4gICAgY29uc3Qge2Rpc2FibGVDb250cm9sczogaXNDb250cm9sc0Rpc2FibGVkfSA9IHRoaXM7XG4gICAgbGV0IGJ1dHRvbnMgPSAnJztcbiAgICBsZXQgZWxlbWVudENsYXNzZXMgPSAnJztcbiAgICBsZXQgYmFja2dyb3VuZEltYWdlID0gJyc7XG4gICAgbGV0IG1haW5BdHRyaWJ1dGUgPSAnJztcblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwYXRofSlcImA7XG4gICAgfVxuXG4gICAgaWYgKGF2YXRhclVybCkge1xuICAgICAgYmFja2dyb3VuZEltYWdlID0gYHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YXZhdGFyVXJsfSlcImA7XG4gICAgfVxuXG4gICAgaWYgKG1haW4pIHtcbiAgICAgIG1haW5BdHRyaWJ1dGUgPSBgZGF0YS1tYWluPVwiJHttYWlufVwiYDtcbiAgICB9XG5cbiAgICBpZiAobWFpbiAmJiAhZW1wdHkpIHtcbiAgICAgIGVsZW1lbnRDbGFzc2VzID0gJ3ZnLXBob3RvIHZnLXBob3RvLS1tYWluJztcbiAgICAgIGJ1dHRvbnMgPSBgXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLXJlZFwiIGRhdGEtYWN0aW9uPVwicmVtb3ZlLXBob3RvXCI+0KPQtNCw0LvQuNGC0Yw8L2J1dHRvbj5cbiAgICAgIGA7XG4gICAgfSBlbHNlIGlmIChtYWluICYmIGVtcHR5KSB7XG4gICAgICBlbGVtZW50Q2xhc3NlcyA9ICd2Zy1waG90byB2Zy1waG90by0tbWFpbic7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b25cIiBkYXRhLWFjdGlvbj1cInVwbG9hZC1waG90b1wiPtCX0LDQs9GA0YPQt9C40YLRjDwvYnV0dG9uPlxuICAgICAgYDtcbiAgICB9IGVsc2UgaWYgKCFtYWluICYmIGVtcHR5KSB7XG4gICAgICBlbGVtZW50Q2xhc3NlcyA9ICd2Zy1nYWxsZXJ5X19pdGVtIHZnLXBob3RvIHZnLXBob3RvLS11cGxvYWQnO1xuICAgICAgYnV0dG9ucyA9IGBcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tdXBsb2FkXCIgZGF0YS1hY3Rpb249XCJ1cGxvYWQtcGhvdG9cIj4mIzQzOzwvYnV0dG9uPlxuICAgICAgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctZ2FsbGVyeV9faXRlbSB2Zy1waG90byc7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1ncmVlblwiIGRhdGEtYWN0aW9uPVwidXBkYXRlLXBob3RvXCI+0JLRi9Cx0YDQsNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tcmVkXCIgZGF0YS1hY3Rpb249XCJyZW1vdmUtcGhvdG9cIj7Qo9C00LDQu9C40YLRjDwvYnV0dG9uPlxuICAgICAgYDtcbiAgICB9XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cIiR7ZWxlbWVudENsYXNzZXN9XCJcbiAgICAgICAgJHtiYWNrZ3JvdW5kSW1hZ2V9XG4gICAgICAgIGRhdGEtcGhvdG8taWQ9XCIke3Bob3RvSWR9XCJcbiAgICAgICAgJHttYWluQXR0cmlidXRlfT5cbiAgICAgICAgJHtpc0NvbnRyb2xzRGlzYWJsZWQgPyAnJyA6IGJ1dHRvbnN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDQtNC70Y8g0LrQvdC+0L/QvtC6INCz0LDQu9C10YDQtdC4LlxuICAgKi9cbiAgc3RhdGljIGluaXRFdmVudHMoKSB7XG4gICAgY29uc3Qge3Jvb3RFbGVtZW50fSA9IHRoaXM7XG4gICAgY29uc3QgYnV0dG9ucyA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnJvdXRlcltidXR0b24uZGF0YXNldC5hY3Rpb25dLCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog0KDQvtGD0YLQtdGALlxuICAgKiBAdHlwZSB7e1wicmVtb3ZlLXBob3RvXCI6IGZ1bmN0aW9uKCopOiB2b2lkLCBcImZpbGUtaW5wdXQtY2hhbmdlZFwiOiBmdW5jdGlvbigqKTogdm9pZCwgXCJ1cGxvYWQtcGhvdG9cIjogZnVuY3Rpb24oKik6IHZvaWQsIFwidXBkYXRlLXBob3RvXCI6IGZ1bmN0aW9uKCopOiB2b2lkfX1cbiAgICovXG4gIHN0YXRpYyByb3V0ZXIgPSB7XG4gICAgLyoqXG4gICAgICog0JfQsNCz0YDRg9C30LrQsCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICAgKiBAcGFyYW0gZSB7RXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgICd1cGxvYWQtcGhvdG8nOiAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZUlucHV0ID0gdGhpcy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuXG4gICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5yb3V0ZXJbJ2ZpbGUtaW5wdXQtY2hhbmdlZCddKTtcbiAgICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog0KHQu9GD0YjQsNGC0LXQu9GMINGB0L7QsdGL0YLQuNGPINC40LfQvNC10L3QtdC90LjRjyDRhNCw0LnQu9C+0LLQvtCz0L4g0L/QvtC70Y8g0LLQstC+0LTQsC5cbiAgICAgKiBAcGFyYW0gZSB7ZXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgICdmaWxlLWlucHV0LWNoYW5nZWQnOiAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG5cbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkUGhvdG8ocmVhZGVyLnJlc3VsdClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZWFkZXIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogcmVhZGVyLmVycm9yLFxuICAgICAgICAgIGJsb2NraW5nRXJyb3JNZXNzYWdlOiBg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0YTQvtGC0L7Qs9GA0LDRhNC40LggKC3QuNC5KTogJHtyZWFkZXIuZXJyb3J9YCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDRg9C00LDQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4INGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgICAqIEBwYXJhbSBlIHtFdmVudH0g0KHQvtCx0YvRgtC40LUuXG4gICAgICovXG4gICAgJ3JlbW92ZS1waG90byc6IChlKSA9PiB7XG4gICAgICBjb25zdCBwaG90b0VsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KCcudmctcGhvdG8nKTtcbiAgICAgIGNvbnN0IHtwaG90b0lkfSA9IHBob3RvRWxlbWVudC5kYXRhc2V0O1xuXG4gICAgICBpZiAoISFwaG90b0lkKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlUGhvdG8oK3Bob3RvSWQpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqINCX0LDQv9GA0L7RgSDQvdCwINC+0LHQvdC+0LLQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4INGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgICAqIEBwYXJhbSBlIHtFdmVudH0g0KHQvtCx0YvRgtC40LUuXG4gICAgICovXG4gICAgJ3VwZGF0ZS1waG90byc6IChlKSA9PiB7XG4gICAgICBjb25zdCBwaG90b0VsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KCcudmctcGhvdG8nKTtcbiAgICAgIGNvbnN0IHtwaG90b0lkfSA9IHBob3RvRWxlbWVudC5kYXRhc2V0O1xuXG4gICAgICBpZiAoISFwaG90b0lkKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUGhvdG8oK3Bob3RvSWQpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg5NDYpO1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9Il0sInNvdXJjZVJvb3QiOiIifQ==