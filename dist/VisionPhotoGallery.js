!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VisionPhotoGallery=e():t.VisionPhotoGallery=e()}(this,(function(){return function(){"use strict";var t={d:function(e,o){for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}},e={};t.d(e,{default:function(){return x}});var o="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==o&&o,r="URLSearchParams"in o,n="Symbol"in o&&"iterator"in Symbol,i="FileReader"in o&&"Blob"in o&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in o,a="ArrayBuffer"in o;if(a)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function c(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function y(t){return new Promise((function(e,o){t.onload=function(){e(t.result)},t.onerror=function(){o(t.error)}}))}function m(t){var e=new FileReader,o=y(e);return e.readAsArrayBuffer(t),o}function b(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:i&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&i&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=b(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=b(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(m)}),this.text=function(){var t,e,o,r=p(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,o=y(e=new FileReader),e.readAsText(t),o;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),o=new Array(e.length),r=0;r<e.length;r++)o[r]=String.fromCharCode(e[r]);return o.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=h(t),e=c(e);var o=this.map[t];this.map[t]=o?o+", "+e:e},f.prototype.delete=function(t){delete this.map[h(t)]},f.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},f.prototype.set=function(t,e){this.map[h(t)]=c(e)},f.prototype.forEach=function(t,e){for(var o in this.map)this.map.hasOwnProperty(o)&&t.call(e,this.map[o],o,this)},f.prototype.keys=function(){var t=[];return this.forEach((function(e,o){t.push(o)})),d(t)},f.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},f.prototype.entries=function(){var t=[];return this.forEach((function(e,o){t.push([o,e])})),d(t)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var o,r,n=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(r=(o=e.method||this.method||"GET").toUpperCase(),g.indexOf(r)>-1?r:o),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function E(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var o=t.split("="),r=o.shift().replace(/\+/g," "),n=o.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}})),e}function P(t,e){if(!(this instanceof P))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},v.call(w.prototype),v.call(P.prototype),P.prototype.clone=function(){return new P(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},P.error=function(){var t=new P(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];P.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new P(null,{status:e,headers:{location:t}})};var O=o.DOMException;try{new O}catch(t){(O=function(t,e){this.message=t,this.name=e;var o=Error(t);this.stack=o.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function A(t,e){return new Promise((function(r,n){var s=new w(t,e);if(s.signal&&s.signal.aborted)return n(new O("Aborted","AbortError"));var u=new XMLHttpRequest;function l(){u.abort()}u.onload=function(){var t,e,o={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",e=new f,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var o=t.split(":"),r=o.shift().trim();if(r){var n=o.join(":").trim();e.append(r,n)}})),e)};o.url="responseURL"in u?u.responseURL:o.headers.get("X-Request-URL");var n="response"in u?u.response:u.responseText;setTimeout((function(){r(new P(n,o))}),0)},u.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},u.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},u.onabort=function(){setTimeout((function(){n(new O("Aborted","AbortError"))}),0)},u.open(s.method,function(t){try{return""===t&&o.location.href?o.location.href:t}catch(e){return t}}(s.url),!0),"include"===s.credentials?u.withCredentials=!0:"omit"===s.credentials&&(u.withCredentials=!1),"responseType"in u&&(i?u.responseType="blob":a&&s.headers.get("Content-Type")&&-1!==s.headers.get("Content-Type").indexOf("application/octet-stream")&&(u.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof f?s.headers.forEach((function(t,e){u.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){u.setRequestHeader(t,c(e.headers[t]))})),s.signal&&(s.signal.addEventListener("abort",l),u.onreadystatechange=function(){4===u.readyState&&s.signal.removeEventListener("abort",l)}),u.send(void 0===s._bodyInit?null:s._bodyInit)}))}function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function T(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,r)}return o}function k(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?T(Object(o),!0).forEach((function(e){j(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):T(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function B(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function j(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}A.polyfill=!0,o.fetch||(o.fetch=A,o.Headers=f,o.Request=w,o.Response=P);var x=function(){function t(e){var o=this,r=e.root,n=e.employeeId,i=e.visionPersonId,s=e.personId,a=e.token,u=e.controls,l=e.masterAlbum,h=void 0===l||l;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),j(this,"galleryContainer",null),j(this,"rootElement",null),j(this,"token",null),j(this,"controls",{disableAll:!1,update:!0,upload:!0,remove:!0}),j(this,"masterAlbum",!0),j(this,"errorFunction",null),j(this,"router",{"upload-photo":function(t){var e=o.rootElement.querySelector('input[type="file"]');e.addEventListener("change",o.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],r=new FileReader;r.readAsDataURL(e),r.onload=function(){o.addPhoto(r.result).then((function(t){if(t.ok)o.draw();else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},r.onerror=function(){o.handleError({message:r.error,blockingErrorMessage:"Ошибка загрузки фотографии (-ий): ".concat(r.error)})}},"remove-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&o.deletePhoto(+e).then((function(t){if(t.ok)o.draw();else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},"update-photo":function(t){var e=t.target.closest(".vg-photo"),r=e.dataset.photoId,n=e.querySelectorAll("button");r&&(n.forEach((function(t){return t.setAttribute("disabled","disabled")})),o.setAsMainPhoto(+r).then((function(t){if(t.ok)o.draw();else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})})))}}),!r)throw new Error("Не указан ID корневого элемента для галереи!");var c=document.getElementById(r);if(!c)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.rootElement=c,!n&&!i&&!s)throw new Error("Не указан ID пользователя на портале Vision");this.employee={id:null,personId:null,visionPersonId:null},this.employeeId=n,this.visionPersonId=i,this.personId=s,this.token=a,this.controls=u,this.masterAlbum=h,this.draw()}var e,o;return e=t,o=[{key:"errorFunction",get:function(){return this.errorFunction},set:function(t){t&&(this.errorFunction=t)}},{key:"update",value:function(t){var e=t.employeeId,o=t.token;this.employeeId=e,this.token=o,this.draw()}},{key:"employeeId",get:function(){return this.employee.id},set:function(t){t&&(this.employee.id=t)}},{key:"visionPersonId",get:function(){return this.employee.visionPersonId},set:function(t){t&&(this.employee.visionPersonId=t)}},{key:"personId",get:function(){return this.employee.personId},set:function(t){t&&(this.employee.personId=t)}},{key:"rootElement",get:function(){return this.rootElement}},{key:"token",get:function(){return this.token},set:function(t){t&&(this.token=t)}},{key:"controls",get:function(){return this.controls},set:function(t){this.controls=k(k({},this.controls),t)}},{key:"masterAlbum",get:function(){return this.masterAlbum},set:function(t){this.masterAlbum=t}},{key:"handleError",value:function(t){var e=t.message,o=t.blockingErrorMessage;if(this.errorFunction){var r="";"object"===I(e)&&(e.faultstring?r=e.faultstring:Object.keys(e).reverse().forEach((function(t){r+="".concat(e[t],"<br/>")})));var n=r.length?r:JSON.stringify(e);this.errorFunction(n,"Ошибка")}else{if(o)throw new Error(o);console.log(e)}}},{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,r={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),r)}},{key:"getPhotos",value:function(){var t={};return this.employeeId&&!this.visionPersonId?t.employeeId=this.employeeId:this.visionPersonId?t.vision_person_id=this.visionPersonId:this.personId&&(t.personId=this.personId),this.request({requestPath:"get_photos",requestBody:k(k({},t),{},{masterAlbum:this.masterAlbum})})}},{key:"addPhoto",value:function(t){return this.toggleOverlayMessage("Загрузка..."),this.request({requestPath:"add_photo",requestBody:{employeeId:this.employeeId,image:t}})}},{key:"deletePhoto",value:function(t){return this.toggleOverlayMessage("Удаление фотографии..."),this.request({requestPath:"delete_photo",requestBody:{photo_id:t}})}},{key:"updatePhoto",value:function(t){return this.toggleOverlayMessage("Обновление фотографии..."),this.request({requestPath:"update_photo",requestBody:{employeeId:this.employeeId,photo_id:t}})}},{key:"setAsMainPhoto",value:function(t){return this.toggleOverlayMessage("Обновление основной фотографии..."),this.request({requestPath:"set_main_photo",requestBody:{employeeId:this.employeeId,photoId:t}})}},{key:"toggleOverlayMessage",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=this.galleryContainer;if(!e)throw new Error("Не найдена корневой элемент галереи");t?(e.dataset.message=t,e.classList.add("vision-photo-gallery--message")):(e.classList.remove("vision-photo-gallery--message"),e.dataset.message="")}},{key:"draw",value:function(){var t=this,e=this.rootElement;e.innerHTML='\n      <div class="vision-photo-gallery">\n        <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n        <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n          <div class="vg-main-photo"></div>\n        </div>\n        <div class="vision-photo-gallery__item">\n          <div class="vg-gallery"></div>\n        </div>\n      </div>\n    ';var o=document.querySelector(".vision-photo-gallery");this.galleryContainer=o,this.toggleOverlayMessage("Загрузка...");var r=e.querySelector(".vg-main-photo"),n=e.querySelector(".vg-gallery"),i=this.controls.upload;this.getPhotos().then((function(e){if(r.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),i&&(n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null})),e.ok)return e.json();r.innerHTML=t.createNoPhotoElement(),t.initEvents(),t.toggleOverlayMessage()}),(function(e){t.toggleOverlayMessage(),t.handleError({message:e}),t.initEvents()})).then((function(e){if(!e||!e.length)return r.innerHTML=t.createNoPhotoElement(),n.parentElement.classList.add("hidden"),void t.toggleOverlayMessage();var o=e.find((function(t){return t.main})),s=e.filter((function(t){return!t.main}));if(o?r.innerHTML=t.createPhotoElement(o):r.parentElement.classList.add("hidden"),s.length){var a="";s.forEach((function(e){return a+=t.createPhotoElement(e)})),i&&(a+=t.createPhotoElement({main:!1,empty:!0,photoId:null})),n.innerHTML=a}else i||n.parentElement.classList.add("hidden");t.initEvents(),t.toggleOverlayMessage()}),(function(e){t.handleError({message:e}),t.toggleOverlayMessage(),t.initEvents()})).catch((function(e){t.toggleOverlayMessage(),t.handleError({message:e}),t.initEvents()})),this.initEvents()}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,r=t.empty,n=t.path,i=t.avatarUrl,s=this.controls,a=s.disableAll,u=s.upload,l=s.update,h=s.remove,c="",d="",f="",p="";return!i&&n&&(f='style="background-image: url('.concat(n,')"')),i&&(f='style="background-image: url('.concat(i,')"')),o?(p='data-main="'.concat(o,'"'),r?(d="vg-photo vg-photo--main",c=this.getPhotoButtons({upload:u})):(d="vg-photo vg-photo--main",c=this.getPhotoButtons({remove:h}))):r?(d="vg-gallery__item vg-photo vg-photo--upload",c=this.getPhotoButtons({uploadIcon:u})):(d="vg-gallery__item vg-photo",c=this.getPhotoButtons({update:l,remove:h})),'\n      <div class="'.concat(d,'"\n        ').concat(f,'\n        data-photo-id="').concat(e,'"\n        ').concat(p,">\n        ").concat(a?"":c,"\n        </div>\n      ")}},{key:"createNoPhotoElement",value:function(){return'\n      <div class="vg-photo vg-photo--main">\n        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-256 -256 1024 1024">\n          <path fill="#4a5266"\n            d="M437 310.8c-28.4-28.4-62.2-49.2-99.1-61.7 34.1-25.2 56.2-65.6 56.2-111.1C394.1 61.9 332.1 0 256 0S117.9 61.9 117.9 138.1c0 45.5 22.1 85.9 56.2 111.1 -36.9 12.4-70.8 33.3-99.1 61.7C26.6 359.2 0 423.5 0 491.8 0 503 9 512 20.2 512h471.7c11.1 0 20.2-9 20.2-20.2C512 423.5 485.4 359.2 437 310.8zM158.2 138.1c0-53.9 43.9-97.8 97.8-97.8 53.9 0 97.8 43.9 97.8 97.8 0 53.9-43.9 97.8-97.8 97.8C202.1 235.8 158.2 192 158.2 138.1zM41.2 471.7C51.4 362.2 143.9 276.2 256 276.2s204.6 86 214.8 195.5H41.2z"/>\n        </svg>\n      </div>\n    '}},{key:"getPhotoButtons",value:function(t){if(t.disableAll)return"";var e={remove:'<button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>',upload:'<button class="vg-photo__button vg-button" data-action="upload-photo">Загрузить</button>',uploadIcon:'<button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>',update:'<button class="vg-photo__button vg-button vg-button--green" data-action="update-photo">Выбрать</button>'};return Object.keys(t).reduce((function(o,r){return t[r]&&(o+=e[r]),o}),"")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],o&&B(e.prototype,o),t}();return e.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlzaW9uUGhvdG9HYWxsZXJ5LmpzIiwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBNEIsbUJBQUlELElBRWhDRCxFQUF5QixtQkFBSUMsSUFSL0IsQ0FTR0ssTUFBTSxXQUNULE8sd0JDVEEsSUFBSUMsRUFBc0IsQ0NBMUJBLEVBQXdCLFNBQVNMLEVBQVNNLEdBQ3pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEQsRUFBb0JHLEVBQUVGLEVBQVlDLEtBQVNGLEVBQW9CRyxFQUFFUixFQUFTTyxJQUM1RUUsT0FBT0MsZUFBZVYsRUFBU08sRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLE1DSjNFRixFQUF3QixTQUFTUSxFQUFLQyxHQUFRLE9BQU9MLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEssMkNDQS9GLElBQUlJLEVBQ3FCLG9CQUFmQyxZQUE4QkEsWUFDckIsb0JBQVRDLE1BQXdCQSxXQUNiLElBQVhGLEdBQTBCQSxFQUVoQ0csRUFDWSxvQkFBcUJILEVBRGpDRyxFQUVRLFdBQVlILEdBQVUsYUFBY0ksT0FGNUNELEVBSUEsZUFBZ0JILEdBQ2hCLFNBQVVBLEdBQ1YsV0FDRSxJQUVFLE9BREEsSUFBSUssTUFDRyxFQUNQLE1BQU9DLEdBQ1AsT0FBTyxHQUxYLEdBTkFILEVBY1EsYUFBY0gsRUFkdEJHLEVBZVcsZ0JBQWlCSCxFQU9oQyxHQUFJRyxFQUNGLElBQUlJLEVBQWMsQ0FDaEIscUJBQ0Esc0JBQ0EsNkJBQ0Esc0JBQ0EsdUJBQ0Esc0JBQ0EsdUJBQ0Esd0JBQ0EseUJBR0VDLEVBQ0ZDLFlBQVlDLFFBQ1osU0FBU2YsR0FDUCxPQUFPQSxHQUFPWSxFQUFZSSxRQUFRcEIsT0FBT00sVUFBVWUsU0FBU2IsS0FBS0osS0FBUyxHQUloRixTQUFTa0IsRUFBY0MsR0FJckIsR0FIb0IsaUJBQVRBLElBQ1RBLEVBQU9DLE9BQU9ELElBRVosNkJBQTZCRSxLQUFLRixJQUFrQixLQUFUQSxFQUM3QyxNQUFNLElBQUlHLFVBQVUsNENBQThDSCxFQUFPLEtBRTNFLE9BQU9BLEVBQUtJLGNBR2QsU0FBU0MsRUFBZUMsR0FJdEIsTUFIcUIsaUJBQVZBLElBQ1RBLEVBQVFMLE9BQU9LLElBRVZBLEVBSVQsU0FBU0MsRUFBWUMsR0FDbkIsSUFBSUMsRUFBVyxDQUNiQyxLQUFNLFdBQ0osSUFBSUosRUFBUUUsRUFBTUcsUUFDbEIsTUFBTyxDQUFDQyxVQUFnQkMsSUFBVlAsRUFBcUJBLE1BQU9BLEtBVTlDLE9BTklqQixJQUNGb0IsRUFBU25CLE9BQU9tQixVQUFZLFdBQzFCLE9BQU9BLElBSUpBLEVBR0YsU0FBU0ssRUFBUUMsR0FDdEIzQyxLQUFLNEMsSUFBTSxHQUVQRCxhQUFtQkQsRUFDckJDLEVBQVFFLFNBQVEsU0FBU1gsRUFBT04sR0FDOUI1QixLQUFLOEMsT0FBT2xCLEVBQU1NLEtBQ2pCbEMsTUFDTStDLE1BQU1DLFFBQVFMLEdBQ3ZCQSxFQUFRRSxTQUFRLFNBQVNJLEdBQ3ZCakQsS0FBSzhDLE9BQU9HLEVBQU8sR0FBSUEsRUFBTyxNQUM3QmpELE1BQ00yQyxHQUNUdEMsT0FBTzZDLG9CQUFvQlAsR0FBU0UsU0FBUSxTQUFTakIsR0FDbkQ1QixLQUFLOEMsT0FBT2xCLEVBQU1lLEVBQVFmLE1BQ3pCNUIsTUFnRVAsU0FBU21ELEVBQVNDLEdBQ2hCLEdBQUlBLEVBQUtDLFNBQ1AsT0FBT0MsUUFBUUMsT0FBTyxJQUFJeEIsVUFBVSxpQkFFdENxQixFQUFLQyxVQUFXLEVBR2xCLFNBQVNHLEVBQWdCQyxHQUN2QixPQUFPLElBQUlILFNBQVEsU0FBU0ksRUFBU0gsR0FDbkNFLEVBQU9FLE9BQVMsV0FDZEQsRUFBUUQsRUFBT0csU0FFakJILEVBQU9JLFFBQVUsV0FDZk4sRUFBT0UsRUFBT0ssV0FLcEIsU0FBU0MsRUFBc0JDLEdBQzdCLElBQUlQLEVBQVMsSUFBSVEsV0FDYkMsRUFBVVYsRUFBZ0JDLEdBRTlCLE9BREFBLEVBQU9VLGtCQUFrQkgsR0FDbEJFLEVBb0JULFNBQVNFLEVBQVlDLEdBQ25CLEdBQUlBLEVBQUlDLE1BQ04sT0FBT0QsRUFBSUMsTUFBTSxHQUVqQixJQUFJQyxFQUFPLElBQUlDLFdBQVdILEVBQUlJLFlBRTlCLE9BREFGLEVBQUtHLElBQUksSUFBSUYsV0FBV0gsSUFDakJFLEVBQUtJLE9BSWhCLFNBQVNDLElBa0hQLE9BakhBNUUsS0FBS3FELFVBQVcsRUFFaEJyRCxLQUFLNkUsVUFBWSxTQUFTekIsR0FoTTVCLElBQW9CM0MsRUEyTWhCVCxLQUFLcUQsU0FBV3JELEtBQUtxRCxTQUNyQnJELEtBQUs4RSxVQUFZMUIsRUFDWkEsRUFFc0IsaUJBQVRBLEVBQ2hCcEQsS0FBSytFLFVBQVkzQixFQUNSbkMsR0FBZ0JFLEtBQUtSLFVBQVVxRSxjQUFjNUIsR0FDdERwRCxLQUFLaUYsVUFBWTdCLEVBQ1JuQyxHQUFvQmlFLFNBQVN2RSxVQUFVcUUsY0FBYzVCLEdBQzlEcEQsS0FBS21GLGNBQWdCL0IsRUFDWm5DLEdBQXdCbUUsZ0JBQWdCekUsVUFBVXFFLGNBQWM1QixHQUN6RXBELEtBQUsrRSxVQUFZM0IsRUFBSzFCLFdBQ2JULEdBQXVCQSxJQXZObEJSLEVBdU42QzJDLElBdE5qRGlDLFNBQVMxRSxVQUFVcUUsY0FBY3ZFLElBdU4zQ1QsS0FBS3NGLGlCQUFtQmxCLEVBQVloQixFQUFLdUIsUUFFekMzRSxLQUFLOEUsVUFBWSxJQUFJM0QsS0FBSyxDQUFDbkIsS0FBS3NGLG9CQUN2QnJFLElBQXdCTSxZQUFZWixVQUFVcUUsY0FBYzVCLElBQVM5QixFQUFrQjhCLElBQ2hHcEQsS0FBS3NGLGlCQUFtQmxCLEVBQVloQixHQUVwQ3BELEtBQUsrRSxVQUFZM0IsRUFBTy9DLE9BQU9NLFVBQVVlLFNBQVNiLEtBQUt1QyxHQWhCdkRwRCxLQUFLK0UsVUFBWSxHQW1CZC9FLEtBQUsyQyxRQUFRbkMsSUFBSSxrQkFDQSxpQkFBVDRDLEVBQ1RwRCxLQUFLMkMsUUFBUStCLElBQUksZUFBZ0IsNEJBQ3hCMUUsS0FBS2lGLFdBQWFqRixLQUFLaUYsVUFBVU0sS0FDMUN2RixLQUFLMkMsUUFBUStCLElBQUksZUFBZ0IxRSxLQUFLaUYsVUFBVU0sTUFDdkN0RSxHQUF3Qm1FLGdCQUFnQnpFLFVBQVVxRSxjQUFjNUIsSUFDekVwRCxLQUFLMkMsUUFBUStCLElBQUksZUFBZ0IscURBS25DekQsSUFDRmpCLEtBQUtnRSxLQUFPLFdBQ1YsSUFBSXdCLEVBQVdyQyxFQUFTbkQsTUFDeEIsR0FBSXdGLEVBQ0YsT0FBT0EsRUFHVCxHQUFJeEYsS0FBS2lGLFVBQ1AsT0FBTzNCLFFBQVFJLFFBQVExRCxLQUFLaUYsV0FDdkIsR0FBSWpGLEtBQUtzRixpQkFDZCxPQUFPaEMsUUFBUUksUUFBUSxJQUFJdkMsS0FBSyxDQUFDbkIsS0FBS3NGLG9CQUNqQyxHQUFJdEYsS0FBS21GLGNBQ2QsTUFBTSxJQUFJTSxNQUFNLHdDQUVoQixPQUFPbkMsUUFBUUksUUFBUSxJQUFJdkMsS0FBSyxDQUFDbkIsS0FBSytFLGNBSTFDL0UsS0FBSzBGLFlBQWMsV0FDakIsT0FBSTFGLEtBQUtzRixpQkFDVW5DLEVBQVNuRCxRQUl0QnVCLFlBQVlDLE9BQU94QixLQUFLc0Ysa0JBQ25CaEMsUUFBUUksUUFDYjFELEtBQUtzRixpQkFBaUJYLE9BQU9MLE1BQzNCdEUsS0FBS3NGLGlCQUFpQkssV0FDdEIzRixLQUFLc0YsaUJBQWlCSyxXQUFhM0YsS0FBS3NGLGlCQUFpQmIsYUFJdERuQixRQUFRSSxRQUFRMUQsS0FBS3NGLG1CQUd2QnRGLEtBQUtnRSxPQUFPNEIsS0FBSzdCLEtBSzlCL0QsS0FBSzZGLEtBQU8sV0FDVixJQW5Ib0I3QixFQUNsQlAsRUFDQVMsRUFpSEVzQixFQUFXckMsRUFBU25ELE1BQ3hCLEdBQUl3RixFQUNGLE9BQU9BLEVBR1QsR0FBSXhGLEtBQUtpRixVQUNQLE9BekhrQmpCLEVBeUhJaEUsS0FBS2lGLFVBdkgzQmYsRUFBVVYsRUFEVkMsRUFBUyxJQUFJUSxZQUVqQlIsRUFBT3FDLFdBQVc5QixHQUNYRSxFQXNIRSxHQUFJbEUsS0FBS3NGLGlCQUNkLE9BQU9oQyxRQUFRSSxRQXBIckIsU0FBK0JXLEdBSTdCLElBSEEsSUFBSUUsRUFBTyxJQUFJQyxXQUFXSCxHQUN0QjBCLEVBQVEsSUFBSWhELE1BQU13QixFQUFLeUIsUUFFbEJDLEVBQUksRUFBR0EsRUFBSTFCLEVBQUt5QixPQUFRQyxJQUMvQkYsRUFBTUUsR0FBS3BFLE9BQU9xRSxhQUFhM0IsRUFBSzBCLElBRXRDLE9BQU9GLEVBQU1JLEtBQUssSUE2R1NDLENBQXNCcEcsS0FBS3NGLG1CQUM3QyxHQUFJdEYsS0FBS21GLGNBQ2QsTUFBTSxJQUFJTSxNQUFNLHdDQUVoQixPQUFPbkMsUUFBUUksUUFBUTFELEtBQUsrRSxZQUk1QjlELElBQ0ZqQixLQUFLcUcsU0FBVyxXQUNkLE9BQU9yRyxLQUFLNkYsT0FBT0QsS0FBS1UsS0FJNUJ0RyxLQUFLdUcsS0FBTyxXQUNWLE9BQU92RyxLQUFLNkYsT0FBT0QsS0FBS1ksS0FBS0MsUUFHeEJ6RyxLQWxPVDBDLEVBQVEvQixVQUFVbUMsT0FBUyxTQUFTbEIsRUFBTU0sR0FDeENOLEVBQU9ELEVBQWNDLEdBQ3JCTSxFQUFRRCxFQUFlQyxHQUN2QixJQUFJd0UsRUFBVzFHLEtBQUs0QyxJQUFJaEIsR0FDeEI1QixLQUFLNEMsSUFBSWhCLEdBQVE4RSxFQUFXQSxFQUFXLEtBQU94RSxFQUFRQSxHQUd4RFEsRUFBUS9CLFVBQWtCLE9BQUksU0FBU2lCLFVBQzlCNUIsS0FBSzRDLElBQUlqQixFQUFjQyxLQUdoQ2MsRUFBUS9CLFVBQVVILElBQU0sU0FBU29CLEdBRS9CLE9BREFBLEVBQU9ELEVBQWNDLEdBQ2Q1QixLQUFLMkcsSUFBSS9FLEdBQVE1QixLQUFLNEMsSUFBSWhCLEdBQVEsTUFHM0NjLEVBQVEvQixVQUFVZ0csSUFBTSxTQUFTL0UsR0FDL0IsT0FBTzVCLEtBQUs0QyxJQUFJaEMsZUFBZWUsRUFBY0MsS0FHL0NjLEVBQVEvQixVQUFVK0QsSUFBTSxTQUFTOUMsRUFBTU0sR0FDckNsQyxLQUFLNEMsSUFBSWpCLEVBQWNDLElBQVNLLEVBQWVDLElBR2pEUSxFQUFRL0IsVUFBVWtDLFFBQVUsU0FBUytELEVBQVVDLEdBQzdDLElBQUssSUFBSWpGLEtBQVE1QixLQUFLNEMsSUFDaEI1QyxLQUFLNEMsSUFBSWhDLGVBQWVnQixJQUMxQmdGLEVBQVMvRixLQUFLZ0csRUFBUzdHLEtBQUs0QyxJQUFJaEIsR0FBT0EsRUFBTTVCLE9BS25EMEMsRUFBUS9CLFVBQVVtRyxLQUFPLFdBQ3ZCLElBQUkxRSxFQUFRLEdBSVosT0FIQXBDLEtBQUs2QyxTQUFRLFNBQVNYLEVBQU9OLEdBQzNCUSxFQUFNMkUsS0FBS25GLE1BRU5PLEVBQVlDLElBR3JCTSxFQUFRL0IsVUFBVXFHLE9BQVMsV0FDekIsSUFBSTVFLEVBQVEsR0FJWixPQUhBcEMsS0FBSzZDLFNBQVEsU0FBU1gsR0FDcEJFLEVBQU0yRSxLQUFLN0UsTUFFTkMsRUFBWUMsSUFHckJNLEVBQVEvQixVQUFVc0csUUFBVSxXQUMxQixJQUFJN0UsRUFBUSxHQUlaLE9BSEFwQyxLQUFLNkMsU0FBUSxTQUFTWCxFQUFPTixHQUMzQlEsRUFBTTJFLEtBQUssQ0FBQ25GLEVBQU1NLE9BRWJDLEVBQVlDLElBR2pCbkIsSUFDRnlCLEVBQVEvQixVQUFVTyxPQUFPbUIsVUFBWUssRUFBUS9CLFVBQVVzRyxTQTZLekQsSUFBSUMsRUFBVSxDQUFDLFNBQVUsTUFBTyxPQUFRLFVBQVcsT0FBUSxPQU9wRCxTQUFTQyxFQUFRQyxFQUFPQyxHQUM3QixLQUFNckgsZ0JBQWdCbUgsR0FDcEIsTUFBTSxJQUFJcEYsVUFBVSw4RkFJdEIsSUFYdUJ1RixFQUNuQkMsRUFVQW5FLEdBREppRSxFQUFVQSxHQUFXLElBQ0ZqRSxLQUVuQixHQUFJZ0UsYUFBaUJELEVBQVMsQ0FDNUIsR0FBSUMsRUFBTS9ELFNBQ1IsTUFBTSxJQUFJdEIsVUFBVSxnQkFFdEIvQixLQUFLd0gsSUFBTUosRUFBTUksSUFDakJ4SCxLQUFLeUgsWUFBY0wsRUFBTUssWUFDcEJKLEVBQVExRSxVQUNYM0MsS0FBSzJDLFFBQVUsSUFBSUQsRUFBUTBFLEVBQU16RSxVQUVuQzNDLEtBQUtzSCxPQUFTRixFQUFNRSxPQUNwQnRILEtBQUswSCxLQUFPTixFQUFNTSxLQUNsQjFILEtBQUsySCxPQUFTUCxFQUFNTyxPQUNmdkUsR0FBMkIsTUFBbkJnRSxFQUFNdEMsWUFDakIxQixFQUFPZ0UsRUFBTXRDLFVBQ2JzQyxFQUFNL0QsVUFBVyxRQUduQnJELEtBQUt3SCxJQUFNM0YsT0FBT3VGLEdBWXBCLEdBVEFwSCxLQUFLeUgsWUFBY0osRUFBUUksYUFBZXpILEtBQUt5SCxhQUFlLGVBQzFESixFQUFRMUUsU0FBWTNDLEtBQUsyQyxVQUMzQjNDLEtBQUsyQyxRQUFVLElBQUlELEVBQVEyRSxFQUFRMUUsVUFFckMzQyxLQUFLc0gsUUFwQ0RDLEdBRG1CRCxFQXFDT0QsRUFBUUMsUUFBVXRILEtBQUtzSCxRQUFVLE9BcEMxQ00sY0FDZFYsRUFBUXpGLFFBQVE4RixJQUFZLEVBQUlBLEVBQVVELEdBb0NqRHRILEtBQUswSCxLQUFPTCxFQUFRSyxNQUFRMUgsS0FBSzBILE1BQVEsS0FDekMxSCxLQUFLMkgsT0FBU04sRUFBUU0sUUFBVTNILEtBQUsySCxPQUNyQzNILEtBQUs2SCxTQUFXLE1BRUssUUFBaEI3SCxLQUFLc0gsUUFBb0MsU0FBaEJ0SCxLQUFLc0gsU0FBc0JsRSxFQUN2RCxNQUFNLElBQUlyQixVQUFVLDZDQUl0QixHQUZBL0IsS0FBSzZFLFVBQVV6QixLQUVLLFFBQWhCcEQsS0FBS3NILFFBQW9DLFNBQWhCdEgsS0FBS3NILFFBQ1YsYUFBbEJELEVBQVFTLE9BQTBDLGFBQWxCVCxFQUFRUyxPQUFzQixDQUVoRSxJQUFJQyxFQUFnQixnQkFDaEJBLEVBQWNqRyxLQUFLOUIsS0FBS3dILEtBRTFCeEgsS0FBS3dILElBQU14SCxLQUFLd0gsSUFBSVEsUUFBUUQsRUFBZSxRQUFTLElBQUlFLE1BQU9DLFdBSS9EbEksS0FBS3dILE1BRGUsS0FDTzFGLEtBQUs5QixLQUFLd0gsS0FBTyxJQUFNLEtBQU8sTUFBTyxJQUFJUyxNQUFPQyxXQVVuRixTQUFTNUIsRUFBT2xELEdBQ2QsSUFBSStFLEVBQU8sSUFBSWpELFNBWWYsT0FYQTlCLEVBQ0dnRixPQUNBQyxNQUFNLEtBQ054RixTQUFRLFNBQVN5RixHQUNoQixHQUFJQSxFQUFPLENBQ1QsSUFBSUQsRUFBUUMsRUFBTUQsTUFBTSxLQUNwQnpHLEVBQU95RyxFQUFNOUYsUUFBUXlGLFFBQVEsTUFBTyxLQUNwQzlGLEVBQVFtRyxFQUFNbEMsS0FBSyxLQUFLNkIsUUFBUSxNQUFPLEtBQzNDRyxFQUFLckYsT0FBT3lGLG1CQUFtQjNHLEdBQU8yRyxtQkFBbUJyRyxRQUd4RGlHLEVBNkJGLFNBQVNLLEVBQVNDLEVBQVVwQixHQUNqQyxLQUFNckgsZ0JBQWdCd0ksR0FDcEIsTUFBTSxJQUFJekcsVUFBVSw4RkFFakJzRixJQUNIQSxFQUFVLElBR1pySCxLQUFLdUYsS0FBTyxVQUNadkYsS0FBSzBJLFlBQTRCakcsSUFBbkI0RSxFQUFRcUIsT0FBdUIsSUFBTXJCLEVBQVFxQixPQUMzRDFJLEtBQUsySSxHQUFLM0ksS0FBSzBJLFFBQVUsS0FBTzFJLEtBQUswSSxPQUFTLElBQzlDMUksS0FBSzRJLGdCQUFvQ25HLElBQXZCNEUsRUFBUXVCLFdBQTJCLEdBQUssR0FBS3ZCLEVBQVF1QixXQUN2RTVJLEtBQUsyQyxRQUFVLElBQUlELEVBQVEyRSxFQUFRMUUsU0FDbkMzQyxLQUFLd0gsSUFBTUgsRUFBUUcsS0FBTyxHQUMxQnhILEtBQUs2RSxVQUFVNEQsR0E1RGpCdEIsRUFBUXhHLFVBQVVrSSxNQUFRLFdBQ3hCLE9BQU8sSUFBSTFCLEVBQVFuSCxLQUFNLENBQUNvRCxLQUFNcEQsS0FBSzhFLGFBMkN2Q0YsRUFBSy9ELEtBQUtzRyxFQUFReEcsV0FtQmxCaUUsRUFBSy9ELEtBQUsySCxFQUFTN0gsV0FFbkI2SCxFQUFTN0gsVUFBVWtJLE1BQVEsV0FDekIsT0FBTyxJQUFJTCxFQUFTeEksS0FBSzhFLFVBQVcsQ0FDbEM0RCxPQUFRMUksS0FBSzBJLE9BQ2JFLFdBQVk1SSxLQUFLNEksV0FDakJqRyxRQUFTLElBQUlELEVBQVExQyxLQUFLMkMsU0FDMUI2RSxJQUFLeEgsS0FBS3dILE9BSWRnQixFQUFTMUUsTUFBUSxXQUNmLElBQUlnRixFQUFXLElBQUlOLEVBQVMsS0FBTSxDQUFDRSxPQUFRLEVBQUdFLFdBQVksS0FFMUQsT0FEQUUsRUFBU3ZELEtBQU8sUUFDVHVELEdBR1QsSUFBSUMsRUFBbUIsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLEtBRTVDUCxFQUFTUSxTQUFXLFNBQVN4QixFQUFLa0IsR0FDaEMsSUFBMEMsSUFBdENLLEVBQWlCdEgsUUFBUWlILEdBQzNCLE1BQU0sSUFBSU8sV0FBVyx1QkFHdkIsT0FBTyxJQUFJVCxFQUFTLEtBQU0sQ0FBQ0UsT0FBUUEsRUFBUS9GLFFBQVMsQ0FBQ3VHLFNBQVUxQixNQUcxRCxJQUFJMkIsRUFBZXJJLEVBQU9xSSxhQUNqQyxJQUNFLElBQUlBLEVBQ0osTUFBT0MsSUFDUEQsRUFBZSxTQUFTRSxFQUFTekgsR0FDL0I1QixLQUFLcUosUUFBVUEsRUFDZnJKLEtBQUs0QixLQUFPQSxFQUNaLElBQUlrQyxFQUFRMkIsTUFBTTRELEdBQ2xCckosS0FBS3NKLE1BQVF4RixFQUFNd0YsUUFFUjNJLFVBQVlOLE9BQU9rSixPQUFPOUQsTUFBTTlFLFdBQzdDd0ksRUFBYXhJLFVBQVU2SSxZQUFjTCxFQUdoQyxTQUFTLEVBQU0vQixFQUFPcUMsR0FDM0IsT0FBTyxJQUFJbkcsU0FBUSxTQUFTSSxFQUFTSCxHQUNuQyxJQUFJbUcsRUFBVSxJQUFJdkMsRUFBUUMsRUFBT3FDLEdBRWpDLEdBQUlDLEVBQVEvQixRQUFVK0IsRUFBUS9CLE9BQU9nQyxRQUNuQyxPQUFPcEcsRUFBTyxJQUFJNEYsRUFBYSxVQUFXLGVBRzVDLElBQUlTLEVBQU0sSUFBSUMsZUFFZCxTQUFTQyxJQUNQRixFQUFJRyxRQUdOSCxFQUFJakcsT0FBUyxXQUNYLElBbkdnQnFHLEVBQ2hCckgsRUFrR0kwRSxFQUFVLENBQ1pxQixPQUFRa0IsRUFBSWxCLE9BQ1pFLFdBQVlnQixFQUFJaEIsV0FDaEJqRyxTQXRHY3FILEVBc0dRSixFQUFJSyx5QkFBMkIsR0FyR3ZEdEgsRUFBVSxJQUFJRCxFQUdRc0gsRUFBV2hDLFFBQVEsZUFBZ0IsS0FLMURLLE1BQU0sTUFDTnpGLEtBQUksU0FBU0ssR0FDWixPQUFnQyxJQUF6QkEsRUFBT3hCLFFBQVEsTUFBY3dCLEVBQU9pSCxPQUFPLEVBQUdqSCxFQUFPK0MsUUFBVS9DLEtBRXZFSixTQUFRLFNBQVNzSCxHQUNoQixJQUFJQyxFQUFRRCxFQUFLOUIsTUFBTSxLQUNuQmxJLEVBQU1pSyxFQUFNN0gsUUFBUTZGLE9BQ3hCLEdBQUlqSSxFQUFLLENBQ1AsSUFBSStCLEVBQVFrSSxFQUFNakUsS0FBSyxLQUFLaUMsT0FDNUJ6RixFQUFRRyxPQUFPM0MsRUFBSytCLE9BR25CUyxJQW1GSDBFLEVBQVFHLElBQU0sZ0JBQWlCb0MsRUFBTUEsRUFBSVMsWUFBY2hELEVBQVExRSxRQUFRbkMsSUFBSSxpQkFDM0UsSUFBSTRDLEVBQU8sYUFBY3dHLEVBQU1BLEVBQUlkLFNBQVdjLEVBQUlVLGFBQ2xEQyxZQUFXLFdBQ1Q3RyxFQUFRLElBQUk4RSxFQUFTcEYsRUFBTWlFLE1BQzFCLElBR0x1QyxFQUFJL0YsUUFBVSxXQUNaMEcsWUFBVyxXQUNUaEgsRUFBTyxJQUFJeEIsVUFBVSw2QkFDcEIsSUFHTDZILEVBQUlZLFVBQVksV0FDZEQsWUFBVyxXQUNUaEgsRUFBTyxJQUFJeEIsVUFBVSw2QkFDcEIsSUFHTDZILEVBQUlhLFFBQVUsV0FDWkYsWUFBVyxXQUNUaEgsRUFBTyxJQUFJNEYsRUFBYSxVQUFXLGlCQUNsQyxJQVdMUyxFQUFJYyxLQUFLaEIsRUFBUXBDLE9BUmpCLFNBQWdCRSxHQUNkLElBQ0UsTUFBZSxLQUFSQSxHQUFjMUcsRUFBT29JLFNBQVN5QixLQUFPN0osRUFBT29JLFNBQVN5QixLQUFPbkQsRUFDbkUsTUFBT3BHLEdBQ1AsT0FBT29HLEdBSWNvRCxDQUFPbEIsRUFBUWxDLE1BQU0sR0FFbEIsWUFBeEJrQyxFQUFRakMsWUFDVm1DLEVBQUlpQixpQkFBa0IsRUFDVyxTQUF4Qm5CLEVBQVFqQyxjQUNqQm1DLEVBQUlpQixpQkFBa0IsR0FHcEIsaUJBQWtCakIsSUFDaEIzSSxFQUNGMkksRUFBSWtCLGFBQWUsT0FFbkI3SixHQUNBeUksRUFBUS9HLFFBQVFuQyxJQUFJLGtCQUN5RCxJQUE3RWtKLEVBQVEvRyxRQUFRbkMsSUFBSSxnQkFBZ0JpQixRQUFRLDhCQUU1Q21JLEVBQUlrQixhQUFlLGlCQUluQnJCLEdBQWdDLGlCQUFqQkEsRUFBSzlHLFNBQTBCOEcsRUFBSzlHLG1CQUFtQkQsRUFLeEVnSCxFQUFRL0csUUFBUUUsU0FBUSxTQUFTWCxFQUFPTixHQUN0Q2dJLEVBQUltQixpQkFBaUJuSixFQUFNTSxNQUw3QjdCLE9BQU82QyxvQkFBb0J1RyxFQUFLOUcsU0FBU0UsU0FBUSxTQUFTakIsR0FDeERnSSxFQUFJbUIsaUJBQWlCbkosRUFBTUssRUFBZXdILEVBQUs5RyxRQUFRZixRQVF2RDhILEVBQVEvQixTQUNWK0IsRUFBUS9CLE9BQU9xRCxpQkFBaUIsUUFBU2xCLEdBRXpDRixFQUFJcUIsbUJBQXFCLFdBRUEsSUFBbkJyQixFQUFJc0IsWUFDTnhCLEVBQVEvQixPQUFPd0Qsb0JBQW9CLFFBQVNyQixLQUtsREYsRUFBSXdCLFVBQWtDLElBQXRCMUIsRUFBUTVFLFVBQTRCLEtBQU80RSxFQUFRNUUsYyxta0NBSXZFLEVBQU11RyxVQUFXLEVBRVp2SyxFQUFPd0ssUUFDVnhLLEVBQU93SyxNQUFRLEVBQ2Z4SyxFQUFPNEIsUUFBVUEsRUFDakI1QixFQUFPcUcsUUFBVUEsRUFDakJyRyxFQUFPMEgsU0FBV0EsRyxJQ25sQkMrQyxFQUFBQSxXQTBCbkIsY0FRZSxXQVBEN0wsRUFPQyxFQVBEQSxLQUNBOEwsRUFNQyxFQU5EQSxXQUNBQyxFQUtDLEVBTERBLGVBQ0FDLEVBSUMsRUFKREEsU0FDQUMsRUFHQyxFQUhEQSxNQUNBQyxFQUVDLEVBRkRBLFNBRUMsSUFEREMsWUFBQUEsT0FDQyxTQUNiLEcsNEZBRGEsbUNBakNJLE1BaUNKLHFCQWhDRCxNQWdDQyxlQS9CUCxNQStCTyxrQkE5QkosQ0FDVEMsWUFBWSxFQUNaQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsUUFBUSxJQTBCSyxzQkF4QkQsR0F3QkMsdUJBcUNDLE1BckNELGdCQXVsQk4sQ0FLUCxlQUFnQixTQUFBQyxHQUNkLElBQU1DLEVBQVksRUFBS0MsWUFBWUMsY0FBYyxzQkFFakRGLEVBQVVuQixpQkFBaUIsU0FBVSxFQUFLc0IsT0FBTyx1QkFDakRILEVBQVVJLFNBTVoscUJBQXNCLFNBQUFMLEdBQ3BCLElBQU1NLEVBQU9OLEVBQU1PLE9BQU9DLE1BQU0sR0FDMUJqSixFQUFTLElBQUlRLFdBRW5CUixFQUFPa0osY0FBY0gsR0FFckIvSSxFQUFPRSxPQUFTLFdBQ2QsRUFBS2lKLFNBQVNuSixFQUFPRyxRQUFRZ0MsTUFDM0IsU0FBQWtELEdBQ0UsR0FBSUEsRUFBU0gsR0FDWCxFQUFLa0UsWUFDQSxHQUF3QixNQUFwQi9ELEVBQVNKLE9BQ2xCLE9BQU9JLEVBQVN2QyxVQUdwQixTQUFBekMsR0FDRSxFQUFLZ0osWUFBWSxDQUNmekQsUUFBU3ZGLFFBTWpCTCxFQUFPSSxRQUFVLFdBQ2YsRUFBS2lKLFlBQVksQ0FDZnpELFFBQVM1RixFQUFPSyxNQUNoQmlKLHFCQUFzQixxQ0FBRixPQUF1Q3RKLEVBQU9LLFdBUXhFLGVBQWdCLFNBQUFvSSxHQUNkLElBQ09jLEVBRGNkLEVBQU1PLE9BQU9RLFFBQVEsYUFDWEMsUUFBeEJGLFFBRURBLEdBQ0osRUFBS0csYUFBYUgsR0FBU3BILE1BQ3pCLFNBQUFrRCxHQUNFLEdBQUlBLEVBQVNILEdBQ1gsRUFBS2tFLFlBQ0EsR0FBd0IsTUFBcEIvRCxFQUFTSixPQUNsQixPQUFPSSxFQUFTdkMsVUFHcEIsU0FBQXpDLEdBQ0UsRUFBS2dKLFlBQVksQ0FDZnpELFFBQVN2RixRQVVuQixlQUFnQixTQUFBb0ksR0FDZCxJQUFNa0IsRUFBZWxCLEVBQU1PLE9BQU9RLFFBQVEsYUFDbkNELEVBQVdJLEVBQWFGLFFBQXhCRixRQUNESyxFQUFVRCxFQUFhRSxpQkFBaUIsVUFFeENOLElBQ0pLLEVBQVF4SyxTQUFRLFNBQUEwSyxHQUFNLE9BQUlBLEVBQU9DLGFBQWEsV0FBWSxlQUUxRCxFQUFLQyxnQkFBZ0JULEdBQVNwSCxNQUM1QixTQUFBa0QsR0FDRSxHQUFJQSxFQUFTSCxHQUNYLEVBQUtrRSxZQUNBLEdBQXdCLE1BQXBCL0QsRUFBU0osT0FDbEIsT0FBT0ksRUFBU3ZDLFVBR3BCLFNBQUF6QyxHQUNFLEVBQUtnSixZQUFZLENBQ2Z6RCxRQUFTdkYsWUFsckJkcEUsRUFDSCxNQUFNLElBQUkrRixNQUFNLGdEQUdsQixJQUFNMkcsRUFBY3NCLFNBQVNDLGVBQWVqTyxHQUU1QyxJQUFNME0sRUFHSixNQUFNLElBQUkzRyxNQUFNLDBEQUdsQixHQUxFekYsS0FBS29NLFlBQWNBLEdBS2hCWixJQUFlQyxJQUFtQkMsRUFDckMsTUFBTSxJQUFJakcsTUFBTSwrQ0FHbEJ6RixLQUFLNE4sU0FBVyxDQUNkQyxHQUFJLEtBQ0puQyxTQUFVLEtBQ1ZELGVBQWdCLE1BR2xCekwsS0FBS3dMLFdBQWFBLEVBQ2xCeEwsS0FBS3lMLGVBQWlCQSxFQUN0QnpMLEtBQUswTCxTQUFXQSxFQUNoQjFMLEtBQUsyTCxNQUFRQSxFQUNiM0wsS0FBSzRMLFNBQVdBLEVBQ2hCNUwsS0FBSzZMLFlBQWNBLEVBRW5CN0wsS0FBSzZNLE8sK0NBWVAsV0FDRSxPQUFPN00sS0FBSzhOLGUsSUFPZCxTQUFrQkEsR0FDWkEsSUFDRjlOLEtBQUs4TixjQUFnQkEsSyxvQkFTekIsWUFBNEIsSUFBcEJ0QyxFQUFvQixFQUFwQkEsV0FBWUcsRUFBUSxFQUFSQSxNQUNsQjNMLEtBQUt3TCxXQUFhQSxFQUNsQnhMLEtBQUsyTCxNQUFRQSxFQUViM0wsS0FBSzZNLFMsc0JBT1AsV0FDRSxPQUFPN00sS0FBSzROLFNBQVNDLEksSUFPdkIsU0FBZXJDLEdBQ1RBLElBQ0Z4TCxLQUFLNE4sU0FBU0MsR0FBS3JDLEssMEJBUXZCLFdBQ0UsT0FBT3hMLEtBQUs0TixTQUFTbkMsZ0IsSUFPdkIsU0FBbUJBLEdBQ2JBLElBQ0Z6TCxLQUFLNE4sU0FBU25DLGVBQWlCQSxLLG9CQVFuQyxXQUNFLE9BQU96TCxLQUFLNE4sU0FBU2xDLFUsSUFPdkIsU0FBYUEsR0FDUEEsSUFDRjFMLEtBQUs0TixTQUFTbEMsU0FBV0EsSyx1QkFRN0IsV0FDRSxPQUFPMUwsS0FBS29NLGMsaUJBT2QsV0FDRSxPQUFPcE0sS0FBSzJMLE8sSUFPZCxTQUFVQSxHQUNKQSxJQUNGM0wsS0FBSzJMLE1BQVFBLEssb0JBUWpCLFdBQ0UsT0FBTzNMLEtBQUs0TCxVLElBT2QsU0FBYTFKLEdBQ1hsQyxLQUFLNEwsU0FBTCxPQUNLNUwsS0FBSzRMLFVBQ0wxSixLLHVCQVFQLFdBQ0UsT0FBT2xDLEtBQUs2TCxhLElBT2QsU0FBZ0IzSixHQUNkbEMsS0FBSzZMLFlBQWMzSixJLHlCQVFyQixTQUFZNkwsR0FDVixJQUFPMUUsRUFBaUMwRSxFQUFqQzFFLFFBQVMwRCxFQUF3QmdCLEVBQXhCaEIscUJBRWhCLEdBQUkvTSxLQUFLOE4sY0FBZSxDQUN0QixJQUFJRSxFQUFnQixHQUVHLFdBQW5CLEVBQU8zRSxLQUNMQSxFQUFRNEUsWUFDVkQsRUFBZ0IzRSxFQUFRNEUsWUFFeEI1TixPQUFPeUcsS0FBS3VDLEdBQ1Q2RSxVQUNBckwsU0FBUSxTQUFBMUMsR0FDUDZOLEdBQWlCLEdBQUosT0FBTzNFLEVBQVFsSixHQUFmLGFBS3JCLElBQU1nTyxFQUFlSCxFQUFjaEksT0FDL0JnSSxFQUNBeEgsS0FBSzRILFVBQVUvRSxHQUVuQnJKLEtBQUs4TixjQUFjSyxFQUFjLGNBQzVCLElBQUlwQixFQUNULE1BQU0sSUFBSXRILE1BQU1zSCxHQUVoQnNCLFFBQVFDLElBQUlqRixNLHFCQVVoQixZQUFvQyxJQUEzQmtGLEVBQTJCLEVBQTNCQSxZQUFhQyxFQUFjLEVBQWRBLFlBQ2RDLEVBQWtCLENBQ3RCbkgsT0FBUSxPQUNSSSxLQUFNLGNBQ05ELFlBQWEsY0FDYjlFLFFBQVMsQ0FDUCxlQUFnQixtQkFDaEIsY0FBZTNDLEtBQUsyTCxPQUV0QnZJLEtBQU1vRCxLQUFLNEgsVUFBVUksSUFHdkIsT0FBT2xELE1BQU0sa0JBQUQsT0FBbUJpRCxFQUFuQixLQUFtQ0UsSyx1QkFPakQsV0FDRSxJQUFNYixFQUFXLEdBVWpCLE9BUkk1TixLQUFLd0wsYUFBZXhMLEtBQUt5TCxlQUMzQm1DLEVBQVNwQyxXQUFheEwsS0FBS3dMLFdBQ2xCeEwsS0FBS3lMLGVBQ2RtQyxFQUFTYyxpQkFBbUIxTyxLQUFLeUwsZUFDeEJ6TCxLQUFLMEwsV0FDZGtDLEVBQVNsQyxTQUFXMUwsS0FBSzBMLFVBR3BCMUwsS0FBSzBKLFFBQVEsQ0FDbEI2RSxZQUFhLGFBQ2JDLFlBQWEsRUFBRixLQUNOWixHQURNLElBRVQvQixZQUFhN0wsS0FBSzZMLGtCLHNCQVV4QixTQUFTOEMsR0FHUCxPQUZBM08sS0FBSzRPLHFCQUFxQixlQUVuQjVPLEtBQUswSixRQUFRLENBQ2xCNkUsWUFBYSxZQUNiQyxZQUFhLENBQ1hoRCxXQUFZeEwsS0FBS3dMLFdBQ2pCbUQsTUFBQUEsTyx5QkFVTixTQUFZM0IsR0FHVixPQUZBaE4sS0FBSzRPLHFCQUFxQiwwQkFFbkI1TyxLQUFLMEosUUFBUSxDQUNsQjZFLFlBQWEsZUFDYkMsWUFBYSxDQUNYSyxTQUFVN0IsTyx5QkFVaEIsU0FBWUEsR0FHVixPQUZBaE4sS0FBSzRPLHFCQUFxQiw0QkFFbkI1TyxLQUFLMEosUUFBUSxDQUNsQjZFLFlBQWEsZUFDYkMsWUFBYSxDQUNYaEQsV0FBWXhMLEtBQUt3TCxXQUNqQnFELFNBQVU3QixPLDRCQVVoQixTQUFlQSxHQUdiLE9BRkFoTixLQUFLNE8scUJBQXFCLHFDQUVuQjVPLEtBQUswSixRQUFRLENBQ2xCNkUsWUFBYSxpQkFDYkMsWUFBYSxDQUNYaEQsV0FBWXhMLEtBQUt3TCxXQUNqQndCLFFBQVNBLE8sa0NBU2YsV0FBcUMsSUFBaEIzRCxFQUFnQix1REFBTixLQUN0QnlGLEVBQW9COU8sS0FBcEI4TyxpQkFFUCxJQUFLQSxFQUNILE1BQU0sSUFBSXJKLE1BQU0sdUNBR2Q0RCxHQUNGeUYsRUFBaUI1QixRQUFRN0QsUUFBVUEsRUFDbkN5RixFQUFpQkMsVUFBVUMsSUFBSSxtQ0FFL0JGLEVBQWlCQyxVQUFVOUMsT0FBTyxpQ0FDbEM2QyxFQUFpQjVCLFFBQVE3RCxRQUFVLE0sa0JBT3ZDLFdBQU8sV0FDQytDLEVBQWNwTSxLQUFLb00sWUFFekJBLEVBQVk2QyxVQUFaLGlaQVlBLElBQU1ILEVBQW1CcEIsU0FBU3JCLGNBQWMseUJBRWhEck0sS0FBSzhPLGlCQUFtQkEsRUFDeEI5TyxLQUFLNE8scUJBQXFCLGVBRTFCLElBQU1NLEVBQXFCOUMsRUFBWUMsY0FBYyxrQkFDL0M4QyxFQUFVL0MsRUFBWUMsY0FBYyxlQUNuQ0wsRUFBVWhNLEtBQUs0TCxTQUFmSSxPQUVQaE0sS0FBS29QLFlBQ0Z4SixNQUNDLFNBQUFrRCxHQWVFLEdBZEFvRyxFQUFtQkQsVUFBWSxFQUFLSSxtQkFBbUIsQ0FDckRDLE1BQU0sRUFDTkMsT0FBTyxFQUNQdkMsUUFBUyxPQUdQaEIsSUFDRm1ELEVBQVFGLFVBQVksRUFBS0ksbUJBQW1CLENBQzFDQyxNQUFNLEVBQ05DLE9BQU8sRUFDUHZDLFFBQVMsUUFJVGxFLEVBQVNILEdBQ1gsT0FBT0csRUFBU3ZDLE9BRWhCMkksRUFBbUJELFVBQVksRUFBS08sdUJBR3RDLEVBQUtDLGFBQ0wsRUFBS2IsMEJBRVAsU0FBQTlLLEdBQ0UsRUFBSzhLLHVCQUNMLEVBQUs5QixZQUFZLENBQ2Z6RCxRQUFTdkYsSUFFWCxFQUFLMkwsZ0JBR1I3SixNQUNDLFNBQUE4SixHQUNFLElBQUtBLElBQWlCQSxFQUFhMUosT0FLakMsT0FKQWtKLEVBQW1CRCxVQUFZLEVBQUtPLHVCQUNwQ0wsRUFBUVEsY0FBY1osVUFBVUMsSUFBSSxlQUNwQyxFQUFLSix1QkFLUCxJQUFNZ0IsRUFBZ0JGLEVBQWFHLE1BQUsscUJBQUVQLFFBQ3BDUSxFQUFvQkosRUFBYUssUUFBTyxxQkFBRVQsUUFVaEQsR0FSTU0sRUFDSlYsRUFBbUJELFVBQVksRUFBS0ksbUJBQ2xDTyxHQUdGVixFQUFtQlMsY0FBY1osVUFBVUMsSUFBSSxVQUc3Q2MsRUFBa0I5SixPQUFRLENBQzVCLElBQUlnSyxFQUFvQixHQUV4QkYsRUFBa0JqTixTQUNoQixTQUFBb04sR0FBUyxPQUNORCxHQUFxQixFQUFLWCxtQkFBbUJZLE1BRzlDakUsSUFDRmdFLEdBQXFCLEVBQUtYLG1CQUFtQixDQUMzQ0MsTUFBTSxFQUNOQyxPQUFPLEVBQ1B2QyxRQUFTLFFBSWJtQyxFQUFRRixVQUFZZSxPQUNWaEUsR0FDVm1ELEVBQVFRLGNBQWNaLFVBQVVDLElBQUksVUFHdEMsRUFBS1MsYUFDTCxFQUFLYiwwQkFFUCxTQUFBOUssR0FDRSxFQUFLZ0osWUFBWSxDQUNmekQsUUFBU3ZGLElBRVgsRUFBSzhLLHVCQUNMLEVBQUthLGdCQUdSUyxPQUFNLFNBQUFwTSxHQUNMLEVBQUs4Syx1QkFDTCxFQUFLOUIsWUFBWSxDQUNmekQsUUFBU3ZGLElBRVgsRUFBSzJMLGdCQUdUelAsS0FBS3lQLGUsZ0NBWVAsU0FBbUIxQixHQUNqQixJQUFPZixFQUF5Q2UsRUFBekNmLFFBQVNzQyxFQUFnQ3ZCLEVBQWhDdUIsS0FBTUMsRUFBMEJ4QixFQUExQndCLE1BQU9ZLEVBQW1CcEMsRUFBbkJvQyxLQUFNQyxFQUFhckMsRUFBYnFDLFVBQ25DLEVBQTZDcFEsS0FBSzRMLFNBQTNDRSxFQUFQLEVBQU9BLFdBQVlFLEVBQW5CLEVBQW1CQSxPQUFRRCxFQUEzQixFQUEyQkEsT0FBUUUsRUFBbkMsRUFBbUNBLE9BQy9Cb0IsRUFBVSxHQUNWZ0QsRUFBaUIsR0FDakJDLEVBQWtCLEdBQ2xCQyxFQUFnQixHQXVDcEIsT0FyQ0tILEdBQWFELElBQ2hCRyxFQUFrQixnQ0FBSCxPQUFtQ0gsRUFBbkMsT0FHYkMsSUFDRkUsRUFBa0IsZ0NBQUgsT0FBbUNGLEVBQW5DLE9BR2JkLEdBQ0ZpQixFQUFnQixjQUFILE9BQWlCakIsRUFBakIsS0FFVEMsR0FDRmMsRUFBaUIsMEJBQ2pCaEQsRUFBVXJOLEtBQUt3USxnQkFBZ0IsQ0FDN0J4RSxPQUFBQSxNQUdGcUUsRUFBaUIsMEJBQ2pCaEQsRUFBVXJOLEtBQUt3USxnQkFBZ0IsQ0FDN0J2RSxPQUFBQSxNQUlBc0QsR0FDRmMsRUFBaUIsNkNBQ2pCaEQsRUFBVXJOLEtBQUt3USxnQkFBZ0IsQ0FDN0JDLFdBQVl6RSxNQUdkcUUsRUFBaUIsNEJBQ2pCaEQsRUFBVXJOLEtBQUt3USxnQkFBZ0IsQ0FDN0J6RSxPQUFBQSxFQUNBRSxPQUFBQSxLQUtOLDhCQUNnQm9FLEVBRGhCLHNCQUVNQyxFQUZOLG9DQUdxQnRELEVBSHJCLHNCQUlNdUQsRUFKTixzQkFLTXpFLEVBQWEsR0FBS3VCLEVBTHhCLDhCLGtDQVVGLFdBQ0UseXNCLDZCQWtCRixTQUFnQlUsR0FDZCxHQUFJQSxFQUFPakMsV0FDVCxNQUFPLEdBR1QsSUFBTXVCLEVBQVUsQ0FDZHBCLE9BQVEsd0dBQ1JELE9BQVEsMkZBQ1J5RSxXQUFZLHlHQUNaMUUsT0FBUSwyR0FHVixPQUFPMUwsT0FBT3lHLEtBQUtpSCxHQUFRMkMsUUFBTyxTQUFDQyxFQUFleFEsR0FLaEQsT0FKSTROLEVBQU81TixLQUNUd1EsR0FBaUJ0RCxFQUFRbE4sSUFHcEJ3USxJQUNOLE0sd0JBTUwsV0FBYSxXQUNXM1EsS0FBZm9NLFlBQ3FCa0IsaUJBQWlCLFVBRXJDekssU0FBUSxTQUFBMEssR0FDZEEsRUFBT3ZDLGlCQUNMLFFBQ0EsRUFBS3NCLE9BQU9pQixFQUFPTCxRQUFRMEQsU0FDM0IsUyxzQkFobkJhckYsRyIsInNvdXJjZXMiOlsid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvLi9WaXNpb25QaG90b0dhbGxlcnkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiVmlzaW9uUGhvdG9HYWxsZXJ5XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlZpc2lvblBob3RvR2FsbGVyeVwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICAvLyBBdm9pZGluZyBzcGxpdCB2aWEgcmVnZXggdG8gd29yayBhcm91bmQgYSBjb21tb24gSUUxMSBidWcgd2l0aCB0aGUgY29yZS1qcyAzLjYuMCByZWdleCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoL2lzc3Vlcy83NDhcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzc1MVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzXG4gICAgLnNwbGl0KCdcXHInKVxuICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICByZXR1cm4gaGVhZGVyLmluZGV4T2YoJ1xcbicpID09PSAwID8gaGVhZGVyLnN1YnN0cigxLCBoZWFkZXIubGVuZ3RoKSA6IGhlYWRlclxuICAgIH0pXG4gICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQgPT09IHVuZGVmaW5lZCA/ICcnIDogJycgKyBvcHRpb25zLnN0YXR1c1RleHRcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IGdsb2JhbC5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZ2xvYmFsLmxvY2F0aW9uLmhyZWYgPyBnbG9iYWwubG9jYXRpb24uaHJlZiA6IHVybFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIGZpeFVybChyZXF1ZXN0LnVybCksIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKSB7XG4gICAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHN1cHBvcnQuYXJyYXlCdWZmZXIgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiB0eXBlb2YgaW5pdC5oZWFkZXJzID09PSAnb2JqZWN0JyAmJiAhKGluaXQuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbml0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcbiAgZ2xvYmFsLmZldGNoID0gZmV0Y2hcbiAgZ2xvYmFsLkhlYWRlcnMgPSBIZWFkZXJzXG4gIGdsb2JhbC5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnbG9iYWwuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBcIi4vYXBwLnNjc3NcIjtcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLyoqXG4gKiDQmtC70LDRgdGBINCz0LDQu9C10YDQtdC4LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaXNpb25QaG90b0dhbGxlcnkge1xuICBnYWxsZXJ5Q29udGFpbmVyID0gbnVsbDtcbiAgcm9vdEVsZW1lbnQgPSBudWxsO1xuICB0b2tlbiA9IG51bGw7XG4gIGNvbnRyb2xzID0ge1xuICAgIGRpc2FibGVBbGw6IGZhbHNlLFxuICAgIHVwZGF0ZTogdHJ1ZSxcbiAgICB1cGxvYWQ6IHRydWUsXG4gICAgcmVtb3ZlOiB0cnVlXG4gIH07XG4gIG1hc3RlckFsYnVtID0gdHJ1ZTtcblxuICAvKipcbiAgICog0JrQvtC90YHRgtGA0YPQutGC0L7RgCDRjdC60LfQtdC80L/Qu9GP0YDQsCDQutC70LDRgdGB0LAg0LPQsNC70LXRgNC10LguXG4gICAqIEBwYXJhbSByb290IHtzdHJpbmd9IElEINC60L7RgNC90LXQstC+0LPQviDRjdC70LXQvNC10L3RgtCwLCDQutGD0LTQsCDQsdGD0LTQtdGCINGA0LXQvdC00LXRgNC40YLRjNGB0Y8g0LPQsNC70LXRgNC10Y8uXG4gICAqIEBwYXJhbSBlbXBsb3llZUlkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICogQHBhcmFtIHZpc2lvblBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXG4gICAqIEBwYXJhbSBjb250cm9scyB7b2JqZWN0fSDQndCw0YHRgtGA0L7QudC60LAg0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDRjdC70LXQvNC10L3RgtC+0LIg0YPQv9GA0LDQstC70LXQvdC40Y8uXG4gICAqIEBwYXJhbSBjb250cm9scy5kaXNhYmxlQWxsIHtib29sZWFufSDQntGC0LrQu9GO0YfQuNGC0Ywg0LLRgdC1INGN0LvQtdC80LXQvdGC0Ysg0YPQv9GA0LDQstC70LXQvdC40Y8uXG4gICAqIEBwYXJhbSBjb250cm9scy51cGRhdGUge2Jvb2xlYW59INCe0YLQvtCx0YDQsNC20LXQvdC40LUg0LrQvdC+0L/QutC4INC+0LHQvdC+0LLQu9C10L3QuNGPINGE0L7RgtC+0LPRgNCw0YTQuNC4ICjRg9GB0YLQsNC90L7QstC60LAg0L7RgdC90L7QstC90L7QuSkuXG4gICAqIEBwYXJhbSBjb250cm9scy51cGxvYWQge2Jvb2xlYW59INCe0YLQvtCx0YDQsNC20LXQvdC40LUg0LrQvdC+0L/QutC4INC30LDQs9GA0YPQt9C60Lgg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBjb250cm9scy5yZW1vdmUge2Jvb2xlYW59INCe0YLQvtCx0YDQsNC20LXQvdC40LUg0LrQvdC+0L/QutC4INGD0LTQsNC70LXQvdC40Y8g0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBtYXN0ZXJBbGJ1bSB7Ym9vbGVhbn0g0JfQsNCz0YDRg9C30LrQsCDRhNC+0YLQvtCz0YDQsNGE0LjQuSDQuNC3INC80LDRgdGC0LXRgC3QsNC70LHQvtC80LAuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgICBlbXBsb3llZUlkLFxuICAgICAgICAgICAgICAgIHZpc2lvblBlcnNvbklkLFxuICAgICAgICAgICAgICAgIHBlcnNvbklkLFxuICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xzLFxuICAgICAgICAgICAgICAgIG1hc3RlckFsYnVtID0gdHJ1ZVxuICAgICAgICAgICAgICB9KSB7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC1INGD0LrQsNC30LDQvSBJRCDQutC+0YDQvdC10LLQvtCz0L4g0Y3Qu9C10LzQtdC90YLQsCDQtNC70Y8g0LPQsNC70LXRgNC10LghXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm9vdCk7XG5cbiAgICBpZiAoISFyb290RWxlbWVudCkge1xuICAgICAgdGhpcy5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQn9GA0L7QstC10YDRjNGC0LUg0YPQutCw0LfQsNC90L3Ri9C5IElEINC60L7RgNC90LXQstC+0LPQviDRjdC70LXQvNC10L3RgtCwINC00LvRjyDQs9Cw0LvQtdGA0LXQuCFcIik7XG4gICAgfVxuXG4gICAgaWYgKCFlbXBsb3llZUlkICYmICF2aXNpb25QZXJzb25JZCAmJiAhcGVyc29uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcItCd0LUg0YPQutCw0LfQsNC9IElEINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvblwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmVtcGxveWVlID0ge1xuICAgICAgaWQ6IG51bGwsXG4gICAgICBwZXJzb25JZDogbnVsbCxcbiAgICAgIHZpc2lvblBlcnNvbklkOiBudWxsLFxuICAgIH07XG5cbiAgICB0aGlzLmVtcGxveWVlSWQgPSBlbXBsb3llZUlkO1xuICAgIHRoaXMudmlzaW9uUGVyc29uSWQgPSB2aXNpb25QZXJzb25JZDtcbiAgICB0aGlzLnBlcnNvbklkID0gcGVyc29uSWQ7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgICB0aGlzLm1hc3RlckFsYnVtID0gbWFzdGVyQWxidW07XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQsNC10LzRi9C5INC80LXRgtC+0LQg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7RiNC40LHQvtC6LlxuICAgKiBAdHlwZSB7bnVsbHxGdW5jdGlvbn0g0KTRg9C90LrRhtC40Y8g0L7QsdGA0LDQsdC+0YLRh9C40Log0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqL1xuICBlcnJvckZ1bmN0aW9uID0gbnVsbDtcbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvNC10YLQvtC00LAg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7RiNC40LHQvtC6LlxuICAgKiBAdHlwZSB7bnVsbHxGdW5jdGlvbn0g0KTRg9C90LrRhtC40Y8g0L7QsdGA0LDQsdC+0YLRh9C40Log0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqL1xuICBnZXQgZXJyb3JGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvckZ1bmN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9C10L3QuNC1INC80LXRgtC+0LTQsCDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqIEBwYXJhbSBlcnJvckZ1bmN0aW9uIHtudWxsfEZ1bmN0aW9ufSDQpNGD0L3QutGG0LjRjyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICovXG4gIHNldCBlcnJvckZ1bmN0aW9uKGVycm9yRnVuY3Rpb24pIHtcbiAgICBpZiAoZXJyb3JGdW5jdGlvbikge1xuICAgICAgdGhpcy5lcnJvckZ1bmN0aW9uID0gZXJyb3JGdW5jdGlvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdC90L7QstC70LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LIg0LPQsNC70LXRgNC10LguXG4gICAqIEBwYXJhbSBlbXBsb3llZUlkIHtudW1iZXJ8bnVtYmVyfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDRgdC10YHRgdC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICovXG4gIHVwZGF0ZSh7ZW1wbG95ZWVJZCwgdG9rZW59KSB7XG4gICAgdGhpcy5lbXBsb3llZUlkID0gZW1wbG95ZWVJZDtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LjRgtGMIElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICovXG4gIGdldCBlbXBsb3llZUlkKCkge1xuICAgIHJldHVybiB0aGlzLmVtcGxveWVlLmlkO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9C10L3QuNC1INGN0LrQt9C10LzQv9C70Y/RgNGDINCz0LDQu9C10YDQtdC4IElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcGFyYW0gZW1wbG95ZWVJZCB7bnVtYmVyfHN0cmluZ30gSUQg0YHQvtGC0YDRg9C00L3QuNC60LAuXG4gICAqL1xuICBzZXQgZW1wbG95ZWVJZChlbXBsb3llZUlkKSB7XG4gICAgaWYgKGVtcGxveWVlSWQpIHtcbiAgICAgIHRoaXMuZW1wbG95ZWUuaWQgPSBlbXBsb3llZUlkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LjRgtGMIElEINGB0L7RgtGA0YPQtNC90LjQutCwINCw0YPRgtGB0L7RgNGB0LXRgNCwLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICovXG4gIGdldCB2aXNpb25QZXJzb25JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbXBsb3llZS52aXNpb25QZXJzb25JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQtdC90LjQtSDRjdC60LfQtdC80L/Qu9GP0YDRgyDQs9Cw0LvQtdGA0LXQuCBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHZpc2lvblBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICovXG4gIHNldCB2aXNpb25QZXJzb25JZCh2aXNpb25QZXJzb25JZCkge1xuICAgIGlmICh2aXNpb25QZXJzb25JZCkge1xuICAgICAgdGhpcy5lbXBsb3llZS52aXNpb25QZXJzb25JZCA9IHZpc2lvblBlcnNvbklkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LjRgtGMIElEINGB0L7RgtGA0YPQtNC90LjQutCwINCw0YPRgtGB0L7RgNGB0LXRgNCwLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICovXG4gIGdldCBwZXJzb25JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbXBsb3llZS5wZXJzb25JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQtdC90LjQtSDRjdC60LfQtdC80L/Qu9GP0YDRgyDQs9Cw0LvQtdGA0LXQuCBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICogQHBhcmFtIHBlcnNvbklkIHtudW1iZXJ8c3RyaW5nfSBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsCDQsNGD0YLRgdC+0YDRgdC10YDQsC5cbiAgICovXG4gIHNldCBwZXJzb25JZChwZXJzb25JZCkge1xuICAgIGlmIChwZXJzb25JZCkge1xuICAgICAgdGhpcy5lbXBsb3llZS5wZXJzb25JZCA9IHBlcnNvbklkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQmtC+0YDQvdC10LLQvtC5INGN0LvQtdC80LXQvdGCLCDQsiDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINGA0LXQvdC00LXRgNC40YLRjNGB0Y8g0LPQsNC70LXRgNC10Y8uXG4gICAqIEByZXR1cm4ge251bGx8RWxlbWVudH0g0JrQvtGA0L3QtdCy0L7QuSDRjdC70LXQvNC10L3RgiDQtNC70Y8g0YDQtdC90LTQtdGA0LAuXG4gICAqL1xuICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9C40YLRjCBDU1JGLdGC0L7QutC10L0g0YHQtdGB0YHQuNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICogQHJldHVybiB7bnVsbHxzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDRgdC10YHRgdC40Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgZ2V0IHRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLnRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9C40YLRjCBDU1JGLdGC0L7QutC10L0g0YHQtdGB0YHQuNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IENTUkYt0YLQvtC60LXQvSDRgdC10YHRgdC40Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgc2V0IHRva2VuKHRva2VuKSB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LfQvdCw0YfQtdC90LjQtSDRgdC+0YHRgtC+0Y/QvdC40Y8g0LrQvtC90YLRgNC+0LvQvtCyLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSDQodC+0YHRgtC+0Y/QvdC40LUg0LrQvtC90YLRgNC+0LvQvtCyLlxuICAgKi9cbiAgZ2V0IGNvbnRyb2xzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9C40YLRjCDQt9C90LDRh9C10L3QuNC1INGB0L7RgdGC0L7Rj9C90LjRjyDQutC+0L3RgtGA0L7Qu9C+0LIuXG4gICAqIEBwYXJhbSB2YWx1ZSB7Ym9vbGVhbn0g0JLQutC70Y7Rh9C40YLRjC/QvtGC0LrQu9GO0YfQuNGC0Ywg0LrQvtC90YLRgNC+0LvRiy5cbiAgICovXG4gIHNldCBjb250cm9scyh2YWx1ZSkge1xuICAgIHRoaXMuY29udHJvbHMgPSB7XG4gICAgICAuLi50aGlzLmNvbnRyb2xzLFxuICAgICAgLi4udmFsdWVcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQuNGC0Ywg0YTQu9Cw0LMg0LfQsNCz0YDRg9C30LrQuCDRhNC+0YLQvtCz0YDQsNGE0LjQuSDQuNC3INC80LDRgdGC0LXRgC3QsNC70YzQsdC+0LzQsC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0g0KHQvtGB0YLQvtGP0L3QuNC1INGE0LvQsNCz0LAg0LfQsNCz0YDRg9C30LrQuCDRhNC+0YLQvtCz0YDQsNGE0LjQuSDQuNC3INC80LDRgdGC0LXRgC3QsNC70YzQsdC+0LzQsC5cbiAgICovXG4gIGdldCBtYXN0ZXJBbGJ1bSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXN0ZXJBbGJ1bTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQuNGC0Ywg0YTQu9Cw0LMg0LfQsNCz0YDRg9C30LrQuCDRhNC+0YLQvtCz0YDQsNGE0LjQuSDQuNC3INC80LDRgdGC0LXRgC3QsNC70YzQsdC+0LzQsC5cbiAgICogQHBhcmFtIHZhbHVlIHtib29sZWFufSDQktC60LvRjtGH0LjRgtGML9Cy0YvQutC70Y7Rh9C40YLRjCDQt9Cw0LPRgNGD0LfQutGDINC40Lcg0LzQsNGB0YLQtdGALdCw0LvRjNCx0L7QvNCwLlxuICAgKi9cbiAgc2V0IG1hc3RlckFsYnVtKHZhbHVlKSB7XG4gICAgdGhpcy5tYXN0ZXJBbGJ1bSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YjQuNCx0L7Qui5cbiAgICogQHBhcmFtIHBhcmFtcy5tZXNzYWdlIHtzdHJpbmd9INCh0L7QvtCx0YnQtdC90LjQtSDQvtCxINC+0YjQuNCx0LrQtS5cbiAgICogQHBhcmFtIHBhcmFtcy5ibG9ja2luZ0Vycm9yTWVzc2FnZSB7c3RyaW5nfSDQkdC70L7QutC40YDRg9GO0YnQtdC1INC/0L7RgtC+0Log0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1LlxuICAgKi9cbiAgaGFuZGxlRXJyb3IocGFyYW1zKSB7XG4gICAgY29uc3Qge21lc3NhZ2UsIGJsb2NraW5nRXJyb3JNZXNzYWdlfSA9IHBhcmFtcztcblxuICAgIGlmICh0aGlzLmVycm9yRnVuY3Rpb24pIHtcbiAgICAgIGxldCBtZXNzYWdlU3RyaW5nID0gXCJcIjtcblxuICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmZhdWx0c3RyaW5nKSB7XG4gICAgICAgICAgbWVzc2FnZVN0cmluZyA9IG1lc3NhZ2UuZmF1bHRzdHJpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMobWVzc2FnZSlcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VTdHJpbmcgKz0gYCR7bWVzc2FnZVtrZXldfTxici8+YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VTdHJpbmcubGVuZ3RoXG4gICAgICAgID8gbWVzc2FnZVN0cmluZ1xuICAgICAgICA6IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xuXG4gICAgICB0aGlzLmVycm9yRnVuY3Rpb24oZXJyb3JNZXNzYWdlLCBcItCe0YjQuNCx0LrQsFwiKTtcbiAgICB9IGVsc2UgaWYgKGJsb2NraW5nRXJyb3JNZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYmxvY2tpbmdFcnJvck1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdGR0YDRgtC60LAg0LTQu9GPINC30LDQv9GA0L7RgdC+0LIg0LogQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdFBhdGgge3N0cmluZ30g0J3QsNC30LLQsNC90LjQtSDQvNC10YLQvtC00LAgQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdEJvZHkge29iamVjdH0g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHJlcXVlc3Qoe3JlcXVlc3RQYXRoLCByZXF1ZXN0Qm9keX0pIHtcbiAgICBjb25zdCByZXF1ZXN0RGVmYXVsdHMgPSB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgbW9kZTogXCJzYW1lLW9yaWdpblwiLFxuICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1DU1JGVG9rZW5cIjogdGhpcy50b2tlblxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgIH07XG5cbiAgICByZXR1cm4gZmV0Y2goYC9hcGkvdjIvdmlzaW9uLyR7cmVxdWVzdFBhdGh9L2AsIHJlcXVlc3REZWZhdWx0cyk7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9Cz0YDRg9C30LrQsCDQstGB0LXRhSDRhNC+0YLQvtCz0YDQsNGE0LjQuSDRgSDQv9C+0YDRgtCw0LvQsCBWaXNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn0g0J/RgNC+0LzQuNGBINGBINGA0LXQt9GD0LvRjNGC0LDRgtC+0Lwg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBnZXRQaG90b3MoKSB7XG4gICAgY29uc3QgZW1wbG95ZWUgPSB7fTtcblxuICAgIGlmICh0aGlzLmVtcGxveWVlSWQgJiYgIXRoaXMudmlzaW9uUGVyc29uSWQpIHtcbiAgICAgIGVtcGxveWVlLmVtcGxveWVlSWQgPSB0aGlzLmVtcGxveWVlSWQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLnZpc2lvblBlcnNvbklkKSB7XG4gICAgICBlbXBsb3llZS52aXNpb25fcGVyc29uX2lkID0gdGhpcy52aXNpb25QZXJzb25JZDtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGVyc29uSWQpIHtcbiAgICAgIGVtcGxveWVlLnBlcnNvbklkID0gdGhpcy5wZXJzb25JZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiBcImdldF9waG90b3NcIixcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIC4uLmVtcGxveWVlLFxuICAgICAgICBtYXN0ZXJBbGJ1bTogdGhpcy5tYXN0ZXJBbGJ1bVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINC00L7QsdCw0LLQu9C10L3QuNC1ICjQt9Cw0LPRgNGD0LfQutGDKSDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHBhcmFtIGltYWdlIHtCdWZmZXJFbmNvZGluZ30g0KTQvtGC0L7Qs9GA0LDRhNC40Lgg0LIg0YTQvtGA0LzQsNGC0LUgQmFzZTY0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDRgSDRgNC10LfRg9C70YzRgtCw0YLQvtC8INCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQv9GA0L7RgdCwLlxuICAgKi9cbiAgYWRkUGhvdG8oaW1hZ2UpIHtcbiAgICB0aGlzLnRvZ2dsZU92ZXJsYXlNZXNzYWdlKCfQl9Cw0LPRgNGD0LfQutCwLi4uJyk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiBcImFkZF9waG90b1wiLFxuICAgICAgcmVxdWVzdEJvZHk6IHtcbiAgICAgICAgZW1wbG95ZWVJZDogdGhpcy5lbXBsb3llZUlkLFxuICAgICAgICBpbWFnZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINGD0LTQsNC70LXQvdC40LUg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBwaG90b0lkIHtOdW1iZXJ9IElEINGE0L7RgtC+0LPRgNCw0YTQuNC4INC90LAg0L/QvtGA0YLQsNC70LUgVmlzaW9uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDRgSDRgNC10LfRg9C70YzRgtCw0YLQvtC8INCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQv9GA0L7RgdCwLlxuICAgKi9cbiAgZGVsZXRlUGhvdG8ocGhvdG9JZCkge1xuICAgIHRoaXMudG9nZ2xlT3ZlcmxheU1lc3NhZ2UoJ9Cj0LTQsNC70LXQvdC40LUg0YTQvtGC0L7Qs9GA0LDRhNC40LguLi4nKTtcblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgcmVxdWVzdFBhdGg6IFwiZGVsZXRlX3Bob3RvXCIsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBwaG90b19pZDogcGhvdG9JZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINC+0LHQvdC+0LLQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gcGhvdG9JZCB7TnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSDQn9GA0L7QvNC40YEg0YEg0YDQtdC30YPQu9GM0YLQsNGC0L7QvCDQstGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHVwZGF0ZVBob3RvKHBob3RvSWQpIHtcbiAgICB0aGlzLnRvZ2dsZU92ZXJsYXlNZXNzYWdlKCfQntCx0L3QvtCy0LvQtdC90LjQtSDRhNC+0YLQvtCz0YDQsNGE0LjQuC4uLicpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogXCJ1cGRhdGVfcGhvdG9cIixcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIGVtcGxveWVlSWQ6IHRoaXMuZW1wbG95ZWVJZCxcbiAgICAgICAgcGhvdG9faWQ6IHBob3RvSWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDRg9GB0YLQsNC90L7QstC60YMg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0LrQsNC6INC+0YHQvdC+0LLQvdC+0Lkg0LTQu9GPINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcGFyYW0gcGhvdG9JZCB7TnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSDQn9GA0L7QvNC40YEg0YEg0YDQtdC30YPQu9GM0YLQsNGC0L7QvCDQstGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHNldEFzTWFpblBob3RvKHBob3RvSWQpIHtcbiAgICB0aGlzLnRvZ2dsZU92ZXJsYXlNZXNzYWdlKCfQntCx0L3QvtCy0LvQtdC90LjQtSDQvtGB0L3QvtCy0L3QvtC5INGE0L7RgtC+0LPRgNCw0YTQuNC4Li4uJyk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiBcInNldF9tYWluX3Bob3RvXCIsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBlbXBsb3llZUlkOiB0aGlzLmVtcGxveWVlSWQsXG4gICAgICAgIHBob3RvSWQ6IHBob3RvSWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C10YDQtdC60LvRjtGH0LDRgtC10LvRjCDQsdC70L7QutC40YDRg9GO0YnQtdCz0L4g0YHQvtC+0LHRidC10L3QuNGPLlxuICAgKiBAcGFyYW0gbWVzc2FnZSB7c3RyaW5nfHVuZGVmaW5lZHxudWxsfSDQodC+0L7QsdGJ0LXQvdC40LUuXG4gICAqL1xuICB0b2dnbGVPdmVybGF5TWVzc2FnZShtZXNzYWdlID0gbnVsbCkge1xuICAgIGNvbnN0IHtnYWxsZXJ5Q29udGFpbmVyfSA9IHRoaXM7XG5cbiAgICBpZiAoIWdhbGxlcnlDb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDQvdCw0LnQtNC10L3QsCDQutC+0YDQvdC10LLQvtC5INGN0LvQtdC80LXQvdGCINCz0LDQu9C10YDQtdC4Jyk7XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIGdhbGxlcnlDb250YWluZXIuZGF0YXNldC5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgIGdhbGxlcnlDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndmlzaW9uLXBob3RvLWdhbGxlcnktLW1lc3NhZ2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2FsbGVyeUNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpb24tcGhvdG8tZ2FsbGVyeS0tbWVzc2FnZScpO1xuICAgICAgZ2FsbGVyeUNvbnRhaW5lci5kYXRhc2V0Lm1lc3NhZ2UgPSAnJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7RgtGA0LjRgdC+0LLQutCwIERPTSDQs9Cw0LvQtdGA0LXQuNC4LlxuICAgKi9cbiAgZHJhdygpIHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cbiAgICByb290RWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9fZmlsZS1maWVsZFwiIHRhYmluZGV4PVwiLTFcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X19pdGVtIHZpc2lvbi1waG90by1nYWxsZXJ5X19pdGVtLS1tYWluXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInZnLW1haW4tcGhvdG9cIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2Zy1nYWxsZXJ5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcblxuICAgIGNvbnN0IGdhbGxlcnlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZpc2lvbi1waG90by1nYWxsZXJ5XCIpO1xuXG4gICAgdGhpcy5nYWxsZXJ5Q29udGFpbmVyID0gZ2FsbGVyeUNvbnRhaW5lcjtcbiAgICB0aGlzLnRvZ2dsZU92ZXJsYXlNZXNzYWdlKCfQl9Cw0LPRgNGD0LfQutCwLi4uJyk7XG5cbiAgICBjb25zdCBtYWluUGhvdG9Db250YWluZXIgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnZnLW1haW4tcGhvdG9cIik7XG4gICAgY29uc3QgZ2FsbGVyeSA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmctZ2FsbGVyeVwiKTtcbiAgICBjb25zdCB7dXBsb2FkfSA9IHRoaXMuY29udHJvbHM7XG5cbiAgICB0aGlzLmdldFBob3RvcygpXG4gICAgICAudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudCh7XG4gICAgICAgICAgICBtYWluOiB0cnVlLFxuICAgICAgICAgICAgZW1wdHk6IHRydWUsXG4gICAgICAgICAgICBwaG90b0lkOiBudWxsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodXBsb2FkKSB7XG4gICAgICAgICAgICBnYWxsZXJ5LmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHtcbiAgICAgICAgICAgICAgbWFpbjogZmFsc2UsXG4gICAgICAgICAgICAgIGVtcHR5OiB0cnVlLFxuICAgICAgICAgICAgICBwaG90b0lkOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZU5vUGhvdG9FbGVtZW50KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5pbml0RXZlbnRzKCk7XG4gICAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5TWVzc2FnZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgdGhpcy50b2dnbGVPdmVybGF5TWVzc2FnZSgpO1xuICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgLnRoZW4oXG4gICAgICAgIHJlc3BvbnNlSnNvbiA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZUpzb24gfHwgIXJlc3BvbnNlSnNvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZU5vUGhvdG9FbGVtZW50KCk7XG4gICAgICAgICAgICBnYWxsZXJ5LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheU1lc3NhZ2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG1haW5QaG90b0RhdGEgPSByZXNwb25zZUpzb24uZmluZCgoe21haW59KSA9PiBtYWluKTtcbiAgICAgICAgICBjb25zdCBnYWxsZXJ5UGhvdG9zRGF0YSA9IHJlc3BvbnNlSnNvbi5maWx0ZXIoKHttYWlufSkgPT4gIW1haW4pO1xuXG4gICAgICAgICAgaWYgKCEhbWFpblBob3RvRGF0YSkge1xuICAgICAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KFxuICAgICAgICAgICAgICBtYWluUGhvdG9EYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYWluUGhvdG9Db250YWluZXIucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChnYWxsZXJ5UGhvdG9zRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBnYWxsZXJ5UGhvdG9zSHRtbCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGdhbGxlcnlQaG90b3NEYXRhLmZvckVhY2goXG4gICAgICAgICAgICAgIHBob3RvRGF0YSA9PlxuICAgICAgICAgICAgICAgIChnYWxsZXJ5UGhvdG9zSHRtbCArPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudChwaG90b0RhdGEpKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHVwbG9hZCkge1xuICAgICAgICAgICAgICBnYWxsZXJ5UGhvdG9zSHRtbCArPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudCh7XG4gICAgICAgICAgICAgICAgbWFpbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW1wdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgcGhvdG9JZDogbnVsbFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2FsbGVyeS5pbm5lckhUTUwgPSBnYWxsZXJ5UGhvdG9zSHRtbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCF1cGxvYWQpIHtcbiAgICAgICAgICAgIGdhbGxlcnkucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheU1lc3NhZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnRvZ2dsZU92ZXJsYXlNZXNzYWdlKCk7XG4gICAgICAgICAgdGhpcy5pbml0RXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3ZlcmxheU1lc3NhZ2UoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C90LjQstC10YDRgdCw0LvRjNC90YvQuSDQvNC10YLQvtC0INC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINGN0LvQtdC80LXQvdGC0LAg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBwYXJhbXMucGhvdG9JZCB7bnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHBhcmFtIHBhcmFtcy5tYWluIHtib29sZWFufSAg0KTQu9Cw0LMg0L7RgdC90L7QstC90L7Qs9C+INGE0L7RgtC+LlxuICAgKiBAcGFyYW0gcGFyYW1zLmVtcHR5IHtib29sZWFufSDQpNC70LDQsyBcItC/0YPRgdGC0L7Qs9C+XCIg0YTQvtGC0L4sINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQutC90L7Qv9C60Lgg0LfQsNCz0YDRg9C30LrQuC5cbiAgICogQHBhcmFtIHBhcmFtcy5wYXRoIHtzdHJpbmd9INCf0YPRgtGMINC6INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gcGFyYW1zLmF2YXRhclVybCB7c3RyaW5nfSDQn9GD0YLRjCDQuiDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHJldHVybnMge3N0cmluZ30g0K3Qu9C10LzQtdC90YIg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0LIg0LLQuNC00LUg0YHRgtGA0L7QutC4LlxuICAgKi9cbiAgY3JlYXRlUGhvdG9FbGVtZW50KHBhcmFtcykge1xuICAgIGNvbnN0IHtwaG90b0lkLCBtYWluLCBlbXB0eSwgcGF0aCwgYXZhdGFyVXJsfSA9IHBhcmFtcztcbiAgICBjb25zdCB7ZGlzYWJsZUFsbCwgdXBsb2FkLCB1cGRhdGUsIHJlbW92ZX0gPSB0aGlzLmNvbnRyb2xzO1xuICAgIGxldCBidXR0b25zID0gXCJcIjtcbiAgICBsZXQgZWxlbWVudENsYXNzZXMgPSBcIlwiO1xuICAgIGxldCBiYWNrZ3JvdW5kSW1hZ2UgPSBcIlwiO1xuICAgIGxldCBtYWluQXR0cmlidXRlID0gXCJcIjtcblxuICAgIGlmICghYXZhdGFyVXJsICYmIHBhdGgpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IGBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgke3BhdGh9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAoYXZhdGFyVXJsKSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHthdmF0YXJVcmx9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAobWFpbikge1xuICAgICAgbWFpbkF0dHJpYnV0ZSA9IGBkYXRhLW1haW49XCIke21haW59XCJgO1xuXG4gICAgICBpZiAoZW1wdHkpIHtcbiAgICAgICAgZWxlbWVudENsYXNzZXMgPSBcInZnLXBob3RvIHZnLXBob3RvLS1tYWluXCI7XG4gICAgICAgIGJ1dHRvbnMgPSB0aGlzLmdldFBob3RvQnV0dG9ucyh7XG4gICAgICAgICAgdXBsb2FkXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudENsYXNzZXMgPSBcInZnLXBob3RvIHZnLXBob3RvLS1tYWluXCI7XG4gICAgICAgIGJ1dHRvbnMgPSB0aGlzLmdldFBob3RvQnV0dG9ucyh7XG4gICAgICAgICAgcmVtb3ZlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZW1wdHkpIHtcbiAgICAgICAgZWxlbWVudENsYXNzZXMgPSBcInZnLWdhbGxlcnlfX2l0ZW0gdmctcGhvdG8gdmctcGhvdG8tLXVwbG9hZFwiO1xuICAgICAgICBidXR0b25zID0gdGhpcy5nZXRQaG90b0J1dHRvbnMoe1xuICAgICAgICAgIHVwbG9hZEljb246IHVwbG9hZFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnRDbGFzc2VzID0gXCJ2Zy1nYWxsZXJ5X19pdGVtIHZnLXBob3RvXCI7XG4gICAgICAgIGJ1dHRvbnMgPSB0aGlzLmdldFBob3RvQnV0dG9ucyh7XG4gICAgICAgICAgdXBkYXRlLFxuICAgICAgICAgIHJlbW92ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cIiR7ZWxlbWVudENsYXNzZXN9XCJcbiAgICAgICAgJHtiYWNrZ3JvdW5kSW1hZ2V9XG4gICAgICAgIGRhdGEtcGhvdG8taWQ9XCIke3Bob3RvSWR9XCJcbiAgICAgICAgJHttYWluQXR0cmlidXRlfT5cbiAgICAgICAgJHtkaXNhYmxlQWxsID8gXCJcIiA6IGJ1dHRvbnN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgfVxuXG4gIGNyZWF0ZU5vUGhvdG9FbGVtZW50KCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwidmctcGhvdG8gdmctcGhvdG8tLW1haW5cIj5cbiAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIi0yNTYgLTI1NiAxMDI0IDEwMjRcIj5cbiAgICAgICAgICA8cGF0aCBmaWxsPVwiIzRhNTI2NlwiXG4gICAgICAgICAgICBkPVwiTTQzNyAzMTAuOGMtMjguNC0yOC40LTYyLjItNDkuMi05OS4xLTYxLjcgMzQuMS0yNS4yIDU2LjItNjUuNiA1Ni4yLTExMS4xQzM5NC4xIDYxLjkgMzMyLjEgMCAyNTYgMFMxMTcuOSA2MS45IDExNy45IDEzOC4xYzAgNDUuNSAyMi4xIDg1LjkgNTYuMiAxMTEuMSAtMzYuOSAxMi40LTcwLjggMzMuMy05OS4xIDYxLjdDMjYuNiAzNTkuMiAwIDQyMy41IDAgNDkxLjggMCA1MDMgOSA1MTIgMjAuMiA1MTJoNDcxLjdjMTEuMSAwIDIwLjItOSAyMC4yLTIwLjJDNTEyIDQyMy41IDQ4NS40IDM1OS4yIDQzNyAzMTAuOHpNMTU4LjIgMTM4LjFjMC01My45IDQzLjktOTcuOCA5Ny44LTk3LjggNTMuOSAwIDk3LjggNDMuOSA5Ny44IDk3LjggMCA1My45LTQzLjkgOTcuOC05Ny44IDk3LjhDMjAyLjEgMjM1LjggMTU4LjIgMTkyIDE1OC4yIDEzOC4xek00MS4yIDQ3MS43QzUxLjQgMzYyLjIgMTQzLjkgMjc2LjIgMjU2IDI3Ni4yczIwNC42IDg2IDIxNC44IDE5NS41SDQxLjJ6XCIvPlxuICAgICAgICA8L3N2Zz5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9C40YLRjCDQutC90L7Qv9C60YMg0L/QviDQv9C10YDQtdC00LDQstCw0LXQvNGL0Lwg0L/QsNGA0LDQvNC10YLRgNCw0LwuXG4gICAqIEBwYXJhbSBwYXJhbXMuZGlzYWJsZUFsbCB7Ym9vbGVhbn0g0J7RgtC60LvRjtGH0LjRgtGMINCy0YHQtSDQutC90L7Qv9C60LguXG4gICAqIEBwYXJhbSBwYXJhbXMucmVtb3ZlIHtib29sZWFufSDQmtC90L7Qv9C60LAg0YPQtNCw0LvQtdC90LjRjy5cbiAgICogQHBhcmFtIHBhcmFtcy51cGxvYWQge2Jvb2xlYW59INCa0L3QvtC/0LrQsCDQt9Cw0LPRgNGD0LfQutC4LlxuICAgKiBAcGFyYW0gcGFyYW1zLnVwbG9hZEljb24ge2Jvb2xlYW59INCa0L3QvtC/0LrQsCDQt9Cw0LPRgNGD0LfQutC4INCyINCy0LjQtNC1INC40LrQvtC90LrQuC5cbiAgICogQHBhcmFtIHBhcmFtcy5zZWxlY3Qge2Jvb2xlYW59INCa0L3QvtC/0LrQsCDQstGL0LHQvtGA0LAg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqL1xuICBnZXRQaG90b0J1dHRvbnMocGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5kaXNhYmxlQWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICBjb25zdCBidXR0b25zID0ge1xuICAgICAgcmVtb3ZlOiBgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tcmVkXCIgZGF0YS1hY3Rpb249XCJyZW1vdmUtcGhvdG9cIj7Qo9C00LDQu9C40YLRjDwvYnV0dG9uPmAsXG4gICAgICB1cGxvYWQ6IGA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b25cIiBkYXRhLWFjdGlvbj1cInVwbG9hZC1waG90b1wiPtCX0LDQs9GA0YPQt9C40YLRjDwvYnV0dG9uPmAsXG4gICAgICB1cGxvYWRJY29uOiBgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tdXBsb2FkXCIgZGF0YS1hY3Rpb249XCJ1cGxvYWQtcGhvdG9cIj4mIzQzOzwvYnV0dG9uPmAsXG4gICAgICB1cGRhdGU6IGA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1ncmVlblwiIGRhdGEtYWN0aW9uPVwidXBkYXRlLXBob3RvXCI+0JLRi9Cx0YDQsNGC0Yw8L2J1dHRvbj5gXG4gICAgfTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXMpLnJlZHVjZSgoYnV0dG9uc1N0cmluZywga2V5KSA9PiB7XG4gICAgICBpZiAocGFyYW1zW2tleV0pIHtcbiAgICAgICAgYnV0dG9uc1N0cmluZyArPSBidXR0b25zW2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidXR0b25zU3RyaW5nO1xuICAgIH0sIFwiXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INC00LvRjyDQutC90L7Qv9C+0Log0LPQsNC70LXRgNC10LguXG4gICAqL1xuICBpbml0RXZlbnRzKCkge1xuICAgIGNvbnN0IHtyb290RWxlbWVudH0gPSB0aGlzO1xuICAgIGNvbnN0IGJ1dHRvbnMgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICB0aGlzLnJvdXRlcltidXR0b24uZGF0YXNldC5hY3Rpb25dLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQoNC+0YPRgtC10YAuXG4gICAqIEB0eXBlIHt7XCJyZW1vdmUtcGhvdG9cIjogZnVuY3Rpb24oKik6IHZvaWQsIFwiZmlsZS1pbnB1dC1jaGFuZ2VkXCI6IGZ1bmN0aW9uKCopOiB2b2lkLCBcInVwbG9hZC1waG90b1wiOiBmdW5jdGlvbigqKTogdm9pZCwgXCJ1cGRhdGUtcGhvdG9cIjogZnVuY3Rpb24oKik6IHZvaWR9fVxuICAgKi9cbiAgcm91dGVyID0ge1xuICAgIC8qKlxuICAgICAqINCX0LDQs9GA0YPQt9C60LAg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0YHQvtGC0YDRg9C00L3QuNC60LAuXG4gICAgICogQHBhcmFtIGV2ZW50IHtFdmVudH0g0KHQvtCx0YvRgtC40LUuXG4gICAgICovXG4gICAgXCJ1cGxvYWQtcGhvdG9cIjogZXZlbnQgPT4ge1xuICAgICAgY29uc3QgZmlsZUlucHV0ID0gdGhpcy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuXG4gICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLnJvdXRlcltcImZpbGUtaW5wdXQtY2hhbmdlZFwiXSk7XG4gICAgICBmaWxlSW5wdXQuY2xpY2soKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqINCh0LvRg9GI0LDRgtC10LvRjCDRgdC+0LHRi9GC0LjRjyDQuNC30LzQtdC90LXQvdC40Y8g0YTQsNC50LvQvtCy0L7Qs9C+INC/0L7Qu9GPINCy0LLQvtC00LAuXG4gICAgICogQHBhcmFtIGV2ZW50IHtldmVudH0g0KHQvtCx0YvRgtC40LUuXG4gICAgICovXG4gICAgXCJmaWxlLWlucHV0LWNoYW5nZWRcIjogZXZlbnQgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmFkZFBob3RvKHJlYWRlci5yZXN1bHQpLnRoZW4oXG4gICAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZWFkZXIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogcmVhZGVyLmVycm9yLFxuICAgICAgICAgIGJsb2NraW5nRXJyb3JNZXNzYWdlOiBg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0YTQvtGC0L7Qs9GA0LDRhNC40LggKC3QuNC5KTogJHtyZWFkZXIuZXJyb3J9YFxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDRg9C00LDQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4INGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgICAqIEBwYXJhbSBldmVudCB7RXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgIFwicmVtb3ZlLXBob3RvXCI6IGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHBob3RvRWxlbWVudCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLnZnLXBob3RvXCIpO1xuICAgICAgY29uc3Qge3Bob3RvSWR9ID0gcGhvdG9FbGVtZW50LmRhdGFzZXQ7XG5cbiAgICAgIGlmICghIXBob3RvSWQpIHtcbiAgICAgICAgdGhpcy5kZWxldGVQaG90bygrcGhvdG9JZCkudGhlbihcbiAgICAgICAgICByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqINCX0LDQv9GA0L7RgSDQvdCwINC+0LHQvdC+0LLQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4INGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgICAqIEBwYXJhbSBldmVudCB7RXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgIFwidXBkYXRlLXBob3RvXCI6IGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHBob3RvRWxlbWVudCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLnZnLXBob3RvXCIpO1xuICAgICAgY29uc3Qge3Bob3RvSWR9ID0gcGhvdG9FbGVtZW50LmRhdGFzZXQ7XG4gICAgICBjb25zdCBidXR0b25zID0gcGhvdG9FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgICBpZiAoISFwaG90b0lkKSB7XG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKSk7XG5cbiAgICAgICAgdGhpcy5zZXRBc01haW5QaG90bygrcGhvdG9JZCkudGhlbihcbiAgICAgICAgICByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsInN1cHBvcnQiLCJTeW1ib2wiLCJCbG9iIiwiZSIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImluZGV4T2YiLCJ0b1N0cmluZyIsIm5vcm1hbGl6ZU5hbWUiLCJuYW1lIiwiU3RyaW5nIiwidGVzdCIsIlR5cGVFcnJvciIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJ2YWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJ1bmRlZmluZWQiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImZvckVhY2giLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJQcm9taXNlIiwicmVqZWN0IiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVzb2x2ZSIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJzbGljZSIsInZpZXciLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInNldCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwidHlwZSIsInJlamVjdGVkIiwiRXJyb3IiLCJhcnJheUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJ0aGVuIiwidGV4dCIsInJlYWRBc1RleHQiLCJjaGFycyIsImxlbmd0aCIsImkiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiZm9ybURhdGEiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwib2xkVmFsdWUiLCJoYXMiLCJjYWxsYmFjayIsInRoaXNBcmciLCJrZXlzIiwicHVzaCIsInZhbHVlcyIsImVudHJpZXMiLCJtZXRob2RzIiwiUmVxdWVzdCIsImlucHV0Iiwib3B0aW9ucyIsIm1ldGhvZCIsInVwY2FzZWQiLCJ1cmwiLCJjcmVkZW50aWFscyIsIm1vZGUiLCJzaWduYWwiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiY2FjaGUiLCJyZVBhcmFtU2VhcmNoIiwicmVwbGFjZSIsIkRhdGUiLCJnZXRUaW1lIiwiZm9ybSIsInRyaW0iLCJzcGxpdCIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsIm9rIiwic3RhdHVzVGV4dCIsImNsb25lIiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJET01FeGNlcHRpb24iLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzdWJzdHIiLCJsaW5lIiwicGFydHMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsInNldFRpbWVvdXQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsImhyZWYiLCJmaXhVcmwiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsInBvbHlmaWxsIiwiZmV0Y2giLCJWaXNpb25QaG90b0dhbGxlcnkiLCJlbXBsb3llZUlkIiwidmlzaW9uUGVyc29uSWQiLCJwZXJzb25JZCIsInRva2VuIiwiY29udHJvbHMiLCJtYXN0ZXJBbGJ1bSIsImRpc2FibGVBbGwiLCJ1cGRhdGUiLCJ1cGxvYWQiLCJyZW1vdmUiLCJldmVudCIsImZpbGVJbnB1dCIsInJvb3RFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInJvdXRlciIsImNsaWNrIiwiZmlsZSIsInRhcmdldCIsImZpbGVzIiwicmVhZEFzRGF0YVVSTCIsImFkZFBob3RvIiwiZHJhdyIsImhhbmRsZUVycm9yIiwiYmxvY2tpbmdFcnJvck1lc3NhZ2UiLCJwaG90b0lkIiwiY2xvc2VzdCIsImRhdGFzZXQiLCJkZWxldGVQaG90byIsInBob3RvRWxlbWVudCIsImJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwic2V0QXR0cmlidXRlIiwic2V0QXNNYWluUGhvdG8iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZW1wbG95ZWUiLCJpZCIsImVycm9yRnVuY3Rpb24iLCJwYXJhbXMiLCJtZXNzYWdlU3RyaW5nIiwiZmF1bHRzdHJpbmciLCJyZXZlcnNlIiwiZXJyb3JNZXNzYWdlIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImxvZyIsInJlcXVlc3RQYXRoIiwicmVxdWVzdEJvZHkiLCJyZXF1ZXN0RGVmYXVsdHMiLCJ2aXNpb25fcGVyc29uX2lkIiwiaW1hZ2UiLCJ0b2dnbGVPdmVybGF5TWVzc2FnZSIsInBob3RvX2lkIiwiZ2FsbGVyeUNvbnRhaW5lciIsImNsYXNzTGlzdCIsImFkZCIsImlubmVySFRNTCIsIm1haW5QaG90b0NvbnRhaW5lciIsImdhbGxlcnkiLCJnZXRQaG90b3MiLCJjcmVhdGVQaG90b0VsZW1lbnQiLCJtYWluIiwiZW1wdHkiLCJjcmVhdGVOb1Bob3RvRWxlbWVudCIsImluaXRFdmVudHMiLCJyZXNwb25zZUpzb24iLCJwYXJlbnRFbGVtZW50IiwibWFpblBob3RvRGF0YSIsImZpbmQiLCJnYWxsZXJ5UGhvdG9zRGF0YSIsImZpbHRlciIsImdhbGxlcnlQaG90b3NIdG1sIiwicGhvdG9EYXRhIiwiY2F0Y2giLCJwYXRoIiwiYXZhdGFyVXJsIiwiZWxlbWVudENsYXNzZXMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJtYWluQXR0cmlidXRlIiwiZ2V0UGhvdG9CdXR0b25zIiwidXBsb2FkSWNvbiIsInJlZHVjZSIsImJ1dHRvbnNTdHJpbmciLCJhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9