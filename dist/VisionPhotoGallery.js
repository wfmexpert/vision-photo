!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VisionPhotoGallery=e():t.VisionPhotoGallery=e()}(this,(function(){return function(){"use strict";var t={946:function(t,e,o){function n(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}o.d(e,{default:function(){return i}});var i=function(){function t(e){var o=e.root,n=e.employeeId,r=e.token;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!o)throw new Error("Не указан ID корневого элемента для галереи!");var i=document.getElementById(o);if(!i)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=i,!n)throw new Error("Не указан ID пользователя на портале Vision");this.employeeId=n,this.token=r,this.constructor.draw()}var e,o,r;return e=t,r=[{key:"update",value:function(t){var e=t.employeeId,o=t.token;this.employeeId=e,this.token=o,this.draw()}},{key:"handleError",value:function(t){var e=t.message,o=t.blockingErrorMessage;if(this.errorFunction)this.errorFunction(e);else{if(o)throw new Error(o);console.log(e)}}},{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),n)}},{key:"getPhotos",value:function(){return this.request({requestPath:"get_photos",requestBody:{employeeId:this.employeeId,masterAlbum:!0}})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{employeeId:this.employeeId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{employeeId:this.employeeId,photoIds:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"update_photo",requestBody:{employeeId:this.employeeId,photo_id:t}})}},{key:"draw",value:function(){var t=this,e=this.rootElement;e.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var o=e.querySelector(".vg-main-photo"),n=e.querySelector(".vg-gallery");this.getPhotos().then((function(e){if(o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),e.ok)return e.json();o.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),t.initEvents()})).then((function(e){if(e){var r=e.find((function(t){return!0===t.main})),i=e.filter((function(t){return!0!==t.main}));if(r?o.innerHTML=t.createPhotoElement(r):o.parentElement.classList.add("hidden"),i.length){var a="";i.forEach((function(e){return a+=t.createPhotoElement(e)})),a+=t.createPhotoElement({main:!1,empty:!0,photoId:null}),n.innerHTML=a}t.initEvents()}})).catch((function(e){t.handleError({message:e}),t.initEvents()})),this.initEvents()}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,n=t.empty,r=t.path,i=t.avatarUrl,a="",u="",l="",c="";return r&&(l='style="background-image: url('.concat(r,')"')),i&&(l='style="background-image: url('.concat(i,')"')),o&&(c='data-main="'.concat(o,'"')),o&&!n?(u="vg-photo vg-photo--main",a='\n        <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n      '):o&&n?(u="vg-photo vg-photo--main",a='\n        <button class="vg-photo__button vg-button" data-action="upload-photo">Загрузить</button>\n      '):!o&&n?(u="vg-gallery__item vg-photo vg-photo--upload",a='\n        <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n      '):(u="vg-gallery__item vg-photo",a='\n        <button class="vg-photo__button vg-button vg-button--green" data-action="update-photo">Выбрать</button>\n        <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n      '),'\n      <div class="'.concat(u,'"\n        ').concat(l,'\n        data-photo-id="').concat(e,'"\n        ').concat(c,">\n        ").concat(a,"\n        </div>\n      ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],(o=[{key:"errorFunction",get:function(){return this.constructor.errorFunction},set:function(t){t&&(this.constructor.errorFunction=t)}},{key:"employeeId",get:function(){return this.constructor.employeeId},set:function(t){t&&(this.constructor.employeeId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}}])&&n(e.prototype,o),r&&n(e,r),t}();r(i,"employeeId",null),r(i,"rootElement",null),r(i,"token",null),r(i,"errorFunction",null),r(i,"router",{"upload-photo":function(t){var e=i.rootElement.querySelector('input[type="file"]');e.addEventListener("change",i.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],o=new FileReader;o.readAsDataURL(e),o.onload=function(){i.addPhoto(o.result).then((function(t){t.ok&&i.draw()})).catch((function(t){i.handleError({message:t})}))},o.onerror=function(){i.handleError({message:o.error,blockingErrorMessage:"Ошибка загрузки фотографии (-ий): ".concat(o.error)})}},"remove-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&i.deletePhoto(+e).then((function(t){t.ok&&i.draw()})).catch((function(t){i.handleError({message:t})}))},"update-photo":function(t){var e=t.target.closest(".vg-photo").dataset.photoId;e&&i.updatePhoto(+e).then((function(t){t.ok&&i.draw()})).catch((function(t){i.handleError({message:t})}))}})}},e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={exports:{}};return t[n](r,r.exports,o),r.exports}return o.d=function(t,e){for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o(946)}().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS8uL1Zpc2lvblBob3RvR2FsbGVyeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJWaXNpb25QaG90b0dhbGxlcnkiLCJlbXBsb3llZUlkIiwidG9rZW4iLCJFcnJvciIsInJvb3RFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnN0cnVjdG9yIiwiZHJhdyIsInBhcmFtcyIsIm1lc3NhZ2UiLCJibG9ja2luZ0Vycm9yTWVzc2FnZSIsImVycm9yRnVuY3Rpb24iLCJjb25zb2xlIiwibG9nIiwicmVxdWVzdFBhdGgiLCJyZXF1ZXN0Qm9keSIsInJlcXVlc3REZWZhdWx0cyIsIm1ldGhvZCIsIm1vZGUiLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZldGNoIiwicmVxdWVzdCIsIm1hc3RlckFsYnVtIiwiaW1hZ2UiLCJwaG90b0lkIiwicGhvdG9JZHMiLCJwaG90b19pZCIsImlubmVySFRNTCIsIm1haW5QaG90b0NvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJnYWxsZXJ5IiwiZ2V0UGhvdG9zIiwidGhlbiIsInJlc3BvbnNlIiwiY3JlYXRlUGhvdG9FbGVtZW50IiwibWFpbiIsImVtcHR5Iiwib2siLCJqc29uIiwiaW5pdEV2ZW50cyIsInJlc3BvbnNlSnNvbiIsIm1haW5QaG90b0RhdGEiLCJmaW5kIiwiZ2FsbGVyeVBob3Rvc0RhdGEiLCJmaWx0ZXIiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwibGVuZ3RoIiwiZ2FsbGVyeVBob3Rvc0h0bWwiLCJmb3JFYWNoIiwicGhvdG9EYXRhIiwiY2F0Y2giLCJlcnJvciIsImhhbmRsZUVycm9yIiwicGF0aCIsImF2YXRhclVybCIsImJ1dHRvbnMiLCJlbGVtZW50Q2xhc3NlcyIsImJhY2tncm91bmRJbWFnZSIsIm1haW5BdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJvdXRlciIsImRhdGFzZXQiLCJhY3Rpb24iLCJlIiwiZmlsZUlucHV0IiwiY2xpY2siLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIm9ubG9hZCIsImFkZFBob3RvIiwicmVzdWx0Iiwib25lcnJvciIsImNsb3Nlc3QiLCJkZWxldGVQaG90byIsInVwZGF0ZVBob3RvIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgs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QUFnQixTQUFDYyxHQUNmLElBQ08zQyxFQURjMkMsRUFBRUksT0FBT1MsUUFBUSxhQUNQZixRQUF4QnpDLFFBRURBLEdBdGJTN0IsRUF1YlJ1RixhQUFhMUQsR0FDZlEsTUFBSyxTQUFBQyxHQUNBQSxFQUFTSSxJQXpiSjFDLEVBMGJGUSxVQUdSaUQsT0FBTSxTQUFBQyxHQTdiSTFELEVBOGJKMkQsWUFBWSxDQUNmakQsUUFBU2dELFlDcmNuQjhCLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVUvRixRQUczQyxJQUFJQyxFQUFTNEYsRUFBeUJFLEdBQVksQ0FHakQvRixRQUFTLElBT1YsT0FIQWdHLEVBQW9CRCxHQUFVOUYsRUFBUUEsRUFBT0QsUUFBUzhGLEdBRy9DN0YsRUFBT0QsUUNqQmYsT0NGQThGLEVBQW9CRyxFQUFJLFNBQVNqRyxFQUFTa0csR0FDekMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYSixFQUFvQk0sRUFBRUYsRUFBWUMsS0FBU0wsRUFBb0JNLEVBQUVwRyxFQUFTbUcsSUFDNUVFLE9BQU9DLGVBQWV0RyxFQUFTbUcsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLE1DSjNFTCxFQUFvQk0sRUFBSSxTQUFTSyxFQUFLQyxHQUFRLE9BQU9MLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLElGR3hGWixFQUFvQixLIiwiZmlsZSI6IlZpc2lvblBob3RvR2FsbGVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlZpc2lvblBob3RvR2FsbGVyeVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJWaXNpb25QaG90b0dhbGxlcnlcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAnLi9hcHAuc2Nzcyc7XG5cbi8qKlxuICog0JrQu9Cw0YHRgSDQs9Cw0LvQtdGA0LXQuC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzaW9uUGhvdG9HYWxsZXJ5IHtcbiAgc3RhdGljIGVtcGxveWVlSWQgPSBudWxsO1xuICBzdGF0aWMgcm9vdEVsZW1lbnQgPSBudWxsO1xuICBzdGF0aWMgdG9rZW4gPSBudWxsO1xuXG4gIC8qKlxuICAgKiDQmtC+0L3RgdGC0YDRg9C60YLQvtGAINGN0LrQt9C10LzQv9C70Y/RgNCwINC60LvQsNGB0YHQsCDQs9Cw0LvQtdGA0LXQuC5cbiAgICogQHBhcmFtIHJvb3Qge3N0cmluZ30gSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAsINC60YPQtNCwINCx0YPQtNC10YIg0YDQtdC90LTQtdGA0LjRgtGM0YHRjyDQs9Cw0LvQtdGA0LXRjy5cbiAgICogQHBhcmFtIGVtcGxveWVlSWQge251bWJlcnxzdHJpbmd9IElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ30gQ1NSRi3RgtC+0LrQtdC9INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtyb290LCBlbXBsb3llZUlkLCB0b2tlbn0pIHtcbiAgICBpZiAoIXJvb3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDRg9C60LDQt9Cw0L0gSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm9vdCk7XG5cbiAgICBpZiAoISFyb290RWxlbWVudCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ9Cf0YDQvtCy0LXRgNGM0YLQtSDRg9C60LDQt9Cw0L3QvdGL0LkgSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGlmICghZW1wbG95ZWVJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQndC1INGD0LrQsNC30LDQvSBJRCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3QsCDQv9C+0YDRgtCw0LvQtSBWaXNpb24nKTtcbiAgICB9XG5cbiAgICB0aGlzLmVtcGxveWVlSWQgPSBlbXBsb3llZUlkO1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcblxuICAgIHRoaXMuY29uc3RydWN0b3IuZHJhdygpO1xuICB9XG5cbiAgLyoqXG4gICAqINCd0LDQt9C90LDRh9Cw0LXQvNGL0Lkg0LzQtdGC0L7QtCDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqIEB0eXBlIHtudWxsfEZ1bmN0aW9ufSDQpNGD0L3QutGG0LjRjyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICovXG4gIHN0YXRpYyBlcnJvckZ1bmN0aW9uID0gbnVsbDtcblxuICAvKipcbiAgICog0J/QvtC70YPRh9C10L3QuNC1INC80LXRgtC+0LTQsCDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvtGI0LjQsdC+0LouXG4gICAqIEB0eXBlIHtudWxsfEZ1bmN0aW9ufSDQpNGD0L3QutGG0LjRjyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICovXG4gIGdldCBlcnJvckZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmVycm9yRnVuY3Rpb247XG4gIH1cblxuICAvKipcbiAgICog0J3QsNC30L3QsNGH0LXQvdC40LUg0LzQtdGC0L7QtNCwINC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC+0YjQuNCx0L7Qui5cbiAgICogQHBhcmFtIGVycm9yRnVuY3Rpb24ge251bGx8RnVuY3Rpb259INCk0YPQvdC60YbQuNGPINC+0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7RiNC40LHQvtC6LlxuICAgKi9cbiAgc2V0IGVycm9yRnVuY3Rpb24oZXJyb3JGdW5jdGlvbikge1xuICAgIGlmIChlcnJvckZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmVycm9yRnVuY3Rpb24gPSBlcnJvckZ1bmN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QsiDQs9Cw0LvQtdGA0LXQuC5cbiAgICogQHBhcmFtIGVtcGxveWVlSWQge251bWJlcnxudW1iZXJ9IElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ30gQ1NSRi3RgtC+0LrQtdC9INGB0LXRgdGB0Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxuICAgKi9cbiAgc3RhdGljIHVwZGF0ZSh7ZW1wbG95ZWVJZCwgdG9rZW59KSB7XG4gICAgdGhpcy5lbXBsb3llZUlkID0gZW1wbG95ZWVJZDtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LjRgtGMIElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKiBAcmV0dXJuIHtudWxsfVxuICAgKi9cbiAgZ2V0IGVtcGxveWVlSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZW1wbG95ZWVJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQtdC90LjQtSDRjdC60LfQtdC80L/Qu9GP0YDRgyDQs9Cw0LvQtdGA0LXQuCBJRCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICogQHBhcmFtIGVtcGxveWVlSWQge251bWJlcnxzdHJpbmd9IElEINGB0L7RgtGA0YPQtNC90LjQutCwLlxuICAgKi9cbiAgc2V0IGVtcGxveWVlSWQoZW1wbG95ZWVJZCkge1xuICAgIGlmIChlbXBsb3llZUlkKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmVtcGxveWVlSWQgPSBlbXBsb3llZUlkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQmtC+0YDQvdC10LLQvtC5INGN0LvQtdC80LXQvdGCLCDQsiDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINGA0LXQvdC00LXRgNC40YLRjNGB0Y8g0LPQsNC70LXRgNC10Y8uXG4gICAqIEByZXR1cm4ge251bGx8RWxlbWVudH0g0JrQvtGA0L3QtdCy0L7QuSDRjdC70LXQvNC10L3RgiDQtNC70Y8g0YDQtdC90LTQtdGA0LAuXG4gICAqL1xuICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Iucm9vdEVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9C40YLRjCBDU1JGLdGC0L7QutC10L0g0YHQtdGB0YHQuNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cbiAgICogQHJldHVybiB7bnVsbH1cbiAgICovXG4gIGdldCB0b2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDQndCw0LfQvdCw0YfQuNGC0YwgQ1NSRi3RgtC+0LrQtdC9INGB0LXRgdGB0LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXG4gICAqIEBwYXJhbSB0b2tlblxuICAgKi9cbiAgc2V0IHRva2VuKHRva2VuKSB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnRva2VuID0gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YjQuNCx0L7Qui5cbiAgICogQHBhcmFtIHBhcmFtcy5tZXNzYWdlIHtzdHJpbmd9INCh0L7QvtCx0YnQtdC90LjQtSDQvtCxINC+0YjQuNCx0LrQtS5cbiAgICogQHBhcmFtIHBhcmFtcy5ibG9ja2luZ0Vycm9yTWVzc2FnZSB7c3RyaW5nfSDQkdC70L7QutC40YDRg9GO0YnQtdC1INC/0L7RgtC+0Log0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1LlxuICAgKi9cbiAgc3RhdGljIGhhbmRsZUVycm9yKHBhcmFtcykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgYmxvY2tpbmdFcnJvck1lc3NhZ2UgfSA9IHBhcmFtcztcblxuICAgIGlmICh0aGlzLmVycm9yRnVuY3Rpb24pIHtcbiAgICAgIHRoaXMuZXJyb3JGdW5jdGlvbihtZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKGJsb2NraW5nRXJyb3JNZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYmxvY2tpbmdFcnJvck1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdGR0YDRgtC60LAg0LTQu9GPINC30LDQv9GA0L7RgdC+0LIg0LogQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdFBhdGgge3N0cmluZ30g0J3QsNC30LLQsNC90LjQtSDQvNC10YLQvtC00LAgQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdEJvZHkge29iamVjdH0g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHN0YXRpYyByZXF1ZXN0KHtyZXF1ZXN0UGF0aCwgcmVxdWVzdEJvZHl9KSB7XG4gICAgY29uc3QgcmVxdWVzdERlZmF1bHRzID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBtb2RlOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUNTUkZUb2tlbic6IHRoaXMudG9rZW4sXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgIH07XG5cbiAgICByZXR1cm4gZmV0Y2goYC9hcGkvdjIvdmlzaW9uLyR7cmVxdWVzdFBhdGh9L2AsIHJlcXVlc3REZWZhdWx0cyk7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9Cz0YDRg9C30LrQsCDQstGB0LXRhSDRhNC+0YLQvtCz0YDQsNGE0LjQuSDRgSDQv9C+0YDRgtCw0LvQsCBWaXNpb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn0g0J/RgNC+0LzQuNGBINGBINGA0LXQt9GD0LvRjNGC0LDRgtC+0Lwg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBzdGF0aWMgZ2V0UGhvdG9zKCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgcmVxdWVzdFBhdGg6ICdnZXRfcGhvdG9zJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIGVtcGxveWVlSWQ6IHRoaXMuZW1wbG95ZWVJZCxcbiAgICAgICAgbWFzdGVyQWxidW06IHRydWUsXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog0JfQsNC/0YDQvtGBINC90LAg0LTQvtCx0LDQstC70LXQvdC40LUgKNC30LDQs9GA0YPQt9C60YMpINGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gaW1hZ2Uge0J1ZmZlckVuY29kaW5nfSDQpNC+0YLQvtCz0YDQsNGE0LjQuCDQsiDRhNC+0YDQvNCw0YLQtSBCYXNlNjQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn0g0J/RgNC+0LzQuNGBINGBINGA0LXQt9GD0LvRjNGC0LDRgtC+0Lwg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBzdGF0aWMgYWRkUGhvdG8oaW1hZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnYWRkX3Bob3RvJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIGVtcGxveWVlSWQ6IHRoaXMuZW1wbG95ZWVJZCxcbiAgICAgICAgaW1hZ2UsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINGD0LTQsNC70LXQvdC40LUg0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBwaG90b0lkIHtOdW1iZXJ9IElEINGE0L7RgtC+0LPRgNCw0YTQuNC4INC90LAg0L/QvtGA0YLQsNC70LUgVmlzaW9uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDRgSDRgNC10LfRg9C70YzRgtCw0YLQvtC8INCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQv9GA0L7RgdCwLlxuICAgKi9cbiAgc3RhdGljIGRlbGV0ZVBob3RvKHBob3RvSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnZGVsZXRlX3Bob3RvJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIGVtcGxveWVlSWQ6IHRoaXMuZW1wbG95ZWVJZCxcbiAgICAgICAgcGhvdG9JZHM6IFtwaG90b0lkXSxcbiAgICAgICAgbWFzdGVyQWxidW06IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQv9GA0L7RgSDQvdCwINC+0LHQvdC+0LLQu9C10L3QuNC1INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcGFyYW0gcGhvdG9JZCB7TnVtYmVyfSBJRCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQvdCwINC/0L7RgNGC0LDQu9C1IFZpc2lvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSDQn9GA0L7QvNC40YEg0YEg0YDQtdC30YPQu9GM0YLQsNGC0L7QvCDQstGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHN0YXRpYyB1cGRhdGVQaG90byhwaG90b0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ3VwZGF0ZV9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBlbXBsb3llZUlkOiB0aGlzLmVtcGxveWVlSWQsXG4gICAgICAgIHBob3RvX2lkOiBwaG90b0lkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntGC0YDQuNGB0L7QstC60LAgRE9NINCz0LDQu9C10YDQtdC40LguXG4gICAqL1xuICBzdGF0aWMgZHJhdygpIHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cbiAgICByb290RWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X19maWxlLWZpZWxkXCIgdGFiaW5kZXg9XCItMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbSB2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbS0tbWFpblwiPlxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9fdGl0bGVcIj7QntGB0L3QvtCy0L3QsNGPINGE0L7RgtC+0LPRgNCw0YTQuNGPPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZnLW1haW4tcGhvdG9cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX3RpdGxlXCI+0JPQsNC70LXRgNC10Y88L2g0PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmctZ2FsbGVyeVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICBjb25zdCBtYWluUGhvdG9Db250YWluZXIgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudmctbWFpbi1waG90bycpO1xuICAgIGNvbnN0IGdhbGxlcnkgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudmctZ2FsbGVyeScpO1xuXG4gICAgdGhpcy5nZXRQaG90b3MoKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudCh7XG4gICAgICAgIG1haW46IHRydWUsXG4gICAgICAgIGVtcHR5OiB0cnVlLFxuICAgICAgICBwaG90b0lkOiBudWxsXG4gICAgICB9KTtcblxuICAgICAgZ2FsbGVyeS5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudCh7XG4gICAgICAgIG1haW46IGZhbHNlLFxuICAgICAgICBlbXB0eTogdHJ1ZSxcbiAgICAgICAgcGhvdG9JZDogbnVsbCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1haW5QaG90b0NvbnRhaW5lci5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudCh7bWFpbjogdHJ1ZSwgZW1wdHk6IHRydWUsIHBob3RvSWQ6IG51bGx9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbml0RXZlbnRzKCk7XG4gICAgfSkudGhlbihyZXNwb25zZUpzb24gPT4ge1xuICAgICAgaWYgKCFyZXNwb25zZUpzb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYWluUGhvdG9EYXRhID0gcmVzcG9uc2VKc29uLmZpbmQoKHttYWlufSkgPT4gbWFpbiA9PT0gdHJ1ZSk7XG4gICAgICBjb25zdCBnYWxsZXJ5UGhvdG9zRGF0YSA9IHJlc3BvbnNlSnNvbi5maWx0ZXIoKHttYWlufSkgPT4gbWFpbiAhPT0gdHJ1ZSk7XG5cbiAgICAgIGlmICghIW1haW5QaG90b0RhdGEpIHtcbiAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KG1haW5QaG90b0RhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnYWxsZXJ5UGhvdG9zRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgbGV0IGdhbGxlcnlQaG90b3NIdG1sID0gJyc7XG5cbiAgICAgICAgZ2FsbGVyeVBob3Rvc0RhdGEuZm9yRWFjaCgocGhvdG9EYXRhKSA9PiBnYWxsZXJ5UGhvdG9zSHRtbCArPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudChwaG90b0RhdGEpKTtcbiAgICAgICAgZ2FsbGVyeVBob3Rvc0h0bWwgKz0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe21haW46IGZhbHNlLCBlbXB0eTogdHJ1ZSwgcGhvdG9JZDogbnVsbH0pO1xuICAgICAgICBnYWxsZXJ5LmlubmVySFRNTCA9IGdhbGxlcnlQaG90b3NIdG1sXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqINCj0L3QuNCy0LXRgNGB0LDQu9GM0L3Ri9C5INC80LXRgtC+0LQg0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQsCDRhNC+0YLQvtCz0YDQsNGE0LjQuC5cbiAgICogQHBhcmFtIHBhcmFtcy5waG90b0lkIHtOdW1iZXJ9IElEINGE0L7RgtC+0LPRgNCw0YTQuNC4INC90LAg0L/QvtGA0YLQsNC70LUgVmlzaW9uLlxuICAgKiBAcGFyYW0gcGFyYW1zLm1haW4ge0Jvb2xlYW59ICDQpNC70LDQsyDQvtGB0L3QvtCy0L3QvtCz0L4g0YTQvtGC0L4uXG4gICAqIEBwYXJhbSBwYXJhbXMuZW1wdHkge0Jvb2xlYW59INCk0LvQsNCzIFwi0L/Rg9GB0YLQvtCz0L5cIiDRhNC+0YLQviwg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC60L3QvtC/0LrQuCDQt9Cw0LPRgNGD0LfQutC4LlxuICAgKiBAcGFyYW0gcGFyYW1zLnBhdGgge1N0cmluZ30g0J/Rg9GC0Ywg0Log0YTQvtGC0L7Qs9GA0LDRhNC40LguXG4gICAqIEBwYXJhbSBwYXJhbXMuYXZhdGFyVXJsIHtTdHJpbmd9INCf0YPRgtGMINC6INGE0L7RgtC+0LPRgNCw0YTQuNC4LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSDQrdC70LXQvNC10L3RgiDRhNC+0YLQvtCz0YDQsNGE0LjQuCDQsiDQstC40LTQtSDRgdGC0YDQvtC60LguXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlUGhvdG9FbGVtZW50KHBhcmFtcykge1xuICAgIGNvbnN0IHtwaG90b0lkLCBtYWluLCBlbXB0eSwgcGF0aCwgYXZhdGFyVXJsfSA9IHBhcmFtcztcbiAgICBsZXQgYnV0dG9ucyA9ICcnO1xuICAgIGxldCBlbGVtZW50Q2xhc3NlcyA9ICcnO1xuICAgIGxldCBiYWNrZ3JvdW5kSW1hZ2UgPSAnJztcbiAgICBsZXQgbWFpbkF0dHJpYnV0ZSA9ICcnO1xuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IGBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgke3BhdGh9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAoYXZhdGFyVXJsKSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHthdmF0YXJVcmx9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAobWFpbikge1xuICAgICAgbWFpbkF0dHJpYnV0ZSA9IGBkYXRhLW1haW49XCIke21haW59XCJgO1xuICAgIH1cblxuICAgIGlmIChtYWluICYmICFlbXB0eSkge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctcGhvdG8gdmctcGhvdG8tLW1haW4nO1xuICAgICAgYnV0dG9ucyA9IGBcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tcmVkXCIgZGF0YS1hY3Rpb249XCJyZW1vdmUtcGhvdG9cIj7Qo9C00LDQu9C40YLRjDwvYnV0dG9uPlxuICAgICAgYDtcbiAgICB9IGVsc2UgaWYgKG1haW4gJiYgZW1wdHkpIHtcbiAgICAgIGVsZW1lbnRDbGFzc2VzID0gJ3ZnLXBob3RvIHZnLXBob3RvLS1tYWluJztcbiAgICAgIGJ1dHRvbnMgPSBgXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvblwiIGRhdGEtYWN0aW9uPVwidXBsb2FkLXBob3RvXCI+0JfQsNCz0YDRg9C30LjRgtGMPC9idXR0b24+XG4gICAgICBgO1xuICAgIH0gZWxzZSBpZiAoIW1haW4gJiYgZW1wdHkpIHtcbiAgICAgIGVsZW1lbnRDbGFzc2VzID0gJ3ZnLWdhbGxlcnlfX2l0ZW0gdmctcGhvdG8gdmctcGhvdG8tLXVwbG9hZCc7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS11cGxvYWRcIiBkYXRhLWFjdGlvbj1cInVwbG9hZC1waG90b1wiPiYjNDM7PC9idXR0b24+XG4gICAgICBgO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50Q2xhc3NlcyA9ICd2Zy1nYWxsZXJ5X19pdGVtIHZnLXBob3RvJztcbiAgICAgIGJ1dHRvbnMgPSBgXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLWdyZWVuXCIgZGF0YS1hY3Rpb249XCJ1cGRhdGUtcGhvdG9cIj7QktGL0LHRgNCw0YLRjDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1yZWRcIiBkYXRhLWFjdGlvbj1cInJlbW92ZS1waG90b1wiPtCj0LTQsNC70LjRgtGMPC9idXR0b24+XG4gICAgICBgO1xuICAgIH1cblxuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiJHtlbGVtZW50Q2xhc3Nlc31cIlxuICAgICAgICAke2JhY2tncm91bmRJbWFnZX1cbiAgICAgICAgZGF0YS1waG90by1pZD1cIiR7cGhvdG9JZH1cIlxuICAgICAgICAke21haW5BdHRyaWJ1dGV9PlxuICAgICAgICAke2J1dHRvbnN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDQtNC70Y8g0LrQvdC+0L/QvtC6INCz0LDQu9C10YDQtdC4LlxuICAgKi9cbiAgc3RhdGljIGluaXRFdmVudHMoKSB7XG4gICAgY29uc3Qge3Jvb3RFbGVtZW50fSA9IHRoaXM7XG4gICAgY29uc3QgYnV0dG9ucyA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnJvdXRlcltidXR0b24uZGF0YXNldC5hY3Rpb25dLCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog0KDQvtGD0YLQtdGALlxuICAgKiBAdHlwZSB7e1wicmVtb3ZlLXBob3RvXCI6IGZ1bmN0aW9uKCopOiB2b2lkLCBcImZpbGUtaW5wdXQtY2hhbmdlZFwiOiBmdW5jdGlvbigqKTogdm9pZCwgXCJ1cGxvYWQtcGhvdG9cIjogZnVuY3Rpb24oKik6IHZvaWQsIFwidXBkYXRlLXBob3RvXCI6IGZ1bmN0aW9uKCopOiB2b2lkfX1cbiAgICovXG4gIHN0YXRpYyByb3V0ZXIgPSB7XG4gICAgLyoqXG4gICAgICog0JfQsNCz0YDRg9C30LrQsCDRhNC+0YLQvtCz0YDQsNGE0LjQuCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICAgKiBAcGFyYW0gZSB7RXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgICd1cGxvYWQtcGhvdG8nOiAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZUlucHV0ID0gdGhpcy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuXG4gICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5yb3V0ZXJbJ2ZpbGUtaW5wdXQtY2hhbmdlZCddKTtcbiAgICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog0KHQu9GD0YjQsNGC0LXQu9GMINGB0L7QsdGL0YLQuNGPINC40LfQvNC10L3QtdC90LjRjyDRhNCw0LnQu9C+0LLQvtCz0L4g0L/QvtC70Y8g0LLQstC+0LTQsC5cbiAgICAgKiBAcGFyYW0gZSB7ZXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgICdmaWxlLWlucHV0LWNoYW5nZWQnOiAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG5cbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkUGhvdG8ocmVhZGVyLnJlc3VsdClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiByZWFkZXIuZXJyb3IsXG4gICAgICAgICAgYmxvY2tpbmdFcnJvck1lc3NhZ2U6IGDQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDRhNC+0YLQvtCz0YDQsNGE0LjQuCAoLdC40LkpOiAke3JlYWRlci5lcnJvcn1gLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqINCX0LDQv9GA0L7RgSDQvdCwINGD0LTQsNC70LXQvdC40LUg0YTQvtGC0L7Qs9GA0LDRhNC40Lgg0YHQvtGC0YDRg9C00L3QuNC60LAuXG4gICAgICogQHBhcmFtIGUge0V2ZW50fSDQodC+0LHRi9GC0LjQtS5cbiAgICAgKi9cbiAgICAncmVtb3ZlLXBob3RvJzogKGUpID0+IHtcbiAgICAgIGNvbnN0IHBob3RvRWxlbWVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy52Zy1waG90bycpO1xuICAgICAgY29uc3Qge3Bob3RvSWR9ID0gcGhvdG9FbGVtZW50LmRhdGFzZXQ7XG5cbiAgICAgIGlmICghIXBob3RvSWQpIHtcbiAgICAgICAgdGhpcy5kZWxldGVQaG90bygrcGhvdG9JZClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDQl9Cw0L/RgNC+0YEg0L3QsCDQvtCx0L3QvtCy0LvQtdC90LjQtSDRhNC+0YLQvtCz0YDQsNGE0LjQuCDRgdC+0YLRgNGD0LTQvdC40LrQsC5cbiAgICAgKiBAcGFyYW0gZSB7RXZlbnR9INCh0L7QsdGL0YLQuNC1LlxuICAgICAqL1xuICAgICd1cGRhdGUtcGhvdG8nOiAoZSkgPT4ge1xuICAgICAgY29uc3QgcGhvdG9FbGVtZW50ID0gZS50YXJnZXQuY2xvc2VzdCgnLnZnLXBob3RvJyk7XG4gICAgICBjb25zdCB7cGhvdG9JZH0gPSBwaG90b0VsZW1lbnQuZGF0YXNldDtcblxuICAgICAgaWYgKCEhcGhvdG9JZCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVBob3RvKCtwaG90b0lkKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg5NDYpO1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9Il0sInNvdXJjZVJvb3QiOiIifQ==