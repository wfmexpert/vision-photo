!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VisionPhotoGallery=e():t.VisionPhotoGallery=e()}(this,(function(){return function(){"use strict";var t={d:function(e,o){for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}},e={};t.d(e,{default:function(){return S}});var o="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==o&&o,r="URLSearchParams"in o,n="Symbol"in o&&"iterator"in Symbol,i="FileReader"in o&&"Blob"in o&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in o,a="ArrayBuffer"in o;if(a)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function c(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function y(t){return new Promise((function(e,o){t.onload=function(){e(t.result)},t.onerror=function(){o(t.error)}}))}function m(t){var e=new FileReader,o=y(e);return e.readAsArrayBuffer(t),o}function v(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function g(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:i&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&i&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=v(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=v(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(m)}),this.text=function(){var t,e,o,r=p(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,o=y(e=new FileReader),e.readAsText(t),o;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),o=new Array(e.length),r=0;r<e.length;r++)o[r]=String.fromCharCode(e[r]);return o.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=h(t),e=c(e);var o=this.map[t];this.map[t]=o?o+", "+e:e},f.prototype.delete=function(t){delete this.map[h(t)]},f.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},f.prototype.set=function(t,e){this.map[h(t)]=c(e)},f.prototype.forEach=function(t,e){for(var o in this.map)this.map.hasOwnProperty(o)&&t.call(e,this.map[o],o,this)},f.prototype.keys=function(){var t=[];return this.forEach((function(e,o){t.push(o)})),d(t)},f.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},f.prototype.entries=function(){var t=[];return this.forEach((function(e,o){t.push([o,e])})),d(t)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){if(!(this instanceof w))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var o,r,n=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(r=(o=e.method||this.method||"GET").toUpperCase(),b.indexOf(r)>-1?r:o),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function E(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var o=t.split("="),r=o.shift().replace(/\+/g," "),n=o.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}})),e}function P(t,e){if(!(this instanceof P))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},g.call(w.prototype),g.call(P.prototype),P.prototype.clone=function(){return new P(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},P.error=function(){var t=new P(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];P.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new P(null,{status:e,headers:{location:t}})};var O=o.DOMException;try{new O}catch(t){(O=function(t,e){this.message=t,this.name=e;var o=Error(t);this.stack=o.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function A(t,e){return new Promise((function(r,n){var s=new w(t,e);if(s.signal&&s.signal.aborted)return n(new O("Aborted","AbortError"));var u=new XMLHttpRequest;function l(){u.abort()}u.onload=function(){var t,e,o={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",e=new f,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var o=t.split(":"),r=o.shift().trim();if(r){var n=o.join(":").trim();e.append(r,n)}})),e)};o.url="responseURL"in u?u.responseURL:o.headers.get("X-Request-URL");var n="response"in u?u.response:u.responseText;setTimeout((function(){r(new P(n,o))}),0)},u.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},u.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},u.onabort=function(){setTimeout((function(){n(new O("Aborted","AbortError"))}),0)},u.open(s.method,function(t){try{return""===t&&o.location.href?o.location.href:t}catch(e){return t}}(s.url),!0),"include"===s.credentials?u.withCredentials=!0:"omit"===s.credentials&&(u.withCredentials=!1),"responseType"in u&&(i?u.responseType="blob":a&&s.headers.get("Content-Type")&&-1!==s.headers.get("Content-Type").indexOf("application/octet-stream")&&(u.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof f?s.headers.forEach((function(t,e){u.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){u.setRequestHeader(t,c(e.headers[t]))})),s.signal&&(s.signal.addEventListener("abort",l),u.onreadystatechange=function(){4===u.readyState&&s.signal.removeEventListener("abort",l)}),u.send(void 0===s._bodyInit?null:s._bodyInit)}))}function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function T(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,r)}return o}function k(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?T(Object(o),!0).forEach((function(e){j(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):T(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function B(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function j(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}A.polyfill=!0,o.fetch||(o.fetch=A,o.Headers=f,o.Request=w,o.Response=P);var S=function(){function t(e){var o=this,r=e.root,n=e.employeeId,i=e.visionPersonId,s=e.personId,a=e.token,u=e.controls,l=e.masterAlbum,h=void 0===l||l;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),j(this,"galleryContainer",null),j(this,"rootElement",null),j(this,"token",null),j(this,"controls",{disableAll:!1,update:!0,upload:!0,remove:!0}),j(this,"masterAlbum",!0),j(this,"errorFunction",null),j(this,"successFunction",null),j(this,"router",{"upload-photo":function(t){var e=o.rootElement.querySelector('input[type="file"]');e.addEventListener("change",o.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],r=new FileReader;r.readAsDataURL(e),r.onload=function(){o.addPhoto(r.result).then((function(t){if(t.faultcode&&o.handleError({message:t}),t.ok)o.draw({action:"uploadPhoto"});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},r.onerror=function(){o.handleError({message:r.error,blockingErrorMessage:"Ошибка загрузки фотографии (-ий): ".concat(r.error)})}},"remove-photo":function(t){var e=t.target.closest(".vg-photo"),r=e.dataset.photoId,n=e.classList.contains("vg-photo--main");r&&o.deletePhoto(+r).then((function(t){if(t.faultcode)o.handleError({message:t});else if(t.ok)o.draw({action:n?"photoRemoveMain":"photoRemove"});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},"update-photo":function(t){var e=t.target.closest(".vg-photo"),r=e.dataset.photoId,n=e.querySelectorAll("button");r&&(n.forEach((function(t){return t.setAttribute("disabled","disabled")})),o.setAsMainPhoto(+r).then((function(t){if(t.ok)o.draw({action:"photoAlbum"});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})})))}}),!r)throw new Error("Не указан ID корневого элемента для галереи!");var c=document.getElementById(r);if(!c)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.rootElement=c,!n&&!i&&!s)throw new Error("Не указан ID пользователя на портале Vision");this.employee={id:null,personId:null,visionPersonId:null},this.employeeId=n,this.visionPersonId=i,this.personId=s,this.token=a,this.controls=u,this.masterAlbum=h,this.draw()}var e,o;return e=t,o=[{key:"errorFunction",get:function(){return this.errorFunction},set:function(t){t&&(this.errorFunction=t)}},{key:"successFunction",get:function(){return this.successFunction},set:function(t){t&&(this.successFunction=t)}},{key:"update",value:function(t){var e=t.employeeId,o=t.token;this.employeeId=e,this.token=o,this.draw()}},{key:"employeeId",get:function(){return this.employee.id},set:function(t){t&&(this.employee.id=t)}},{key:"visionPersonId",get:function(){return this.employee.visionPersonId},set:function(t){t&&(this.employee.visionPersonId=t)}},{key:"personId",get:function(){return this.employee.personId},set:function(t){t&&(this.employee.personId=t)}},{key:"rootElement",get:function(){return this.rootElement}},{key:"token",get:function(){return this.token},set:function(t){t&&(this.token=t)}},{key:"controls",get:function(){return this.controls},set:function(t){this.controls=k(k({},this.controls),t)}},{key:"masterAlbum",get:function(){return this.masterAlbum},set:function(t){this.masterAlbum=t}},{key:"handleError",value:function(t){var e=t.message,o=t.blockingErrorMessage;if(this.errorFunction){var r="";"object"===I(e)&&(e.faultstring?r=e.faultstring:Object.keys(e).reverse().forEach((function(t){r+="".concat(e[t],"<br/>")})));var n=r.length?r:JSON.stringify(e);this.errorFunction(n,"Ошибка")}else{if(o)throw new Error(o);console.log(e)}}},{key:"handleSuccess",value:function(t){this.successFunction&&this.successFunction(t)}},{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,r={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),r)}},{key:"getPhotos",value:function(){var t={};return this.employeeId&&!this.visionPersonId?t.employeeId=this.employeeId:this.visionPersonId?t.vision_person_id=this.visionPersonId:this.personId&&(t.personId=this.personId),this.request({requestPath:"get_photos",requestBody:k(k({},t),{},{masterAlbum:this.masterAlbum})})}},{key:"addPhoto",value:function(t){return this.toggleOverlayMessage("Загрузка..."),this.request({requestPath:"add_photo",requestBody:{employeeId:this.employeeId,image:t}})}},{key:"deletePhoto",value:function(t){this.toggleOverlayMessage("Удаление фотографии...");var e=this.employeeId;return this.request({requestPath:"delete_photo",requestBody:{employee_id:e,photo_id:t}})}},{key:"updatePhoto",value:function(t){return this.toggleOverlayMessage("Обновление фотографии..."),this.request({requestPath:"update_photo",requestBody:{employeeId:this.employeeId,photo_id:t}})}},{key:"setAsMainPhoto",value:function(t){return this.toggleOverlayMessage("Обновление основной фотографии..."),this.request({requestPath:"set_main_photo",requestBody:{employeeId:this.employeeId,photoId:t}})}},{key:"toggleOverlayMessage",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=this.galleryContainer;if(!e)throw new Error("Не найдена корневой элемент галереи");t?(e.dataset.message=t,e.classList.add("vision-photo-gallery--message")):(e.classList.remove("vision-photo-gallery--message"),e.dataset.message="")}},{key:"draw",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=this.rootElement;o.innerHTML='\n      <div class="vision-photo-gallery">\n        <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n        <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n          <div class="vg-main-photo"></div>\n        </div>\n        <div class="vision-photo-gallery__item">\n          <div class="vg-gallery"></div>\n        </div>\n      </div>\n    ';var r=document.querySelector(".vision-photo-gallery");this.galleryContainer=r,this.toggleOverlayMessage("Загрузка...");var n=o.querySelector(".vg-main-photo"),i=o.querySelector(".vg-gallery"),s=this.controls.upload;this.getPhotos().then((function(e){if(n.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),s&&(i.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null})),e.ok)return e.json();n.innerHTML=t.createNoPhotoElement(),t.initEvents(),t.toggleOverlayMessage()}),(function(e){t.toggleOverlayMessage(),t.handleError({message:e}),t.initEvents()})).then((function(o){var r={action:e.action,photos:o};if(!o||!o.length)return n.innerHTML=t.createNoPhotoElement(),i.parentElement.classList.add("hidden"),t.toggleOverlayMessage(),void("photoRemoveMain"===e.action&&t.handleSuccess(r));var a=o.find((function(t){return t.main})),u=o.filter((function(t){return!t.main}));if(a?n.innerHTML=t.createPhotoElement(a):n.parentElement.classList.add("hidden"),u.length){var l="";u.forEach((function(e){return l+=t.createPhotoElement(e)})),s&&(l+=t.createPhotoElement({main:!1,empty:!0,photoId:null})),i.innerHTML=l}else s||i.parentElement.classList.add("hidden");t.initEvents(),t.toggleOverlayMessage(),t.handleSuccess(r)}),(function(e){t.handleError({message:e}),t.toggleOverlayMessage(),t.initEvents()})).catch((function(e){t.toggleOverlayMessage(),t.handleError({message:e}),t.initEvents()})),this.initEvents()}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,r=t.empty,n=t.path,i=t.avatarUrl,s=this.controls,a=s.disableAll,u=s.upload,l=s.update,h=s.remove,c=void 0===h?!r:h,d="",f="",p="",y="";return!i&&n&&(p='style="background-image: url('.concat(n,')"')),i&&(p='style="background-image: url('.concat(i,')"')),o?(y='data-main="'.concat(o,'"'),r?(f="vg-photo vg-photo--main",d=this.getPhotoButtons({upload:u})):(f="vg-photo vg-photo--main",d=this.getPhotoButtons({remove:c}))):r?(f="vg-gallery__item vg-photo vg-photo--upload",d=this.getPhotoButtons({uploadIcon:u})):(f="vg-gallery__item vg-photo",d=this.getPhotoButtons({update:l,remove:c})),'\n      <div class="'.concat(f,'"\n        ').concat(p,'\n        data-photo-id="').concat(e,'"\n        ').concat(y,">\n        ").concat(a?"":d,"\n        </div>\n      ")}},{key:"createNoPhotoElement",value:function(){return'\n      <div class="vg-photo vg-photo--main">\n        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-256 -256 1024 1024">\n          <path fill="#4a5266"\n            d="M437 310.8c-28.4-28.4-62.2-49.2-99.1-61.7 34.1-25.2 56.2-65.6 56.2-111.1C394.1 61.9 332.1 0 256 0S117.9 61.9 117.9 138.1c0 45.5 22.1 85.9 56.2 111.1 -36.9 12.4-70.8 33.3-99.1 61.7C26.6 359.2 0 423.5 0 491.8 0 503 9 512 20.2 512h471.7c11.1 0 20.2-9 20.2-20.2C512 423.5 485.4 359.2 437 310.8zM158.2 138.1c0-53.9 43.9-97.8 97.8-97.8 53.9 0 97.8 43.9 97.8 97.8 0 53.9-43.9 97.8-97.8 97.8C202.1 235.8 158.2 192 158.2 138.1zM41.2 471.7C51.4 362.2 143.9 276.2 256 276.2s204.6 86 214.8 195.5H41.2z"/>\n        </svg>\n      </div>\n    '}},{key:"getPhotoButtons",value:function(t){if(t.disableAll)return"";var e={remove:'<button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>',upload:'<button class="vg-photo__button vg-button" data-action="upload-photo">Загрузить</button>',uploadIcon:'<button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>',update:'<button class="vg-photo__button vg-button vg-button--green" data-action="update-photo">Выбрать</button>'};return Object.keys(t).reduce((function(o,r){return t[r]&&(o+=e[r]),o}),"")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],o&&B(e.prototype,o),t}();return e.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,