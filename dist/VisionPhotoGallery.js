!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VisionPhotoGallery=e():t.VisionPhotoGallery=e()}(this,(function(){return function(){"use strict";var t={d:function(e,o){for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}},e={};t.d(e,{default:function(){return M}});var o="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==o&&o,n="URLSearchParams"in o,r="Symbol"in o&&"iterator"in Symbol,i="FileReader"in o&&"Blob"in o&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in o,a="ArrayBuffer"in o;if(a)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function c(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function y(t){return new Promise((function(e,o){t.onload=function(){e(t.result)},t.onerror=function(){o(t.error)}}))}function m(t){var e=new FileReader,o=y(e);return e.readAsArrayBuffer(t),o}function v(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function g(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:i&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&i&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=v(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=v(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(m)}),this.text=function(){var t,e,o,n=p(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,o=y(e=new FileReader),e.readAsText(t),o;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),o=new Array(e.length),n=0;n<e.length;n++)o[n]=String.fromCharCode(e[n]);return o.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=h(t),e=c(e);var o=this.map[t];this.map[t]=o?o+", "+e:e},f.prototype.delete=function(t){delete this.map[h(t)]},f.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},f.prototype.set=function(t,e){this.map[h(t)]=c(e)},f.prototype.forEach=function(t,e){for(var o in this.map)this.map.hasOwnProperty(o)&&t.call(e,this.map[o],o,this)},f.prototype.keys=function(){var t=[];return this.forEach((function(e,o){t.push(o)})),d(t)},f.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},f.prototype.entries=function(){var t=[];return this.forEach((function(e,o){t.push([o,e])})),d(t)},r&&(f.prototype[Symbol.iterator]=f.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function E(t,e){if(!(this instanceof E))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var o,n,r=(e=e||{}).body;if(t instanceof E){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(n=(o=e.method||this.method||"GET").toUpperCase(),b.indexOf(n)>-1?n:o),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(r),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function w(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var o=t.split("="),n=o.shift().replace(/\+/g," "),r=o.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(r))}})),e}function _(t,e){if(!(this instanceof _))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}E.prototype.clone=function(){return new E(this,{body:this._bodyInit})},g.call(E.prototype),g.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var t=new _(null,{status:0,statusText:""});return t.type="error",t};var P=[301,302,303,307,308];_.redirect=function(t,e){if(-1===P.indexOf(e))throw new RangeError("Invalid status code");return new _(null,{status:e,headers:{location:t}})};var O=o.DOMException;try{new O}catch(t){(O=function(t,e){this.message=t,this.name=e;var o=Error(t);this.stack=o.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function T(t,e){return new Promise((function(n,r){var s=new E(t,e);if(s.signal&&s.signal.aborted)return r(new O("Aborted","AbortError"));var u=new XMLHttpRequest;function l(){u.abort()}u.onload=function(){var t,e,o={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",e=new f,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var o=t.split(":"),n=o.shift().trim();if(n){var r=o.join(":").trim();e.append(n,r)}})),e)};o.url="responseURL"in u?u.responseURL:o.headers.get("X-Request-URL");var r="response"in u?u.response:u.responseText;setTimeout((function(){n(new _(r,o))}),0)},u.onerror=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},u.ontimeout=function(){setTimeout((function(){r(new TypeError("Network request failed"))}),0)},u.onabort=function(){setTimeout((function(){r(new O("Aborted","AbortError"))}),0)},u.open(s.method,function(t){try{return""===t&&o.location.href?o.location.href:t}catch(e){return t}}(s.url),!0),"include"===s.credentials?u.withCredentials=!0:"omit"===s.credentials&&(u.withCredentials=!1),"responseType"in u&&(i?u.responseType="blob":a&&s.headers.get("Content-Type")&&-1!==s.headers.get("Content-Type").indexOf("application/octet-stream")&&(u.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof f?s.headers.forEach((function(t,e){u.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){u.setRequestHeader(t,c(e.headers[t]))})),s.signal&&(s.signal.addEventListener("abort",l),u.onreadystatechange=function(){4===u.readyState&&s.signal.removeEventListener("abort",l)}),u.send(void 0===s._bodyInit?null:s._bodyInit)}))}function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function I(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,n)}return o}function B(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?I(Object(o),!0).forEach((function(e){j(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):I(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function k(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function j(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}T.polyfill=!0,o.fetch||(o.fetch=T,o.Headers=f,o.Request=E,o.Response=_);var M=function(){function t(e){var o=this,n=e.actionType,r=e.root,i=e.employeeId,s=e.visionPersonId,a=e.personId,u=e.token,l=e.controls,h=e.masterAlbum,c=void 0===h||h;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),j(this,"galleryContainer",null),j(this,"rootElement",null),j(this,"token",null),j(this,"controls",{disableAll:!1,update:!0,upload:!0,remove:!0}),j(this,"masterAlbum",!0),j(this,"actionType",""),j(this,"errorFunction",null),j(this,"successFunction",null),j(this,"router",{"upload-photo":function(t){var e=o.rootElement.querySelector('input[type="file"]');e.addEventListener("change",o.router["file-input-changed"]),e.click()},"file-input-changed":function(t){var e=t.target.files[0],n=new FileReader;n.readAsDataURL(e),n.onload=function(){o.addPhoto(n.result).then((function(t){if(t.ok)o.draw({action:"PHOTO_BIOMETRY_ADD",actionType:"upload_photo"});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},n.onerror=function(){o.handleError({message:n.error,blockingErrorMessage:"Ошибка загрузки фотографии (-ий): ".concat(n.error)})}},"remove-photo":function(t){var e=t.target.closest(".vg-photo"),n=e.dataset.photoId,r=e.classList.contains("vg-photo--main");n&&o.deletePhoto(+n).then((function(t){if(t.ok)o.draw({action:"PHOTO_BIOMETRY_REMOVE",isMainPhoto:r});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})}))},"update-photo":function(t){var e=t.target.closest(".vg-photo"),n=e.dataset.photoId,r=e.querySelectorAll("button");n&&(r.forEach((function(t){return t.setAttribute("disabled","disabled")})),o.setAsMainPhoto(+n).then((function(t){if(t.ok)o.draw({action:"PHOTO_BIOMETRY_ADD",actionType:"photo_album"});else if(200!==t.status)return t.json()}),(function(t){o.handleError({message:t})})))}}),!r)throw new Error("Не указан ID корневого элемента для галереи!");var d=document.getElementById(r);if(!d)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.rootElement=d,!i&&!s&&!a)throw new Error("Не указан ID пользователя на портале Vision");n&&(this.actionType=n),this.employee={id:null,personId:null,visionPersonId:null},this.employeeId=i,this.visionPersonId=s,this.personId=a,this.token=u,this.controls=l,this.masterAlbum=c,this.draw()}var e,o;return e=t,o=[{key:"errorFunction",get:function(){return this.errorFunction},set:function(t){t&&(this.errorFunction=t)}},{key:"successFunction",get:function(){return this.successFunction},set:function(t){t&&(this.successFunction=t)}},{key:"update",value:function(t){var e=t.employeeId,o=t.token;this.employeeId=e,this.token=o,this.draw()}},{key:"employeeId",get:function(){return this.employee.id},set:function(t){t&&(this.employee.id=t)}},{key:"visionPersonId",get:function(){return this.employee.visionPersonId},set:function(t){t&&(this.employee.visionPersonId=t)}},{key:"personId",get:function(){return this.employee.personId},set:function(t){t&&(this.employee.personId=t)}},{key:"rootElement",get:function(){return this.rootElement}},{key:"token",get:function(){return this.token},set:function(t){t&&(this.token=t)}},{key:"controls",get:function(){return this.controls},set:function(t){this.controls=B(B({},this.controls),t)}},{key:"masterAlbum",get:function(){return this.masterAlbum},set:function(t){this.masterAlbum=t}},{key:"handleError",value:function(t){var e=t.message,o=t.blockingErrorMessage;if(this.errorFunction){var n="";"object"===A(e)&&(e.faultstring?n=e.faultstring:Object.keys(e).reverse().forEach((function(t){n+="".concat(e[t],"<br/>")})));var r=n.length?n:JSON.stringify(e);this.errorFunction(r,"Ошибка")}else{if(o)throw new Error(o);console.log(e)}}},{key:"handleSuccess",value:function(t,e){this.successFunction&&this.successFunction(t,e)}},{key:"request",value:function(t){var e=t.requestPath,o=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(o)};return fetch("/api/v2/vision/".concat(e,"/"),n)}},{key:"getPhotos",value:function(){var t={};return this.employeeId&&!this.visionPersonId?t.employeeId=this.employeeId:this.visionPersonId?t.vision_person_id=this.visionPersonId:this.personId&&(t.personId=this.personId),this.request({requestPath:"get_photos",requestBody:B(B({},t),{},{masterAlbum:this.masterAlbum})})}},{key:"addPhoto",value:function(t){return this.toggleOverlayMessage("Загрузка..."),this.request({requestPath:"add_photo",requestBody:{employeeId:this.employeeId,image:t}})}},{key:"deletePhoto",value:function(t){this.toggleOverlayMessage("Удаление фотографии...");var e=this.employeeId;return this.request({requestPath:"delete_photo",requestBody:{employee_id:e,photo_id:t}})}},{key:"updatePhoto",value:function(t){return this.toggleOverlayMessage("Обновление фотографии..."),this.request({requestPath:"update_photo",requestBody:{employeeId:this.employeeId,photo_id:t}})}},{key:"setAsMainPhoto",value:function(t){return this.toggleOverlayMessage("Обновление основной фотографии..."),this.request({requestPath:"set_main_photo",requestBody:{employeeId:this.employeeId,photoId:t}})}},{key:"toggleOverlayMessage",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=this.galleryContainer;if(!e)throw new Error("Не найдена корневой элемент галереи");t?(e.dataset.message=t,e.classList.add("vision-photo-gallery--message")):(e.classList.remove("vision-photo-gallery--message"),e.dataset.message="")}},{key:"draw",value:function(t){var e=this,o=this.rootElement;o.innerHTML='\n      <div class="vision-photo-gallery">\n        <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n        <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n          <div class="vg-main-photo"></div>\n        </div>\n        <div class="vision-photo-gallery__item">\n          <div class="vg-gallery"></div>\n        </div>\n      </div>\n    ';var n=document.querySelector(".vision-photo-gallery");this.galleryContainer=n,this.toggleOverlayMessage("Загрузка...");var r=o.querySelector(".vg-main-photo"),i=o.querySelector(".vg-gallery"),s=this.controls.upload;this.getPhotos().then((function(t){if(r.innerHTML=e.createPhotoElement({main:!0,empty:!0,photoId:null}),s&&(i.innerHTML=e.createPhotoElement({main:!1,empty:!0,photoId:null})),t.ok)return t.json();r.innerHTML=e.createNoPhotoElement(),e.initEvents(),e.toggleOverlayMessage()}),(function(t){e.toggleOverlayMessage(),e.handleError({message:t}),e.initEvents()})).then((function(o){if(!o||!o.length)return r.innerHTML=e.createNoPhotoElement(),i.parentElement.classList.add("hidden"),void e.toggleOverlayMessage();var n=o.find((function(t){return t.main})),a=o.filter((function(t){return!t.main}));if(n?r.innerHTML=e.createPhotoElement(n):r.parentElement.classList.add("hidden"),a.length){var u="";a.forEach((function(t){return u+=e.createPhotoElement(t)})),s&&(u+=e.createPhotoElement({main:!1,empty:!0,photoId:null})),i.innerHTML=u}else s||i.parentElement.classList.add("hidden");var l={};"PHOTO_BIOMETRY_ADD"===t.action?l={add_photo_type:t.actionType?t.actionType:e.actionType,main_photo_replaced:o.length>0}:"PHOTO_BIOMETRY_REMOVE"===t.action&&(l={main_photo:t.isMainPhoto}),e.initEvents(),e.toggleOverlayMessage(),e.handleSuccess(t.action,l)}),(function(t){e.handleError({message:t}),e.toggleOverlayMessage(),e.initEvents()})).catch((function(t){e.toggleOverlayMessage(),e.handleError({message:t}),e.initEvents()})),this.initEvents()}},{key:"createPhotoElement",value:function(t){var e=t.photoId,o=t.main,n=t.empty,r=t.path,i=t.avatarUrl,s=this.controls,a=s.disableAll,u=s.upload,l=s.update,h=s.remove,c=void 0===h?!n:h,d="",f="",p="",y="";return!i&&r&&(p='style="background-image: url('.concat(r,')"')),i&&(p='style="background-image: url('.concat(i,')"')),o?(y='data-main="'.concat(o,'"'),n?(f="vg-photo vg-photo--main",d=this.getPhotoButtons({upload:u})):(f="vg-photo vg-photo--main",d=this.getPhotoButtons({remove:c}))):n?(f="vg-gallery__item vg-photo vg-photo--upload",d=this.getPhotoButtons({uploadIcon:u})):(f="vg-gallery__item vg-photo",d=this.getPhotoButtons({update:l,remove:c})),'\n      <div class="'.concat(f,'"\n        ').concat(p,'\n        data-photo-id="').concat(e,'"\n        ').concat(y,">\n        ").concat(a?"":d,"\n        </div>\n      ")}},{key:"createNoPhotoElement",value:function(){return'\n      <div class="vg-photo vg-photo--main">\n        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-256 -256 1024 1024">\n          <path fill="#4a5266"\n            d="M437 310.8c-28.4-28.4-62.2-49.2-99.1-61.7 34.1-25.2 56.2-65.6 56.2-111.1C394.1 61.9 332.1 0 256 0S117.9 61.9 117.9 138.1c0 45.5 22.1 85.9 56.2 111.1 -36.9 12.4-70.8 33.3-99.1 61.7C26.6 359.2 0 423.5 0 491.8 0 503 9 512 20.2 512h471.7c11.1 0 20.2-9 20.2-20.2C512 423.5 485.4 359.2 437 310.8zM158.2 138.1c0-53.9 43.9-97.8 97.8-97.8 53.9 0 97.8 43.9 97.8 97.8 0 53.9-43.9 97.8-97.8 97.8C202.1 235.8 158.2 192 158.2 138.1zM41.2 471.7C51.4 362.2 143.9 276.2 256 276.2s204.6 86 214.8 195.5H41.2z"/>\n        </svg>\n      </div>\n    '}},{key:"getPhotoButtons",value:function(t){if(t.disableAll)return"";var e={remove:'<button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>',upload:'<button class="vg-photo__button vg-button" data-action="upload-photo">Загрузить</button>',uploadIcon:'<button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>',update:'<button class="vg-photo__button vg-button vg-button--green" data-action="update-photo">Выбрать</button>'};return Object.keys(t).reduce((function(o,n){return t[n]&&(o+=e[n]),o}),"")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(e){e.addEventListener("click",t.router[e.dataset.action],!1)}))}}],o&&k(e.prototype,o),t}();return e.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,