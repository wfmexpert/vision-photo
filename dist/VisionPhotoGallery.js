var VisionPhotoGallery;VisionPhotoGallery=function(){"use strict";var t={404:function(t,o,e){function n(t,o){for(var e=0;e<o.length;e++){var n=o[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,o,e){return o in t?Object.defineProperty(t,o,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[o]=e,t}e.d(o,{default:function(){return i}});var i=function(){function t(o){var e=o.root,n=o.personId,r=o.token;if(function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw new Error("Не указан ID корневого элемента для галереи!");var i=document.getElementById(e);if(!i)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=i,!n)throw new Error("Не указан ID пользователя на портале Vision");this.personId=n,this.token=r,this.constructor.draw()}var o,e,r;return o=t,r=[{key:"request",value:function(t){var o=t.requestPath,e=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(e)};return fetch("/api/v2/vision/".concat(o,"/"),n)}},{key:"getPhotos",value:function(){return this.request({requestPath:"get_photos",requestBody:{person_id:this.personId,masterAlbum:!0}})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{person_id:this.personId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_ids:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_id:t,masterAlbum:!0}})}},{key:"draw",value:function(){var t=this,o=this.rootElement;o.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var e=o.querySelector(".vg-main-photo"),n=o.querySelector(".vg-gallery");this.getPhotos().then((function(o){if(e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),o.ok)return o.json();e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null})})).then((function(o){var r=o.find((function(t){return!0===t.main})),i=o.filter((function(t){return!0!==t.main}));if(r?e.innerHTML=t.createPhotoElement(r):e.parentElement.classList.add("hidden"),i.length){var a="";i.forEach((function(o){return a+=t.createPhotoElement(o)})),n.innerHTML=a}t.initEvents()})).catch((function(t){console.log(t)}))}},{key:"createPhotoElement",value:function(t){var o=t.photoId,e=t.main,n=t.empty,r=t.path,i=t.avatarUrl,a="",u="",s="",c="";return r&&(s='style="background-image: url('.concat(r,')"')),i&&(s='style="background-image: url('.concat(i,')"')),e&&(c='data-main="'.concat(e,'"')),e&&!n||e&&n?(u="vg-photo vg-photo--main",a='\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '):!e&&n?(u="vg-gallery__item vg-photo vg-photo--upload",a='\n                <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n            '):(u="vg-gallery__item vg-photo",a='\n                <button class="vg-photo__button vg-button vg-button--green" data-action="choose-photo">Выбрать</button>\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '),'\n            <div class="'.concat(u,'"\n                ').concat(s,'\n                data-photo-id="').concat(o,'"\n                ').concat(c,">\n                ").concat(a,"\n            </div>\n        ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(o){o.addEventListener("click",t.router[o.dataset.action],!1)}))}}],(e=[{key:"personId",get:function(){return this.constructor.personId},set:function(t){t&&(this.constructor.personId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}}])&&n(o.prototype,e),r&&n(o,r),t}();r(i,"personId",null),r(i,"rootElement",null),r(i,"token",null),r(i,"router",{"upload-photo":function(t){var o=i.rootElement.querySelector('input[type="file"]');o.addEventListener("change",i.router["file-input-changed"]),o.click()},"file-input-changed":function(t){var o=t.target.files[0],e=new FileReader;e.readAsDataURL(o),e.onload=function(){i.addPhoto(e.result).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))},e.onerror=function(){throw new Error("Ошибка загрузки фотографии (-ий): ".concat(e.error))}},"remove-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.deletePhoto(o).then((function(t){t.ok&&i.draw()}))},"update-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.updatePhoto(o).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))}})}},o={};function e(n){if(o[n])return o[n].exports;var r=o[n]={exports:{}};return t[n](r,r.exports,e),r.exports}return e.d=function(t,o){for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e(404)}().default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvLi9WaXNpb25QaG90b0dhbGxlcnkvaW5kZXgubWpzIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9zdGFydHVwIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiXSwibmFtZXMiOlsiVmlzaW9uUGhvdG9HYWxsZXJ5Iiwicm9vdCIsInBlcnNvbklkIiwidG9rZW4iLCJFcnJvciIsInJvb3RFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRoaXMiLCJjb25zdHJ1Y3RvciIsImRyYXciLCJyZXF1ZXN0UGF0aCIsInJlcXVlc3RCb2R5IiwicmVxdWVzdERlZmF1bHRzIiwibWV0aG9kIiwibW9kZSIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJyZXF1ZXN0IiwicGVyc29uX2lkIiwibWFzdGVyQWxidW0iLCJpbWFnZSIsInBob3RvSWQiLCJwaG90b19pZHMiLCJwaG90b19pZCIsImlubmVySFRNTCIsIm1haW5QaG90b0NvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJnYWxsZXJ5IiwiZ2V0UGhvdG9zIiwidGhlbiIsInJlc3BvbnNlIiwiY3JlYXRlUGhvdG9FbGVtZW50IiwibWFpbiIsImVtcHR5Iiwib2siLCJqc29uIiwicmVzcG9uc2VKc29uIiwibWFpblBob3RvRGF0YSIsImZpbmQiLCJnYWxsZXJ5UGhvdG9zRGF0YSIsImZpbHRlciIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJsZW5ndGgiLCJnYWxsZXJ5UGhvdG9zSHRtbCIsImZvckVhY2giLCJwaG90b0RhdGEiLCJpbml0RXZlbnRzIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJwYXJhbXMiLCJwYXRoIiwiYXZhdGFyVXJsIiwiYnV0dG9ucyIsImVsZW1lbnRDbGFzc2VzIiwiYmFja2dyb3VuZEltYWdlIiwibWFpbkF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwicm91dGVyIiwiZGF0YXNldCIsImFjdGlvbiIsImUiLCJmaWxlSW5wdXQiLCJjbGljayIsImZpbGUiLCJ0YXJnZXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNEYXRhVVJMIiwib25sb2FkIiwiYWRkUGhvdG8iLCJyZXN1bHQiLCJvbmVycm9yIiwiY2xvc2VzdCIsImRlbGV0ZVBob3RvIiwidXBkYXRlUGhvdG8iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwibWFwcGluZ3MiOiJxYUFJcUJBLEUsV0FLbkIsY0FBcUMsSUFBeEJDLEVBQXdCLEVBQXhCQSxLQUFNQyxFQUFrQixFQUFsQkEsU0FBVUMsRUFBUSxFQUFSQSxNQUMzQixHLDRGQURtQyxVQUM5QkYsRUFDSCxNQUFNLElBQUlHLE1BQU0sZ0RBR2xCLElBQU1DLEVBQWNDLFNBQVNDLGVBQWVOLEdBRTVDLElBQU1JLEVBR0osTUFBTSxJQUFJRCxNQUFNLDBEQUdsQixHQUxFSSxLQUFLQyxZQUFZSixZQUFjQSxHQUs1QkgsRUFDSCxNQUFNLElBQUlFLE1BQU0sK0NB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R0FDZixJQUNPN0MsRUFEYzZDLEVBQUVJLE9BQU9TLFFBQVEsYUFDUGYsUUFBeEIzQyxRQUVEQSxHQTlSUzFCLEVBK1JSc0YsWUFBWTVELEdBQ2RRLE1BQUssU0FBQUMsR0FDQUEsRUFBU0ksSUFqU0p2QyxFQWtTRlUsVUFHUjRDLE9BQU0sU0FBQUMsR0FDTEMsUUFBUUMsSUFBSUYsV0N6U3BCZ0MsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVUMsUUFHM0MsSUFBSUMsRUFBU0osRUFBeUJFLEdBQVksQ0FHakRDLFFBQVMsSUFPVixPQUhBRSxFQUFvQkgsR0FBVUUsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0NHLEVBQU9ELFFDakJmLE9DRkFGLEVBQW9CSyxFQUFJLFNBQVNILEVBQVNJLEdBQ3pDLElBQUksSUFBSUMsS0FBT0QsRUFDWE4sRUFBb0JRLEVBQUVGLEVBQVlDLEtBQVNQLEVBQW9CUSxFQUFFTixFQUFTSyxJQUM1RUUsT0FBT0MsZUFBZVIsRUFBU0ssRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLE1DSjNFUCxFQUFvQlEsRUFBSSxTQUFTSyxFQUFLQyxHQUFRLE9BQU9MLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLElGR3hGZCxFQUFvQixLIiwiZmlsZSI6IlZpc2lvblBob3RvR2FsbGVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICcuL2FwcC5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzaW9uUGhvdG9HYWxsZXJ5IHtcbiAgc3RhdGljIHBlcnNvbklkID0gbnVsbDtcbiAgc3RhdGljIHJvb3RFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGljIHRva2VuID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcih7cm9vdCwgcGVyc29uSWQsIHRva2VufSkge1xuICAgIGlmICghcm9vdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQndC1INGD0LrQsNC30LDQvSBJRCDQutC+0YDQvdC10LLQvtCz0L4g0Y3Qu9C10LzQtdC90YLQsCDQtNC70Y8g0LPQsNC70LXRgNC10LghJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyb290KTtcblxuICAgIGlmICghIXJvb3RFbGVtZW50KSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J/RgNC+0LLQtdGA0YzRgtC1INGD0LrQsNC30LDQvdC90YvQuSBJRCDQutC+0YDQvdC10LLQvtCz0L4g0Y3Qu9C10LzQtdC90YLQsCDQtNC70Y8g0LPQsNC70LXRgNC10LghJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwZXJzb25JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQndC1INGD0LrQsNC30LDQvSBJRCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3QsCDQv9C+0YDRgtCw0LvQtSBWaXNpb24nKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlcnNvbklkID0gcGVyc29uSWQ7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuXG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5kcmF3KCk7XG4gIH1cblxuICBnZXQgcGVyc29uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IucGVyc29uSWQ7XG4gIH1cblxuICBzZXQgcGVyc29uSWQocGVyc29uSWQpIHtcbiAgICBpZiAocGVyc29uSWQpIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IucGVyc29uSWQgPSBwZXJzb25JZDtcbiAgICB9XG4gIH1cblxuICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Iucm9vdEVsZW1lbnQ7XG4gIH1cblxuICBnZXQgdG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9rZW47XG4gIH1cblxuICBzZXQgdG9rZW4odG9rZW4pIHtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IudG9rZW4gPSB0b2tlbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdGR0YDRgtC60LAg0LTQu9GPINC30LDQv9GA0L7RgdC+0LIg0LogQVBJLlxuICAgKlxuICAgKiBAcGFyYW0gcmVxdWVzdFBhdGgge3N0cmluZ30g0J3QsNC30LLQsNC90LjQtSDQvNC10YLQvtC00LAgQVBJLlxuICAgKiBAcGFyYW0gcmVxdWVzdEJvZHkge29iamVjdH0g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59INCf0YDQvtC80LjRgSDQt9Cw0L/RgNC+0YHQsC5cbiAgICovXG4gIHN0YXRpYyByZXF1ZXN0KHtyZXF1ZXN0UGF0aCwgcmVxdWVzdEJvZHl9KSB7XG4gICAgY29uc3QgcmVxdWVzdERlZmF1bHRzID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBtb2RlOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUNTUkZUb2tlbic6IHRoaXMudG9rZW4sXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgIH07XG5cbiAgICByZXR1cm4gZmV0Y2goYC9hcGkvdjIvdmlzaW9uLyR7cmVxdWVzdFBhdGh9L2AsIHJlcXVlc3REZWZhdWx0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0UGhvdG9zKCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgcmVxdWVzdFBhdGg6ICdnZXRfcGhvdG9zJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIHBlcnNvbl9pZDogdGhpcy5wZXJzb25JZCxcbiAgICAgICAgbWFzdGVyQWxidW06IHRydWUsXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgYWRkUGhvdG8oaW1hZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnYWRkX3Bob3RvJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIHBlcnNvbl9pZDogdGhpcy5wZXJzb25JZCxcbiAgICAgICAgaW1hZ2UsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZVBob3RvKHBob3RvSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnZGVsZXRlX3Bob3RvJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIHBlcnNvbl9pZDogdGhpcy5wZXJzb25JZCxcbiAgICAgICAgcGhvdG9faWRzOiBbcGhvdG9JZF0sXG4gICAgICAgIG1hc3RlckFsYnVtOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG5cbiAgc3RhdGljIHVwZGF0ZVBob3RvKHBob3RvSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnZGVsZXRlX3Bob3RvJyxcbiAgICAgIHJlcXVlc3RCb2R5OiB7XG4gICAgICAgIHBlcnNvbl9pZDogdGhpcy5wZXJzb25JZCxcbiAgICAgICAgcGhvdG9faWQ6IHBob3RvSWQsXG4gICAgICAgIG1hc3RlckFsYnVtOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkcmF3KCkge1xuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gdGhpcy5yb290RWxlbWVudDtcblxuICAgIHJvb3RFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeVwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX2ZpbGUtZmllbGRcIiB0YWJpbmRleD1cIi0xXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X19pdGVtIHZpc2lvbi1waG90by1nYWxsZXJ5X19pdGVtLS1tYWluXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X190aXRsZVwiPtCe0YHQvdC+0LLQvdCw0Y8g0YTQvtGC0L7Qs9GA0LDRhNC40Y88L2g0PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmctbWFpbi1waG90b1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9fdGl0bGVcIj7Qk9Cw0LvQtdGA0LXRjzwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2Zy1nYWxsZXJ5XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgIGNvbnN0IG1haW5QaG90b0NvbnRhaW5lciA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy52Zy1tYWluLXBob3RvJyk7XG4gICAgY29uc3QgZ2FsbGVyeSA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy52Zy1nYWxsZXJ5Jyk7XG5cblxuICAgIHRoaXMuZ2V0UGhvdG9zKCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBtYWluUGhvdG9Db250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe1xuICAgICAgICBtYWluOiB0cnVlLFxuICAgICAgICBlbXB0eTogdHJ1ZSxcbiAgICAgICAgcGhvdG9JZDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGdhbGxlcnkuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe1xuICAgICAgICBtYWluOiBmYWxzZSxcbiAgICAgICAgZW1wdHk6IHRydWUsXG4gICAgICAgIHBob3RvSWQ6IG51bGwsXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYWluUGhvdG9Db250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQoe21haW46IHRydWUsIGVtcHR5OiB0cnVlLCBwaG90b0lkOiBudWxsfSk7XG4gICAgICB9XG4gICAgfSkudGhlbihyZXNwb25zZUpzb24gPT4ge1xuICAgICAgY29uc3QgbWFpblBob3RvRGF0YSA9IHJlc3BvbnNlSnNvbi5maW5kKCh7bWFpbn0pID0+IG1haW4gPT09IHRydWUpO1xuICAgICAgY29uc3QgZ2FsbGVyeVBob3Rvc0RhdGEgPSByZXNwb25zZUpzb24uZmlsdGVyKCh7bWFpbn0pID0+IG1haW4gIT09IHRydWUpO1xuXG4gICAgICBpZiAobWFpblBob3RvRGF0YSkge1xuICAgICAgICBtYWluUGhvdG9Db250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVQaG90b0VsZW1lbnQobWFpblBob3RvRGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYWluUGhvdG9Db250YWluZXIucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdhbGxlcnlQaG90b3NEYXRhLmxlbmd0aCkge1xuICAgICAgICBsZXQgZ2FsbGVyeVBob3Rvc0h0bWwgPSAnJztcblxuICAgICAgICBnYWxsZXJ5UGhvdG9zRGF0YS5mb3JFYWNoKChwaG90b0RhdGEpID0+IGdhbGxlcnlQaG90b3NIdG1sICs9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHBob3RvRGF0YSkpO1xuICAgICAgICBnYWxsZXJ5LmlubmVySFRNTCA9IGdhbGxlcnlQaG90b3NIdG1sXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVQaG90b0VsZW1lbnQocGFyYW1zKSB7XG4gICAgY29uc3Qge3Bob3RvSWQsIG1haW4sIGVtcHR5LCBwYXRoLCBhdmF0YXJVcmx9ID0gcGFyYW1zO1xuICAgIGxldCBidXR0b25zID0gJyc7XG4gICAgbGV0IGVsZW1lbnRDbGFzc2VzID0gJyc7XG4gICAgbGV0IGJhY2tncm91bmRJbWFnZSA9ICcnO1xuICAgIGxldCBtYWluQXR0cmlidXRlID0gJyc7XG5cbiAgICBpZiAocGF0aCkge1xuICAgICAgYmFja2dyb3VuZEltYWdlID0gYHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cGF0aH0pXCJgO1xuICAgIH1cblxuICAgIGlmIChhdmF0YXJVcmwpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IGBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgke2F2YXRhclVybH0pXCJgO1xuICAgIH1cblxuICAgIGlmIChtYWluKSB7XG4gICAgICBtYWluQXR0cmlidXRlID0gYGRhdGEtbWFpbj1cIiR7bWFpbn1cImA7XG4gICAgfVxuXG4gICAgaWYgKG1haW4gJiYgIWVtcHR5KSB7XG4gICAgICBlbGVtZW50Q2xhc3NlcyA9ICd2Zy1waG90byB2Zy1waG90by0tbWFpbic7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLXJlZFwiIGRhdGEtYWN0aW9uPVwicmVtb3ZlLXBob3RvXCI+0KPQtNCw0LvQuNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgIGA7XG4gICAgfSBlbHNlIGlmIChtYWluICYmIGVtcHR5KSB7XG4gICAgICBlbGVtZW50Q2xhc3NlcyA9ICd2Zy1waG90byB2Zy1waG90by0tbWFpbic7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLXJlZFwiIGRhdGEtYWN0aW9uPVwicmVtb3ZlLXBob3RvXCI+0KPQtNCw0LvQuNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgIGA7XG4gICAgfSBlbHNlIGlmICghbWFpbiAmJiBlbXB0eSkge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctZ2FsbGVyeV9faXRlbSB2Zy1waG90byB2Zy1waG90by0tdXBsb2FkJztcbiAgICAgIGJ1dHRvbnMgPSBgXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInZnLXBob3RvX19idXR0b24gdmctYnV0dG9uIHZnLWJ1dHRvbi0tdXBsb2FkXCIgZGF0YS1hY3Rpb249XCJ1cGxvYWQtcGhvdG9cIj4mIzQzOzwvYnV0dG9uPlxuICAgICAgICAgICAgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctZ2FsbGVyeV9faXRlbSB2Zy1waG90byc7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLWdyZWVuXCIgZGF0YS1hY3Rpb249XCJjaG9vc2UtcGhvdG9cIj7QktGL0LHRgNCw0YLRjDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLXJlZFwiIGRhdGEtYWN0aW9uPVwicmVtb3ZlLXBob3RvXCI+0KPQtNCw0LvQuNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgIGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke2VsZW1lbnRDbGFzc2VzfVwiXG4gICAgICAgICAgICAgICAgJHtiYWNrZ3JvdW5kSW1hZ2V9XG4gICAgICAgICAgICAgICAgZGF0YS1waG90by1pZD1cIiR7cGhvdG9JZH1cIlxuICAgICAgICAgICAgICAgICR7bWFpbkF0dHJpYnV0ZX0+XG4gICAgICAgICAgICAgICAgJHtidXR0b25zfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gIH1cblxuICBzdGF0aWMgaW5pdEV2ZW50cygpIHtcbiAgICBjb25zdCB7cm9vdEVsZW1lbnR9ID0gdGhpcztcbiAgICBjb25zdCBidXR0b25zID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyk7XG5cbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucm91dGVyW2J1dHRvbi5kYXRhc2V0LmFjdGlvbl0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByb3V0ZXIgPSB7XG4gICAgJ3VwbG9hZC1waG90byc6IChlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlSW5wdXQgPSB0aGlzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG5cbiAgICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnJvdXRlclsnZmlsZS1pbnB1dC1jaGFuZ2VkJ10pO1xuICAgICAgZmlsZUlucHV0LmNsaWNrKCk7XG4gICAgfSxcbiAgICAnZmlsZS1pbnB1dC1jaGFuZ2VkJzogKGUpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBlLnRhcmdldC5maWxlc1swXTtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmFkZFBob3RvKHJlYWRlci5yZXN1bHQpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0YTQvtGC0L7Qs9GA0LDRhNC40LggKC3QuNC5KTogJHtyZWFkZXIuZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAncmVtb3ZlLXBob3RvJzogKGUpID0+IHtcbiAgICAgIGNvbnN0IHBob3RvRWxlbWVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy52Zy1waG90bycpO1xuICAgICAgY29uc3Qge3Bob3RvSWR9ID0gcGhvdG9FbGVtZW50LmRhdGFzZXQ7XG5cbiAgICAgIGlmICghIXBob3RvSWQpIHtcbiAgICAgICAgdGhpcy5kZWxldGVQaG90byhwaG90b0lkKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgICd1cGRhdGUtcGhvdG8nOiAoZSkgPT4ge1xuICAgICAgY29uc3QgcGhvdG9FbGVtZW50ID0gZS50YXJnZXQuY2xvc2VzdCgnLnZnLXBob3RvJyk7XG4gICAgICBjb25zdCB7cGhvdG9JZH0gPSBwaG90b0VsZW1lbnQuZGF0YXNldDtcblxuICAgICAgaWYgKCEhcGhvdG9JZCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVBob3RvKHBob3RvSWQpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg0MDQpO1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9Il0sInNvdXJjZVJvb3QiOiIifQ==