!function(t,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.VisionPhotoGallery=o():t.VisionPhotoGallery=o()}(this,(function(){return function(){"use strict";var t={404:function(t,o,e){function n(t,o){for(var e=0;e<o.length;e++){var n=o[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,o,e){return o in t?Object.defineProperty(t,o,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[o]=e,t}e.d(o,{default:function(){return i}});var i=function(){function t(o){var e=o.root,n=o.personId,r=o.token;if(function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw new Error("Не указан ID корневого элемента для галереи!");var i=document.getElementById(e);if(!i)throw new Error("Проверьте указанный ID корневого элемента для галереи!");if(this.constructor.rootElement=i,!n)throw new Error("Не указан ID пользователя на портале Vision");this.personId=n,this.token=r,this.constructor.draw()}var o,e,r;return o=t,r=[{key:"request",value:function(t){var o=t.requestPath,e=t.requestBody,n={method:"POST",mode:"same-origin",credentials:"same-origin",headers:{"Content-Type":"application/json","X-CSRFToken":this.token},body:JSON.stringify(e)};return fetch("/api/v2/vision/".concat(o,"/"),n)}},{key:"getPhotos",value:function(){return this.request({requestPath:"get_photos",requestBody:{person_id:this.personId,masterAlbum:!0}})}},{key:"addPhoto",value:function(t){return this.request({requestPath:"add_photo",requestBody:{person_id:this.personId,image:t}})}},{key:"deletePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_ids:[t],masterAlbum:!0}})}},{key:"updatePhoto",value:function(t){return this.request({requestPath:"delete_photo",requestBody:{person_id:this.personId,photo_id:t,masterAlbum:!0}})}},{key:"draw",value:function(){var t=this,o=this.rootElement;o.innerHTML='\n            <div class="vision-photo-gallery">\n                <input type="file" class="vision-photo-gallery__file-field" tabindex="-1">\n                <div class="vision-photo-gallery__item vision-photo-gallery__item--main">\n                    <h4 class="vision-photo-gallery__title">Основная фотография</h4>\n                    <div class="vg-main-photo"></div>\n                </div>\n                <div class="vision-photo-gallery__item">\n                    <h4 class="vision-photo-gallery__title">Галерея</h4>\n                    <div class="vg-gallery"></div>\n                </div>\n            </div>\n        ';var e=o.querySelector(".vg-main-photo"),n=o.querySelector(".vg-gallery");this.getPhotos().then((function(o){if(e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null}),n.innerHTML=t.createPhotoElement({main:!1,empty:!0,photoId:null}),o.ok)return o.json();e.innerHTML=t.createPhotoElement({main:!0,empty:!0,photoId:null})})).then((function(o){var r=o.find((function(t){return!0===t.main})),i=o.filter((function(t){return!0!==t.main}));if(r?e.innerHTML=t.createPhotoElement(r):e.parentElement.classList.add("hidden"),i.length){var a="";i.forEach((function(o){return a+=t.createPhotoElement(o)})),n.innerHTML=a}t.initEvents()})).catch((function(t){console.log(t)}))}},{key:"createPhotoElement",value:function(t){var o=t.photoId,e=t.main,n=t.empty,r=t.path,i=t.avatarUrl,a="",u="",s="",c="";return r&&(s='style="background-image: url('.concat(r,')"')),i&&(s='style="background-image: url('.concat(i,')"')),e&&(c='data-main="'.concat(e,'"')),e&&!n||e&&n?(u="vg-photo vg-photo--main",a='\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '):!e&&n?(u="vg-gallery__item vg-photo vg-photo--upload",a='\n                <button class="vg-photo__button vg-button vg-button--upload" data-action="upload-photo">&#43;</button>\n            '):(u="vg-gallery__item vg-photo",a='\n                <button class="vg-photo__button vg-button vg-button--green" data-action="choose-photo">Выбрать</button>\n                <button class="vg-photo__button vg-button vg-button--red" data-action="remove-photo">Удалить</button>\n            '),'\n            <div class="'.concat(u,'"\n                ').concat(s,'\n                data-photo-id="').concat(o,'"\n                ').concat(c,">\n                ").concat(a,"\n            </div>\n        ")}},{key:"initEvents",value:function(){var t=this;this.rootElement.querySelectorAll("button").forEach((function(o){o.addEventListener("click",t.router[o.dataset.action],!1)}))}}],(e=[{key:"personId",get:function(){return this.constructor.personId},set:function(t){t&&(this.constructor.personId=t)}},{key:"rootElement",get:function(){return this.constructor.rootElement}},{key:"token",get:function(){return this.constructor.token},set:function(t){t&&(this.constructor.token=t)}}])&&n(o.prototype,e),r&&n(o,r),t}();r(i,"personId",null),r(i,"rootElement",null),r(i,"token",null),r(i,"router",{"upload-photo":function(t){var o=i.rootElement.querySelector('input[type="file"]');o.addEventListener("change",i.router["file-input-changed"]),o.click()},"file-input-changed":function(t){var o=t.target.files[0],e=new FileReader;e.readAsDataURL(o),e.onload=function(){i.addPhoto(e.result).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))},e.onerror=function(){throw new Error("Ошибка загрузки фотографии (-ий): ".concat(e.error))}},"remove-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.deletePhoto(o).then((function(t){t.ok&&i.draw()}))},"update-photo":function(t){var o=t.target.closest(".vg-photo").dataset.photoId;o&&i.updatePhoto(o).then((function(t){t.ok&&i.draw()})).catch((function(t){console.log(t)}))}})}},o={};function e(n){if(o[n])return o[n].exports;var r=o[n]={exports:{}};return t[n](r,r.exports,e),r.exports}return e.d=function(t,o){for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e(404)}().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS8uL1Zpc2lvblBob3RvR2FsbGVyeS9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1Zpc2lvblBob3RvR2FsbGVyeS93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vVmlzaW9uUGhvdG9HYWxsZXJ5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9WaXNpb25QaG90b0dhbGxlcnkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiVmlzaW9uUGhvdG9HYWxsZXJ5IiwicGVyc29uSWQiLCJ0b2tlbiIsIkVycm9yIiwicm9vdEVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29uc3RydWN0b3IiLCJkcmF3IiwicmVxdWVzdFBhdGgiLCJyZXF1ZXN0Qm9keSIsInJlcXVlc3REZWZhdWx0cyIsIm1ldGhvZCIsIm1vZGUiLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZldGNoIiwicmVxdWVzdCIsInBlcnNvbl9pZCIsIm1hc3RlckFsYnVtIiwiaW1hZ2UiLCJwaG90b0lkIiwicGhvdG9faWRzIiwicGhvdG9faWQiLCJpbm5lckhUTUwiLCJtYWluUGhvdG9Db250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiZ2FsbGVyeSIsImdldFBob3RvcyIsInRoZW4iLCJyZXNwb25zZSIsImNyZWF0ZVBob3RvRWxlbWVudCIsIm1haW4iLCJlbXB0eSIsIm9rIiwianNvbiIsInJlc3BvbnNlSnNvbiIsIm1haW5QaG90b0RhdGEiLCJmaW5kIiwiZ2FsbGVyeVBob3Rvc0RhdGEiLCJmaWx0ZXIiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwibGVuZ3RoIiwiZ2FsbGVyeVBob3Rvc0h0bWwiLCJmb3JFYWNoIiwicGhvdG9EYXRhIiwiaW5pdEV2ZW50cyIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwicGFyYW1zIiwicGF0aCIsImF2YXRhclVybCIsImJ1dHRvbnMiLCJlbGVtZW50Q2xhc3NlcyIsImJhY2tncm91bmRJbWFnZSIsIm1haW5BdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJvdXRlciIsImRhdGFzZXQiLCJhY3Rpb24iLCJlIiwiZmlsZUlucHV0IiwiY2xpY2siLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIm9ubG9hZCIsImFkZFBob3RvIiwicmVzdWx0Iiwib25lcnJvciIsImNsb3Nlc3QiLCJkZWxldGVQaG90byIsInVwZGF0ZVBob3RvIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBNEIsbUJBQUlELElBRWhDRCxFQUF5QixtQkFBSUMs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b3RvR2FsbGVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlZpc2lvblBob3RvR2FsbGVyeVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJWaXNpb25QaG90b0dhbGxlcnlcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAnLi9hcHAuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc2lvblBob3RvR2FsbGVyeSB7XG4gIHN0YXRpYyBwZXJzb25JZCA9IG51bGw7XG4gIHN0YXRpYyByb290RWxlbWVudCA9IG51bGw7XG4gIHN0YXRpYyB0b2tlbiA9IG51bGw7XG5cbiAgY29uc3RydWN0b3Ioe3Jvb3QsIHBlcnNvbklkLCB0b2tlbn0pIHtcbiAgICBpZiAoIXJvb3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDRg9C60LDQt9Cw0L0gSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm9vdCk7XG5cbiAgICBpZiAoISFyb290RWxlbWVudCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ9Cf0YDQvtCy0LXRgNGM0YLQtSDRg9C60LDQt9Cw0L3QvdGL0LkgSUQg0LrQvtGA0L3QtdCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAg0LTQu9GPINCz0LDQu9C10YDQtdC4IScpO1xuICAgIH1cblxuICAgIGlmICghcGVyc29uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDRg9C60LDQt9Cw0L0gSUQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC90LAg0L/QvtGA0YLQsNC70LUgVmlzaW9uJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wZXJzb25JZCA9IHBlcnNvbklkO1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcblxuICAgIHRoaXMuY29uc3RydWN0b3IuZHJhdygpO1xuICB9XG5cbiAgZ2V0IHBlcnNvbklkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnBlcnNvbklkO1xuICB9XG5cbiAgc2V0IHBlcnNvbklkKHBlcnNvbklkKSB7XG4gICAgaWYgKHBlcnNvbklkKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnBlcnNvbklkID0gcGVyc29uSWQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHJvb3RFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnJvb3RFbGVtZW50O1xuICB9XG5cbiAgZ2V0IHRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRva2VuO1xuICB9XG5cbiAgc2V0IHRva2VuKHRva2VuKSB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnRva2VuID0gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRkdGA0YLQutCwINC00LvRjyDQt9Cw0L/RgNC+0YHQvtCyINC6IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHJlcXVlc3RQYXRoIHtzdHJpbmd9INCd0LDQt9Cy0LDQvdC40LUg0LzQtdGC0L7QtNCwIEFQSS5cbiAgICogQHBhcmFtIHJlcXVlc3RCb2R5IHtvYmplY3R9INCf0LDRgNCw0LzQtdGC0YDRiyDQt9Cw0L/RgNC+0YHQsC5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fSDQn9GA0L7QvNC40YEg0LfQsNC/0YDQvtGB0LAuXG4gICAqL1xuICBzdGF0aWMgcmVxdWVzdCh7cmVxdWVzdFBhdGgsIHJlcXVlc3RCb2R5fSkge1xuICAgIGNvbnN0IHJlcXVlc3REZWZhdWx0cyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgbW9kZTogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnWC1DU1JGVG9rZW4nOiB0aGlzLnRva2VuLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZldGNoKGAvYXBpL3YyL3Zpc2lvbi8ke3JlcXVlc3RQYXRofS9gLCByZXF1ZXN0RGVmYXVsdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldFBob3RvcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIHJlcXVlc3RQYXRoOiAnZ2V0X3Bob3RvcycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBwZXJzb25faWQ6IHRoaXMucGVyc29uSWQsXG4gICAgICAgIG1hc3RlckFsYnVtOiB0cnVlLFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGFkZFBob3RvKGltYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2FkZF9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBwZXJzb25faWQ6IHRoaXMucGVyc29uSWQsXG4gICAgICAgIGltYWdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVQaG90byhwaG90b0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2RlbGV0ZV9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBwZXJzb25faWQ6IHRoaXMucGVyc29uSWQsXG4gICAgICAgIHBob3RvX2lkczogW3Bob3RvSWRdLFxuICAgICAgICBtYXN0ZXJBbGJ1bTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuXG4gIHN0YXRpYyB1cGRhdGVQaG90byhwaG90b0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICByZXF1ZXN0UGF0aDogJ2RlbGV0ZV9waG90bycsXG4gICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICBwZXJzb25faWQ6IHRoaXMucGVyc29uSWQsXG4gICAgICAgIHBob3RvX2lkOiBwaG90b0lkLFxuICAgICAgICBtYXN0ZXJBbGJ1bTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZHJhdygpIHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cbiAgICByb290RWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBjbGFzcz1cInZpc2lvbi1waG90by1nYWxsZXJ5X19maWxlLWZpZWxkXCIgdGFiaW5kZXg9XCItMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbSB2aXNpb24tcGhvdG8tZ2FsbGVyeV9faXRlbS0tbWFpblwiPlxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJ2aXNpb24tcGhvdG8tZ2FsbGVyeV9fdGl0bGVcIj7QntGB0L3QvtCy0L3QsNGPINGE0L7RgtC+0LPRgNCw0YTQuNGPPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZnLW1haW4tcGhvdG9cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwidmlzaW9uLXBob3RvLWdhbGxlcnlfX3RpdGxlXCI+0JPQsNC70LXRgNC10Y88L2g0PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmctZ2FsbGVyeVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICBjb25zdCBtYWluUGhvdG9Db250YWluZXIgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudmctbWFpbi1waG90bycpO1xuICAgIGNvbnN0IGdhbGxlcnkgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudmctZ2FsbGVyeScpO1xuXG5cbiAgICB0aGlzLmdldFBob3RvcygpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgbWFpblBob3RvQ29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHtcbiAgICAgICAgbWFpbjogdHJ1ZSxcbiAgICAgICAgZW1wdHk6IHRydWUsXG4gICAgICAgIHBob3RvSWQ6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBnYWxsZXJ5LmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHtcbiAgICAgICAgbWFpbjogZmFsc2UsXG4gICAgICAgIGVtcHR5OiB0cnVlLFxuICAgICAgICBwaG90b0lkOiBudWxsLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KHttYWluOiB0cnVlLCBlbXB0eTogdHJ1ZSwgcGhvdG9JZDogbnVsbH0pO1xuICAgICAgfVxuICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHtcbiAgICAgIGNvbnN0IG1haW5QaG90b0RhdGEgPSByZXNwb25zZUpzb24uZmluZCgoe21haW59KSA9PiBtYWluID09PSB0cnVlKTtcbiAgICAgIGNvbnN0IGdhbGxlcnlQaG90b3NEYXRhID0gcmVzcG9uc2VKc29uLmZpbHRlcigoe21haW59KSA9PiBtYWluICE9PSB0cnVlKTtcblxuICAgICAgaWYgKG1haW5QaG90b0RhdGEpIHtcbiAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlUGhvdG9FbGVtZW50KG1haW5QaG90b0RhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFpblBob3RvQ29udGFpbmVyLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnYWxsZXJ5UGhvdG9zRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgbGV0IGdhbGxlcnlQaG90b3NIdG1sID0gJyc7XG5cbiAgICAgICAgZ2FsbGVyeVBob3Rvc0RhdGEuZm9yRWFjaCgocGhvdG9EYXRhKSA9PiBnYWxsZXJ5UGhvdG9zSHRtbCArPSB0aGlzLmNyZWF0ZVBob3RvRWxlbWVudChwaG90b0RhdGEpKTtcbiAgICAgICAgZ2FsbGVyeS5pbm5lckhUTUwgPSBnYWxsZXJ5UGhvdG9zSHRtbFxuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUGhvdG9FbGVtZW50KHBhcmFtcykge1xuICAgIGNvbnN0IHtwaG90b0lkLCBtYWluLCBlbXB0eSwgcGF0aCwgYXZhdGFyVXJsfSA9IHBhcmFtcztcbiAgICBsZXQgYnV0dG9ucyA9ICcnO1xuICAgIGxldCBlbGVtZW50Q2xhc3NlcyA9ICcnO1xuICAgIGxldCBiYWNrZ3JvdW5kSW1hZ2UgPSAnJztcbiAgICBsZXQgbWFpbkF0dHJpYnV0ZSA9ICcnO1xuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IGBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgke3BhdGh9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAoYXZhdGFyVXJsKSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHthdmF0YXJVcmx9KVwiYDtcbiAgICB9XG5cbiAgICBpZiAobWFpbikge1xuICAgICAgbWFpbkF0dHJpYnV0ZSA9IGBkYXRhLW1haW49XCIke21haW59XCJgO1xuICAgIH1cblxuICAgIGlmIChtYWluICYmICFlbXB0eSkge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctcGhvdG8gdmctcGhvdG8tLW1haW4nO1xuICAgICAgYnV0dG9ucyA9IGBcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1yZWRcIiBkYXRhLWFjdGlvbj1cInJlbW92ZS1waG90b1wiPtCj0LTQsNC70LjRgtGMPC9idXR0b24+XG4gICAgICAgICAgICBgO1xuICAgIH0gZWxzZSBpZiAobWFpbiAmJiBlbXB0eSkge1xuICAgICAgZWxlbWVudENsYXNzZXMgPSAndmctcGhvdG8gdmctcGhvdG8tLW1haW4nO1xuICAgICAgYnV0dG9ucyA9IGBcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1yZWRcIiBkYXRhLWFjdGlvbj1cInJlbW92ZS1waG90b1wiPtCj0LTQsNC70LjRgtGMPC9idXR0b24+XG4gICAgICAgICAgICBgO1xuICAgIH0gZWxzZSBpZiAoIW1haW4gJiYgZW1wdHkpIHtcbiAgICAgIGVsZW1lbnRDbGFzc2VzID0gJ3ZnLWdhbGxlcnlfX2l0ZW0gdmctcGhvdG8gdmctcGhvdG8tLXVwbG9hZCc7XG4gICAgICBidXR0b25zID0gYFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ2Zy1waG90b19fYnV0dG9uIHZnLWJ1dHRvbiB2Zy1idXR0b24tLXVwbG9hZFwiIGRhdGEtYWN0aW9uPVwidXBsb2FkLXBob3RvXCI+JiM0Mzs8L2J1dHRvbj5cbiAgICAgICAgICAgIGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRDbGFzc2VzID0gJ3ZnLWdhbGxlcnlfX2l0ZW0gdmctcGhvdG8nO1xuICAgICAgYnV0dG9ucyA9IGBcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1ncmVlblwiIGRhdGEtYWN0aW9uPVwiY2hvb3NlLXBob3RvXCI+0JLRi9Cx0YDQsNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidmctcGhvdG9fX2J1dHRvbiB2Zy1idXR0b24gdmctYnV0dG9uLS1yZWRcIiBkYXRhLWFjdGlvbj1cInJlbW92ZS1waG90b1wiPtCj0LTQsNC70LjRgtGMPC9idXR0b24+XG4gICAgICAgICAgICBgO1xuICAgIH1cblxuICAgIHJldHVybiBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtlbGVtZW50Q2xhc3Nlc31cIlxuICAgICAgICAgICAgICAgICR7YmFja2dyb3VuZEltYWdlfVxuICAgICAgICAgICAgICAgIGRhdGEtcGhvdG8taWQ9XCIke3Bob3RvSWR9XCJcbiAgICAgICAgICAgICAgICAke21haW5BdHRyaWJ1dGV9PlxuICAgICAgICAgICAgICAgICR7YnV0dG9uc31cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICB9XG5cbiAgc3RhdGljIGluaXRFdmVudHMoKSB7XG4gICAgY29uc3Qge3Jvb3RFbGVtZW50fSA9IHRoaXM7XG4gICAgY29uc3QgYnV0dG9ucyA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnJvdXRlcltidXR0b24uZGF0YXNldC5hY3Rpb25dLCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgcm91dGVyID0ge1xuICAgICd1cGxvYWQtcGhvdG8nOiAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZUlucHV0ID0gdGhpcy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuXG4gICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5yb3V0ZXJbJ2ZpbGUtaW5wdXQtY2hhbmdlZCddKTtcbiAgICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICAgIH0sXG4gICAgJ2ZpbGUtaW5wdXQtY2hhbmdlZCc6IChlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcblxuICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5hZGRQaG90byhyZWFkZXIucmVzdWx0KVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYNCe0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INGE0L7RgtC+0LPRgNCw0YTQuNC4ICgt0LjQuSk6ICR7cmVhZGVyLmVycm9yfWApO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3JlbW92ZS1waG90byc6IChlKSA9PiB7XG4gICAgICBjb25zdCBwaG90b0VsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KCcudmctcGhvdG8nKTtcbiAgICAgIGNvbnN0IHtwaG90b0lkfSA9IHBob3RvRWxlbWVudC5kYXRhc2V0O1xuXG4gICAgICBpZiAoISFwaG90b0lkKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlUGhvdG8ocGhvdG9JZClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAndXBkYXRlLXBob3RvJzogKGUpID0+IHtcbiAgICAgIGNvbnN0IHBob3RvRWxlbWVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy52Zy1waG90bycpO1xuICAgICAgY29uc3Qge3Bob3RvSWR9ID0gcGhvdG9FbGVtZW50LmRhdGFzZXQ7XG5cbiAgICAgIGlmICghIXBob3RvSWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQaG90byhwaG90b0lkKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfVxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gbW9kdWxlIGV4cG9ydHMgbXVzdCBiZSByZXR1cm5lZCBmcm9tIHJ1bnRpbWUgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xucmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oNDA0KTtcbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSJdLCJzb3VyY2VSb290IjoiIn0=